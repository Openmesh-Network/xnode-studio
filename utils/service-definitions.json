[
  {
    "name": "Bitcoin Daemon (bitcoind)",
    "desc": "Deploy and run your own Bitcoin full node with bitcoind to validate transactions and blocks, support the Bitcoin network, and contribute to its security and decentralization.",
    "longDesc": "**What is bitcoind?**\n\nbitcoind is the reference implementation of the Bitcoin protocol. It is an open-source software that allows you to run a full Bitcoin node, validating transactions and blocks, and relaying them to other nodes in the Bitcoin network. Running a full node ensures that you are following the consensus rules and supporting the network's decentralization and security.\n\n**Key Features:**\n\n- **Transaction Validation:** Fully validate transactions and blocks to support the network.\n- **Decentralization:** Contribute to the decentralized nature of Bitcoin by running a full node.\n- **Security:** Enhance network security by validating transactions and blocks.\n- **Privacy:** Maintain privacy by running your own node instead of relying on third-party services.\n- **Community Support:** Join a community of volunteers supporting the Bitcoin network.",
    "useCases": "**Supporting the Network:** Help maintain the Bitcoin network by running a full node.\n- **Privacy-Conscious Users:** Ensure your transactions are validated by your own node for added privacy.\n- **Educational Purposes:** Learn about Bitcoin and blockchain technology by running a full node.",
    "support": "**Community Channels:**\n  - **Bitcoin Forum:** [Bitcoin Forum](https://bitcointalk.org/)\n  - **Reddit Communities:** r/Bitcoin for general discussions and r/BitcoinMining for mining-related queries.\n- **FAQs & Troubleshooting:**\n  - **Bitcoin Full Node FAQ:** [Bitcoin Full Node FAQ](https://bitcoin.org/en/full-node",
    "nixName": "bitcoind",
    "specs": {
      "ram": 2000,
      "storage": 512000
    },
    "tags": [
      "Validator",
      "Blockchain",
      "Bitcoin"
    ],
    "website": "https://bitcoin.org/",
    "implemented": true,
    "logo": "https://bitcoin.org/img/icons/opengraph.png",
    "options": [
      {
        "name": "enable",
        "desc": "Enable Bitcoin daemon.",
        "nixName": "btcnode.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraConfig",
        "desc": "Additional configurations to be appended to {file}`bitcoin.conf`.",
        "nixName": "btcnode.extraConfig",
        "type": "string",
        "value": ""
      },
      {
        "name": "dataDir",
        "desc": "The data directory for bitcoind.",
        "nixName": "btcnode.dataDir",
        "type": "string",
        "value": "/var/lib/bitcoind"
      },
      {
        "name": "user",
        "desc": "The user as which to run bitcoind.",
        "nixName": "btcnode.user",
        "type": "string",
        "value": "bitcoind"
      },
      {
        "name": "group",
        "desc": "The group as which to run bitcoind.",
        "nixName": "btcnode.group",
        "type": "string",
        "value": "bitcoind"
      },
      {
        "name": "rpc",
        "desc": "RPC settings",
        "nixName": "btcnode.rpc",
        "type": "attribute set",
        "value": "{ }",
        "options": [
          {
            "name": "port",
            "desc": "Override the default port on which to listen for JSON-RPC connections.",
            "nixName": "port",
            "type": "integer",
            "value": "8332"
          }
        ]
      },
      {
        "name": "pidFile",
        "desc": "Location of bitcoind pid file.",
        "nixName": "btcnode.pidFile",
        "type": "string",
        "value": "/var/lib/bitcoind/bitcoind.pid"
      },
      {
        "name": "testnet",
        "desc": "Whether to use the testnet instead of mainnet.",
        "nixName": "btcnode.testnet",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "port",
        "desc": "Override the default port on which to listen for connections.",
        "nixName": "btcnode.port",
        "type": "integer",
        "value": "8333"
      },
      {
        "name": "prune",
        "desc": "Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. Warning: Reverting this setting requires re-downloading the entire blockchain. (\"disable\" = disable pruning blocks, \"manual\" = allow manual pruning via RPC, >=550 = automatically prune block files to stay under the specified target size in MiB).",
        "nixName": "btcnode.prune",
        "type": "string",
        "value": "manual"
      },
      {
        "name": "extraCmdlineOptions",
        "desc": "Extra command line options to pass to bitcoind. Run bitcoind --help to list all available options.",
        "nixName": "btcnode.extraCmdlineOptions",
        "type": "list of string",
        "value": "[ ]"
      }
    ]
  },
  {
    "name": "Bitwarden",
    "desc": "Deploy Bitwarden with a single-click setup to create a secure, self-hosted password management solution. Bitwarden allows users to store and share sensitive information safely while maintaining complete control over their data.",
    "longDesc": "**What is Bitwarden?**\n\nBitwarden is an open-source password manager designed for personal and organizational use. It enables users to store passwords, secure notes, and other sensitive information in an encrypted vault, accessible from any device. The self-hosted version gives users the freedom to run Bitwarden on their own infrastructure.\n\n**Key Features:**\n\n- **One-Click Deployment:** Easily set up Bitwarden using Docker, streamlining installation and management.\n- **Cross-Platform Support:** Operates seamlessly across Linux, macOS, and Windows, making it accessible to a wide range of users.\n- **Data Privacy:** Offers end-to-end encryption, ensuring that user data is stored securely and never sent to third-party servers.\n- **API Compatibility:** Provides a public API for developers to integrate Bitwarden functionality into other applications.\n- **Team Collaboration:** Share passwords and secure notes within organizations, enabling effective team collaboration and security.",
    "useCases": "- **Individuals:** Securely store and manage personal passwords and sensitive information without relying on cloud services.\n- **Businesses:** Deploy Bitwarden to manage company-wide access to passwords and confidential data while adhering to compliance standards.\n- **Educational Institutions:** Use Bitwarden to share resources among staff and students, maintaining security and privacy.",
    "support": "- **Community Forums:** Engage with other users and seek help in the [Bitwarden Community](https://community.bitwarden.com).\n- **Documentation:** Access comprehensive guides and troubleshooting steps on the [Bitwarden Help Center](https://bitwarden.com/help/).\n- **Developer Resources:** For API documentation and integration guidelines, visit the [Bitwarden Developers page](https://bitwarden.com/developers/).\n\n This template emphasizes Bitwarden’s robust security features, ease of deployment, and flexibility, making it suitable for various users, from individuals to organizations. For more information, explore the [official Bitwarden documentation](https://bitwarden.com/help/).",
    "tags": [
      "Password Managers"
    ],
    "website": "https://bitwarden.com",
    "implemented": false,
    "logo": "https://bitwarden.com/favicon-32x32.png?v=1abf57d1154002a9fac426a2c5c04d85",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "bitwarden",
    "options": [
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The domain the Bitwarden/Vaultwarden is accessible on.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.domain",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether to sync ldap groups into BitWarden.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.groups",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether to enable Bitwarden Directory Connector.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The bitwarden-directory-connector-cli package to use.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.package",
        "type": "package",
        "value": "pkgs.bitwarden-directory-connector-cli"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Remove users from bitwarden groups if no longer in the ldapgroup.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.removeDisabled",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Options to configure the LDAP connection. If you used the desktopapplication to test the configuration you can find the settings bysearching for ldap in~/.config/Bitwarden\\ Directory\\ Connector/data.json.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap",
        "type": "attribute set of (JSON value)",
        "value": "{ }"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Options to configure what gets synced. If you used the desktopapplication to test the configuration you can find the settings bysearching for sync in~/.config/Bitwarden\\ Directory\\ Connector/data.json.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync",
        "type": "attribute set of (JSON value)",
        "value": "{ }"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "User to run the program.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.user",
        "type": "string",
        "value": "\"bwdc\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Sync users.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.users",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "User directory, relative to root.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.userPath",
        "type": "string",
        "value": "\"ou=users\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Class that users must have.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.userObjectClass",
        "type": "string",
        "value": "\"inetOrgPerson\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "LDAP filter for users.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.userFilter",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Attribute for a users email.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.userEmailAttribute",
        "type": "string",
        "value": "\"mail\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "If a user has no email address, combine a username prefix with asuffix value to form an email.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.useEmailPrefixSuffix",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Remove and re-add users/groups, See https://bitwarden.com/help/user-group-filters/#overwriting-syncsfor more details.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.overwriteExisting",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Attribute that lists members in a LDAP group.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.memberAttribute",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Enable if you are syncing more than 2000 users/groups.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.largeImport",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Group directory, relative to root.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.groupPath",
        "type": "string",
        "value": "\"ou=groups\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "A class that groups will have.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.groupObjectClass",
        "type": "string",
        "value": "\"groupOfNames\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Attribute for a name of group.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.groupNameAttribute",
        "type": "string",
        "value": "\"cn\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "LDAP filter for groups.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.groupFilter",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Suffix for the email, normally @example.com.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.emailSuffix",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The attribute that contains the users username.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.emailPrefixAttribute",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Attribute that lists a user’s creation date.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.sync.creationDateAttribute",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Path to file that contains LDAP password for user in{option}`ldap.username",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.secrets.ldap",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Path to file that contains Client Secret.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.secrets.bitwarden.client_path_secret",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Path to file that contains Client ID.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.secrets.bitwarden.client_path_id",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The user to authenticate as.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.username",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether to use STARTTLS.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.startTls",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether to use TLS.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.ssl",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Root path for LDAP.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.rootPath",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Port LDAP is accessible on.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "389"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether the LDAP server paginates search results.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.pagedSearch",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The host the LDAP is accessible on.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.hostname",
        "type": "string",
        "value": null
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "Whether the LDAP Server is an Active Directory.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.ldap.ad",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "security/bitwarden-directory-connector-cli.nix",
        "desc": "The interval when to run the connector. This uses systemd’sOnCalendar syntax.",
        "nixName": "relatedOption.bitwarden-directory-connector-cli.interval",
        "type": "string",
        "value": "\"*:0,15,30,45\""
      }
    ]
  },
  {
    "name": "Bor (Polygon)",
    "desc": "Deploy Bor Polygon with a one-click setup to operate a full Ethereum-compatible blockchain node on the Polygon PoS (Proof of Stake) network. Bor is essential for managing transactions and ensuring network security.",
    "longDesc": "**What is Bor?**\n\nBor is the official Golang implementation of the Polygon blockchain, designed for high-performance Ethereum-compatible operations. It acts as a consensus layer for the Polygon PoS network, handling transaction processing and state changes while maintaining compatibility with Ethereum’s EVM (Ethereum Virtual Machine).\n\n**Key Features:**\n\n- **One-Click Deployment:** Simplified installation using Docker, allowing quick access to Polygon’s infrastructure.\n- **Scalability:** Supports various node types, including validators, sentries, and archival nodes, to accommodate different scaling needs.\n- **Data Privacy:** All node operations occur within your infrastructure, ensuring complete control over sensitive data.\n- **API Compatibility:** Offers a comprehensive API for integrating with other applications and services within the Ethereum ecosystem.\n- **Multi-Network Support:** Operate on different networks, including Polygon Mainnet, Amory, and Mumbai Testnet, facilitating flexible deployment options.",
    "useCases": "- **Developers:** Build and test dApps (decentralized applications) on a reliable and secure blockchain environment.\n- **Enterprises:** Utilize Polygon’s capabilities to deploy scalable blockchain solutions that meet specific business requirements.\n- **Researchers:** Analyze blockchain data and performance metrics using a dedicated node.",
    "support": "- **Community Forums:** Engage with other developers and users on the [Polygon Community Forum](https://forum.polygon.technology) for insights and assistance.\n- **Documentation:** Access comprehensive installation and configuration guides on the [Bor GitHub Repository](https://github.com/maticnetwork/bor) and [Polygon Docs](https://docs.polygon.technology).\n- **Troubleshooting Help:** Explore common issues and resolutions in the [Bharwadia Help Centre](https://bitwarden.com/help/).\n\n This template outlines the core functionalities and practical applications of Bor within the Polygon ecosystem, emphasizing its benefits for developers and enterprises. For further details, you can visit the [official Bor documentation](https://github.com/maticnetwork/bor).",
    "flakes": [
      {
        "name": "openmesh-bor-package",
        "url": "github:CheesecakeLabs/openmesh-bor-package"
      }
    ],
    "nixName": "polygon-bor",
    "specs": {
      "ram": 16000,
      "storage": 4000000
    },
    "tags": [
      "RPC",
      "Validator",
      "Blockchain",
      "Polygon"
    ],
    "website": "https://polygon.technology/",
    "implemented": true,
    "logo": "https://s2.coinmarketcap.com/static/img/coins/64x64/28321.png",
    "options": [
      {
        "name": "enable",
        "desc": "Enable Polygon Bor Node.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "chain",
        "desc": "Name of the chain to sync ('amoy', 'mumbai', 'mainnet').",
        "nixName": "chain",
        "type": "string",
        "value": "mainnet"
      },
      {
        "name": "authrpc.addr",
        "desc": "Listening address for authenticated APIs.",
        "nixName": "authrpc.addr",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "authrpc.port",
        "desc": "Listening port for authenticated APIs.",
        "nixName": "authrpc.port",
        "type": "integer",
        "value": "8551"
      },
      {
        "name": "authrpc.vhosts",
        "desc": "Comma separated list of virtual hostnames from which to accept requests.",
        "nixName": "authrpc.vhosts",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "http.addr",
        "desc": "HTTP-RPC server listening interface.",
        "nixName": "http.addr",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "http.api",
        "desc": "APIs offered over the HTTP-RPC interface.",
        "nixName": "http.api",
        "type": "string",
        "value": "eth,net,web3,txpool,bor"
      },
      {
        "name": "http.corsdomain",
        "desc": "Comma separated list of domains for cross-origin requests.",
        "nixName": "http.corsdomain",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "http.ep-requesttimeout",
        "desc": "Request Timeout for HTTP RPC execution pool.",
        "nixName": "http.ep-requesttimeout",
        "type": "string",
        "value": "0s"
      },
      {
        "name": "http.ep-size",
        "desc": "Maximum size of workers in HTTP RPC execution pool.",
        "nixName": "http.ep-size",
        "type": "integer",
        "value": "40"
      },
      {
        "name": "http.port",
        "desc": "HTTP-RPC server listening port.",
        "nixName": "http.port",
        "type": "integer",
        "value": "8545"
      },
      {
        "name": "ws.enable",
        "desc": "Enable the WS-RPC server.",
        "nixName": "ws.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "ws.addr",
        "desc": "WS-RPC server listening interface.",
        "nixName": "ws.addr",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "ws.api",
        "desc": "APIs offered over the WS-RPC interface.",
        "nixName": "ws.api",
        "type": "string",
        "value": "net,web3"
      },
      {
        "name": "ws.ep-requesttimeout",
        "desc": "Request Timeout for WS RPC execution pool.",
        "nixName": "ws.ep-requesttimeout",
        "type": "string",
        "value": "0s"
      },
      {
        "name": "ws.ep-size",
        "desc": "Maximum size of workers in WS RPC execution pool.",
        "nixName": "ws.ep-size",
        "type": "integer",
        "value": "40"
      },
      {
        "name": "ws.origins",
        "desc": "Origins for WebSocket requests.",
        "nixName": "ws.origins",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "ws.port",
        "desc": "WS-RPC server listening port.",
        "nixName": "ws.port",
        "type": "integer",
        "value": "8546"
      },
      {
        "name": "grpc.addr",
        "desc": "Address for the GRPC API.",
        "nixName": "grpc.addr",
        "type": "string",
        "value": ":3131"
      },
      {
        "name": "bor.heimdall",
        "desc": "URL of Heimdall service.",
        "nixName": "bor.heimdall",
        "type": "string",
        "value": "http://0.0.0.0:1317"
      },
      {
        "name": "bor.runheimdall",
        "desc": "Run Heimdall service as a child process.",
        "nixName": "bor.runheimdall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "bor.runheimdallargs",
        "desc": "Additional arguments for the Heimdall service.",
        "nixName": "bor.runheimdallargs",
        "type": "list of string",
        "value": "[]"
      },
      {
        "name": "bor.useheimdallapp",
        "desc": "Use Heimdall app for data fetching (requires bor.runheimdall).",
        "nixName": "bor.useheimdallapp",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "extraArgs",
        "desc": "Additional arguments for the Bor executable.",
        "nixName": "extraArgs",
        "type": "list of string",
        "value": "[]"
      },
      {
        "name": "verbosity",
        "desc": "Logging verbosity level (5=trace, 4=debug, 3=info, 2=warn, 1=error, 0=crit).",
        "nixName": "verbosity",
        "type": "integer",
        "value": "3"
      },
      {
        "name": "bootNodes",
        "desc": "List of bootnodes to connect to.",
        "nixName": "bootNodes",
        "type": "list of string",
        "value": "[ \"enode://b8f1cc9c5d4403703fbf377116469667d2b1823c0daf16b7250aa576bacf399e42c3930ccfcb02c5df6879565a2b8931335565f0e8d3f8e72385ecf4a4bf160a@3.36.224.80:30303\" \"enode://8729e0c825f3d9cad382555f3e46dcff21af323e89025a0e6312df541f4a9e73abfa562d64906f5e59c51fe6f0501b3e61b07979606c56329c020ed739910759@54.194.245.5:30303\" ]"
      }
    ]
  },
  {
    "name": "Chainlink Data Dashboard",
    "desc": "Deploy a self-hosted Chainlink Data Dashboard to securely display real-time price feeds and CCIP data, enabling decentralized cross-chain operations with ease.",
    "longDesc": "**Overview**\n\nYou can seamlessly deploy a Chainlink Data Dashboard to display real-time price feeds and CCIP information without deep blockchain expertise. This dashboard enables developers to leverage decentralized data feeds and cross-chain messaging using Openmesh’s infrastructure. Deploy and manage the dashboard directly from your browser, allowing Web3 developers to build decentralized applications quickly and efficiently with minimal setup required.",
    "useCases": "- **Cross-Chain Message Monitoring:** Track encoded messages triggering multi-chain operations, ensuring secure and transparent cross-chain communication.\n- **Token Transfer Tracking:** Monitor seamless token movements between blockchains with detailed logs, including gas metrics and transaction history.\n- **Multi-Currency Conversion Insights:** Access real-time price feeds with support for multiple tokens and currency conversions for trustless financial applications.\n- **Composability Monitoring:** Observe how smart contracts across chains interact via CCIP, enhancing interoperability in decentralized applications.",
    "support": "- **Third-Party Links:** Relevant external links for additional resources and troubleshooting (e.g., [Chainlink CCIP Documentation](https://docs.chain.link/ccip)).\n- **Community:** Engage with the Openmesh community forums and chats for peer support.\n- **Direct Assistance:** Submit support tickets for technical help or advanced troubleshooting.\n- **Updates & Announcements:** Stay informed on product news through newsletters and forums.",
    "flakes": [
      {
        "name": "openmesh-chainlink-data-dashboard-flake",
        "url": "github:Openmesh-Network/chainlink-data-dashboard"
      }
    ],
    "nixName": "openmesh-chainlink-data-dashboard",
    "specs": {
      "ram": 2000,
      "storage": 100
    },
    "tags": [
      "Blockchain",
      "Chainlink"
    ],
    "website": "https://github.com/Openmesh-Network/chainlink-data-dashboard",
    "implemented": true,
    "logo": "https://cdn.prod.website-files.com/5f6b7190899f41fb70882d08/6657084f0e022fd363426fc4_favicon.png",
    "options": [
      {
        "name": "enable",
        "desc": "Enable the nextjs app",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "hostname",
        "desc": "The hostname under which the app should be accessible.",
        "nixName": "hostname",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "port",
        "desc": "The port under which the app should be accessible.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3000"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open ports in the firewall for this application.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "siteName",
        "desc": "Title of the webpage.",
        "nixName": "siteName",
        "type": "string",
        "value": "Openmesh Chainlink Data Dashboard"
      },
      {
        "name": "siteDescription",
        "desc": "Description of the webpage.",
        "nixName": "siteDescription",
        "type": "string",
        "value": "Trustless access to Chainlink price feed and CCIP data."
      }
    ]
  },
  {
    "name": "Chainlink Node",
    "desc": "Deploy and manage a Chainlink node to connect smart contracts with off-chain data, enabling decentralized oracle functionality.",
    "longDesc": "**What is Chainlink?**\n\nChainlink is a decentralized oracle network that enables smart contracts on blockchains to securely connect to external data sources, APIs, and payment systems. Chainlink nodes are responsible for gathering off-chain data and delivering it on-chain in a trustless manner.\n\n**Key Features:**\n\n- **Decentralized Data Feeds:** Connect smart contracts to high-quality data feeds.\n- **Secure Connections:** Maintain secure connections with off-chain data sources.\n- **Scalability:** Support multiple oracle nodes to ensure data reliability and integrity.\n- **API Compatibility:** Easy integration with existing APIs for seamless data access.\n- **Flexible Configuration:** Configurable with various blockchain networks and environments.",
    "useCases": "- **Developers:** Build smart contracts that require reliable external data.\n- **Enterprises:** Integrate smart contracts with off-chain systems for increased functionality.\n- **Researchers:** Test and validate decentralized oracle solutions.",
    "support": "- **Community Forums:** Connect with other developers on the [Chainlink Community Forum](https://forum.chain.link/).\n- **Documentation:** Access extensive documentation on the [Chainlink Docs](https://docs.chain.link/).\n- **Troubleshooting:** Find solutions to common issues in the [Chainlink Support Center](https://support.chain.link/).",
    "flakes": [
      {
        "name": "openmesh-chainlink-package",
        "url": "github:CheesecakeLabs/openmesh-chainlink-package"
      }
    ],
    "nixName": "chainlink",
    "specs": {
      "ram": 8192,
      "storage": 1048576
    },
    "tags": [
      "Oracle",
      "Blockchain",
      "Data Feed",
      "Chainlink"
    ],
    "website": "https://chain.link/",
    "implemented": false,
    "logo": "https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png",
    "options": [
      {
        "name": "enable",
        "desc": "Enable the Chainlink Node.",
        "nixName": "enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "jsonOutput",
        "desc": "Enable JSON output format instead of table.",
        "nixName": "jsonOutput",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "verbosity",
        "desc": "Logging verbosity level (5=trace|4=debug|3=info|2=warn|1=error|0=crit).",
        "nixName": "verbosity",
        "type": "integer",
        "value": "3"
      },
      {
        "name": "dataDir",
        "desc": "Path to the data directory for Chainlink node.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/chainlink"
      },
      {
        "name": "keystorePath",
        "desc": "Path to the keystore directory.",
        "nixName": "keystorePath",
        "type": "string",
        "value": "/var/lib/chainlink/keystore"
      },
      {
        "name": "passwordFile",
        "desc": "Path to the file containing the keystore password.",
        "nixName": "passwordFile",
        "type": "string",
        "value": "/var/lib/chainlink/password"
      },
      {
        "name": "ethereumURL",
        "desc": "Ethereum node URL for Chainlink to connect.",
        "nixName": "ethereumURL",
        "type": "string",
        "value": "http://localhost:8545"
      },
      {
        "name": "bridgeURL",
        "desc": "URL of the bridge to connect with.",
        "nixName": "bridgeURL",
        "type": "null or string",
        "value": null
      },
      {
        "name": "extraArgs",
        "desc": "Additional arguments to pass to the Chainlink CLI.",
        "nixName": "extraArgs",
        "type": "list of string",
        "value": "[]"
      }
    ]
  },
  {
    "name": "changedetection.io",
    "desc": "Deploy ChangeDetection.io with a one-click setup to monitor website changes and receive alerts for updates, such as price changes, restocks, or content modifications. This tool allows users to efficiently track changes on websites relevant to their interests.",
    "longDesc": "**What is ChangeDetection.io?**\n\nChangeDetection.io is a powerful open-source web monitoring tool that allows users to track changes on web pages in real-time. Whether monitoring prices, product availability, or content updates, it ensures users stay informed about important changes without manually checking websites.\n\n**Key Features:**\n\n- **One-Click Deployment:** Simple installation via Docker, enabling quick access to monitoring capabilities.\n- **Scalability:** Supports monitoring up to 5,000 URLs with customizable check intervals to suit user needs.\n- **Privacy:** All monitoring activities are handled on the user’s infrastructure, ensuring privacy and security.\n- **API Compatibility:** Integrates with various notification services (e.g., Discord, Slack, Email) to provide alerts in real-time.\n- **Targeted Monitoring:** Users can specify which elements of a webpage to monitor, including HTML elements, JSON responses, and more.",
    "useCases": "- **Retail Consumers:** Track prices and stock availability for products across different online stores to catch sales or restocks.\n- **Data Journalists:** Monitor websites for updates on key topics, ensuring timely reporting on changes.\n- **Developers and Researchers:** Use ChangeDetection.io to keep tabs on documentation or content updates on various web services.",
    "support": "- **Community Forums:** Engage with users and seek assistance through the [ChangeDetection.io Community](https://changedetection.io).\n- **Documentation:** Comprehensive guides and FAQs are available at [ChangeDetection.io Docs](https://changedetection.io/docs).\n- **API Reference:** Developers can access the [API documentation](https://changedetection.io/docs/api_v1/index.html) for advanced usage.\n\n    This template provides a clear overview of ChangeDetection.io, emphasizing its ease of use, robust features, and practical applications across various user scenarios. For more details, visit the [official ChangeDetection.io website](https://changedetection.io).",
    "nixName": "changedetection-io",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Automation"
    ],
    "website": "https://github.com/dgtlmoon/changedetection.io",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "baseURL",
        "desc": "The base url used in notifications and {base_url} token.",
        "nixName": "baseURL",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "behindProxy",
        "desc": "Enable this option when changedetection-io runs behind a reverse proxy, so that it trusts X-* headers. It is recommend to run changedetection-io behind a TLS reverse proxy.",
        "nixName": "behindProxy",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "chromePort",
        "desc": "A free port on which webDriverSupport or playwrightSupport listen on localhost.",
        "nixName": "chromePort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "4444"
      },
      {
        "name": "datastorePath",
        "desc": "The directory used to store all data for changedetection-io.",
        "nixName": "datastorePath",
        "type": "string",
        "value": "/var/lib/changedetection-io"
      },
      {
        "name": "enable",
        "desc": "Whether to enable changedetection-io.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environmentFile",
        "desc": "Securely pass environment variabels to changedetection-io. This can be used to set for example a frontend password reproducible via SALTED_PASS which convinetly also deactivates nags about the hosted version. SALTED_PASS should be 64 characters long while the first 32 are the salt and the second the frontend password. It can easily be retrieved from the settings file when first set via the frontend with the following command: jq -r .settings.application.password /var/lib/changedetection-io/url-watches.json",
        "nixName": "environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "group",
        "desc": "Group account under which changedetection-io runs.",
        "nixName": "group",
        "type": "string",
        "value": "changedetection-io"
      },
      {
        "name": "listenAddress",
        "desc": "Address the server will listen on.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "playwrightSupport",
        "desc": "Enable support for fetching web pages using playwright and Chromium. This starts a headless Chromium controlled by puppeteer in an oci container.  Playwright can currently leak memory. See https://github.com/dgtlmoon/changedetection.io/wiki/Playwright-content-fetcher#playwright-memory-leak",
        "nixName": "playwrightSupport",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "port",
        "desc": "Port the server will listen on.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "5000"
      },
      {
        "name": "user",
        "desc": "User account under which changedetection-io runs.",
        "nixName": "user",
        "type": "string",
        "value": "changedetection-io"
      },
      {
        "name": "webDriverSupport",
        "desc": "Enable support for fetching web pages using WebDriver and Chromium. This starts a headless chromium controlled by puppeteer in an oci container.  Playwright can currently leak memory. See https://github.com/dgtlmoon/changedetection.io/wiki/Playwright-content-fetcher#playwright-memory-leak",
        "nixName": "webDriverSupport",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Dar ",
    "desc": "Deploy DAR (Disk Archive) with a one-click setup to efficiently manage and store backups of your file systems. DAR provides powerful archiving capabilities, enabling both full and incremental backups with ease.",
    "longDesc": "**What is DAR?**\n\nDAR is an open-source command-line tool designed for backup and archiving purposes. It allows users to create and manage archives of files and directories, with support for features such as splitting archives across multiple volumes, compression, and encryption.\n\n**Key Features:**\n\n- **One-Click Deployment:** Simplified installation through Docker for quick setup.\n- **Scalability:** Supports full, incremental, and differential backups with flexible options for large datasets.\n- **Privacy:** Ensures that all backup data remains within the user’s environment.\n- **API Compatibility:** Integrates with other tools and services for enhanced functionality.\n- **Advanced Features:** Includes selective compression, encryption, and support for extended file attributes.",
    "useCases": "- **Personal Users:** Backup important files and directories to safeguard against data loss.\n- **Enterprises:** Implement robust backup strategies for critical business data to ensure compliance and disaster recovery.\n- **Educators:** Utilize DAR for managing course materials and sensitive data securely.",
    "support": "- **Community Forums:** Participate in discussions and seek help through [DAR Community](https://dar.linux.free.fr).\n- **Documentation:** Access comprehensive guides and resources at the [DAR Documentation](https://dar.linux.free.fr/doc).\n- **Troubleshooting Help:** Check the official GitHub repository for issues and user-contributed support.",
    "tags": [
      "Backup"
    ],
    "website": "http://dar.linux.free.fr",
    "implemented": false,
    "logo": "",
    "specs": {
      "ram": 256,
      "storage": 0
    },
    "nixName": "dar",
    "options": [
      {
        "name": "programs.darling.enable",
        "desc": "Whether to enable Darling, a Darwin/macOS compatibility layer forLinux.",
        "nixName": "programs.darling.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "programs.darling.package",
        "desc": "The darling package to use.",
        "nixName": "programs.darling.package",
        "type": "package",
        "value": "pkgs.darling"
      },
      {
        "name": "web-servers/darkhttpd.nix",
        "desc": "Whether to enable DarkHTTPd web server.",
        "nixName": "relatedOption.darkhttpd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "virtualisation.host.pkgs",
        "desc": "Package set to use for the host-specific packages of the VM runner.Changing this to e.g. a Darwin package set allows running NixOS VMs onDarwin.",
        "nixName": "virtualisation.host.pkgs",
        "type": "An evaluation of Nixpkgs; the top level attribute set of packages",
        "value": "pkgs"
      },
      {
        "name": "misc/tabby.nix",
        "desc": "Specifies the device to use for hardware acceleration.cpu: no acceleration just use the CPUrocm: supported by modern AMD GPUscuda: supported by modern NVIDIA GPUsmetal: supported on darwin aarch64 machinesTabby will try and determine what type of acceleration that isalready enabled in your configuration whenacceleration = null.nixpkgs.config.cudaSupportnixpkgs.config.rocmSupportif stdenv.isDarwin && stdenv.isAarch64IFF multiple acceleration methods are found to be enabled or if youhaven’t set either cudaSupport or rocmSupport you will haveto specify the device type manually here otherwise it will default tothe first from the list above or to cpu.",
        "nixName": "relatedOption.tabby.acceleration",
        "type": "null or one of \"cpu\", \"rocm\", \"cuda\", \"metal\"",
        "value": "null"
      },
      {
        "name": "misc/readarr.nix",
        "desc": "User account under which Readarr runs.",
        "nixName": "relatedOption.readarr.user",
        "type": "string",
        "value": "\"readarr\""
      },
      {
        "name": "misc/readarr.nix",
        "desc": "The readarr package to use.",
        "nixName": "relatedOption.readarr.package",
        "type": "package",
        "value": "pkgs.readarr"
      },
      {
        "name": "misc/readarr.nix",
        "desc": "Open ports in the firewall for Readarr",
        "nixName": "relatedOption.readarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "misc/readarr.nix",
        "desc": "Group under which Readarr runs.",
        "nixName": "relatedOption.readarr.group",
        "type": "string",
        "value": "\"readarr\""
      },
      {
        "name": "misc/readarr.nix",
        "desc": "Whether to enable Readarr, a Usenet/BitTorrent ebook downloader.",
        "nixName": "relatedOption.readarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "misc/readarr.nix",
        "desc": "The directory where Readarr stores its data files.",
        "nixName": "relatedOption.readarr.dataDir",
        "type": "string",
        "value": "\"/var/lib/readarr/\""
      },
      {
        "name": "misc/radarr.nix",
        "desc": "User account under which Radarr runs.",
        "nixName": "relatedOption.radarr.user",
        "type": "string",
        "value": "\"radarr\""
      },
      {
        "name": "misc/radarr.nix",
        "desc": "The radarr package to use.",
        "nixName": "relatedOption.radarr.package",
        "type": "package",
        "value": "pkgs.radarr"
      },
      {
        "name": "misc/radarr.nix",
        "desc": "Open ports in the firewall for the Radarr web interface.",
        "nixName": "relatedOption.radarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "misc/radarr.nix",
        "desc": "Group under which Radarr runs.",
        "nixName": "relatedOption.radarr.group",
        "type": "string",
        "value": "\"radarr\""
      },
      {
        "name": "misc/radarr.nix",
        "desc": "Whether to enable Radarr, a UsetNet/BitTorrent movie downloader.",
        "nixName": "relatedOption.radarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "misc/radarr.nix",
        "desc": "The directory where Radarr stores its data files.",
        "nixName": "relatedOption.radarr.dataDir",
        "type": "string",
        "value": "\"/var/lib/radarr/.config/Radarr\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "User name under which the exportarr-readarr exporter shall berun.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.user",
        "type": "string",
        "value": "\"exportarr-readarr-exporter\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.url",
        "type": "string",
        "value": "\"http://127.0.0.1\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Port to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The exportarr package to use.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Address to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.listenAddress",
        "type": "string",
        "value": "\"0.0.0.0\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Group under which the exportarr-readarr exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.group",
        "type": "string",
        "value": "\"exportarr-readarr-exporter\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-readarr.openFirewallis true.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-readarr.openFirewallis true. It is used asip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Extra commandline options to pass to the exportarr-readarrexporter.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "See theconfiguration guide for available options.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Whether to enable the prometheus exportarr-readarr exporter.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "File containing the api-key.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-readarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "User name under which the exportarr-radarr exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.user",
        "type": "string",
        "value": "\"exportarr-radarr-exporter\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.url",
        "type": "string",
        "value": "\"http://127.0.0.1\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Port to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The exportarr package to use.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Address to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.listenAddress",
        "type": "string",
        "value": "\"0.0.0.0\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Group under which the exportarr-radarr exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.group",
        "type": "string",
        "value": "\"exportarr-radarr-exporter\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-radarr.openFirewallis true.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-radarr.openFirewallis true. It is used asip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Extra commandline options to pass to the exportarr-radarrexporter.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "See theconfiguration guide for available options.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Whether to enable the prometheus exportarr-radarr exporter.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "File containing the api-key.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-radarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "User name under which the exportarr-lidarr exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.user",
        "type": "string",
        "value": "\"exportarr-lidarr-exporter\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.url",
        "type": "string",
        "value": "\"http://127.0.0.1\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Port to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "The exportarr package to use.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Address to listen on.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.listenAddress",
        "type": "string",
        "value": "\"0.0.0.0\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Group under which the exportarr-lidarr exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.exportarr-lidarr.group",
        "type": "string",
        "value": "\"exportarr-lidarr-exporter\""
      }
    ]
  },
  {
    "name": "Deluge ",
    "desc": "Deploy Deluge with a one-click setup to manage and download torrents efficiently. Deluge is a lightweight, open-source BitTorrent client that provides a flexible and powerful interface for handling torrent downloads while ensuring a smooth user experience.",
    "longDesc": "**What is Deluge?**\n\nDeluge is a cross-platform BitTorrent client that utilizes a client-server model. It allows users to download and share files using the BitTorrent protocol while supporting various interfaces such as GTK, web UI, and console.\n\n**Key Features:**\n\n- **One-Click Deployment:** Quickly set up Deluge using Docker, enabling easy management of torrent downloads.\n- **Scalability:** Supports multiple download and upload tasks simultaneously, making it suitable for both individual users and larger groups.\n- **Privacy:** Offers encryption for secure downloading, ensuring that user activity remains private.\n- **Plugin System:** Extensible through a variety of plugins to add additional functionalities, including scheduling and notifications.\n- **Web User Interface:** Manage torrents remotely through a web interface, allowing users to control downloads from any device with internet access.",
    "useCases": "- **Individual Users:** Efficiently download and manage torrents for personal use, including media and software.\n- **Businesses:** Use Deluge to distribute large files internally or manage data sharing across teams.\n- **Educators:** Facilitate the sharing of educational materials or large datasets among students and faculty.",
    "support": "- **Community Forums:** Engage with the user community and seek help through the [Deluge Forums](https://forum.deluge-torrent.org).\n- **Documentation:** Comprehensive installation and usage guides are available on the [Deluge User Guide](https://deluge-torrent.org/userguide/).\n- **Troubleshooting Help:** Access troubleshooting and support resources via the [Deluge Documentation](https://deluge-torrent.org/development/documentation/).\n\n This template provides a clear and concise overview of Deluge, emphasizing its capabilities for managing torrents effectively while offering ample support resources for users. For more information, visit the [Deluge official website](https://deluge-torrent.org).",
    "tags": [
      "File Transfer - Peer-to-peer Filesharing"
    ],
    "website": "https://deluge-torrent.org",
    "implemented": false,
    "logo": "https://deluge-torrent.org/images/deluge-icon.png",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "deluged",
    "options": [
      {
        "name": "torrent/deluge.nix",
        "desc": "Number of files to allow deluged to open.",
        "nixName": "relatedOption.deluge.openFilesLimit",
        "type": "signed integer or string",
        "value": "4096"
      }
    ]
  },
  {
    "name": "Dovecot",
    "desc": "Deploy Dovecot with a straightforward setup to create a robust IMAP and POP3 email server. Dovecot is designed for efficient email handling, ensuring high performance and security for both personal and enterprise use.",
    "longDesc": "**What is Dovecot?**\n\nDovecot is an open-source email server that focuses on providing IMAP and POP3 functionality. It is known for its simplicity in setup and configuration, as well as its ability to handle large volumes of email efficiently.\n\n**Key Features:**\n\n- **One-Click Deployment:** Easily deploy Dovecot via Docker, facilitating quick installation and configuration.\n- **Scalability:** Efficiently handles large email systems, making it suitable for both small setups and large enterprises.\n- **Privacy and Security:** Built with security in mind, Dovecot uses strong encryption methods to protect user data.\n- **Plugin System:** Extensible through various plugins, allowing customization and additional functionality to suit different needs.\n- **Support for Multiple Protocols:** Compatible with IMAP, POP3, and LMTP, offering flexibility in how users access their email.",
    "useCases": "- **Individual Users:** Set up a personal email server to manage and access email securely from various devices.\n- **Businesses:** Implement a scalable email solution that supports a large number of users and provides robust security features.\n- **Educational Institutions:** Facilitate email communication within faculty and students while maintaining data privacy.",
    "support": "- **Community Forums:** Connect with the Dovecot community for assistance through the [Dovecot Forum](https://dovecot.org).\n- **Documentation:** Comprehensive user guides and installation instructions are available at the [Dovecot Documentation](https://dovecot.org).\n- **Troubleshooting Help:** Access troubleshooting guides and FAQs to resolve common issues encountered during setup and operation.",
    "tags": [
      "Communication - Email - Mail Delivery Agents"
    ],
    "website": "https://dovecot.org/",
    "implemented": false,
    "logo": "https://www.dovecot.org/wp-content/uploads/2021/09/favicon.ico",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "dovecot",
    "options": [
      {
        "name": "mail/dovecot.nix",
        "desc": "Location that dovecot will use for mail folders. Dovecotmail_location option.",
        "nixName": "relatedOption.dovecot2.mailLocation",
        "type": "string",
        "value": "\"maildir:/var/spool/mail/%u\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Symlinks the contents of lib/dovecot of every given package into/etc/dovecot/modules. This will make the given modules available if adovecot package with the module_dir patch applied is being used.",
        "nixName": "relatedOption.dovecot2.modules",
        "type": "list of package",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Dovecot user name.",
        "nixName": "relatedOption.dovecot2.user",
        "type": "string",
        "value": "\"dovecot2\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Dovecot group name.",
        "nixName": "relatedOption.dovecot2.group",
        "type": "string",
        "value": "\"dovecot2\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Path under which the stats socket is placed. The user/group underwhich the exporter runs, should be able to access the socket in order toscrape the metrics successfully.Please keep in mind that the stats module has changed in Dovecot 2.3+ which isnot compatiblewith this exporter.The following extra config has to be passed to Dovecot to ensure thatrecent versions work with this exporter:{  services.prometheus.exporters.dovecot.enable = true;  services.prometheus.exporters.dovecot.socketPath = \"/var/run/dovecot2/old-stats\";  services.dovecot2.mailPlugins.globally.enable = [ \"old_stats\" ];  services.dovecot2.extraConfig = ''    service old-stats {      unix_listener old-stats {        user = dovecot-exporter        group = dovecot-exporter        mode = 0660      }      fifo_listener old-stats-mail {        mode = 0660        user = dovecot        group = dovecot      }      fifo_listener old-stats-user {        mode = 0660        user = dovecot        group = dovecot      }    }    plugin {      old_stats_refresh = 30 secs      old_stats_track_cmds = yes    }  '';}",
        "nixName": "relatedOption.prometheus.exporters.dovecot.socketPath",
        "type": "path",
        "value": "\"/var/run/dovecot/stats\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Whether to enable the prometheus dovecot exporter.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable the dovecot quota service.",
        "nixName": "relatedOption.dovecot2.enableQuota",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Extra commandline options to pass to the dovecot exporter.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Additional listeners to start when Dovecot is enabled.",
        "nixName": "relatedOption.dovecot2.protocols",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Config file used for the whole dovecot configuration.",
        "nixName": "relatedOption.dovecot2.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Group under which the dovecot exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.group",
        "type": "string",
        "value": "\"dovecot-exporter\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Additional entries to put verbatim into Dovecot’s config file.",
        "nixName": "relatedOption.dovecot2.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "User name under which the dovecot exporter shall be run.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.user",
        "type": "string",
        "value": "\"dovecot-exporter\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable starting the POP3 listener (when Dovecot isenabled).",
        "nixName": "relatedOption.dovecot2.enablePop3",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable starting the LMTP listener (when Dovecot isenabled).",
        "nixName": "relatedOption.dovecot2.enableLmtp",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable starting the IMAP listener (when Dovecot isenabled).",
        "nixName": "relatedOption.dovecot2.enableImap",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable the dovecot 2.x POP3/IMAP server.",
        "nixName": "relatedOption.dovecot2.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable creating a own Dovecot PAM service and configurePAM user logins.",
        "nixName": "relatedOption.dovecot2.enablePAM",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "The Port the dovecot quota service binds to. If using postfix, addcheck_policy_service inet:localhost:12340 to yoursmtpd_recipient_restrictions in your postfix config.",
        "nixName": "relatedOption.dovecot2.quotaPort",
        "type": "string",
        "value": "\"12340\""
      },
      {
        "name": "monitoring/parsedmarc.nix",
        "desc": "Whether Postfix and Dovecot should be set up to receive mail locally.parsedmarc will be configured to watch the local inbox as theautomatically created user specified in services.parsedmarc.provision.localMail.recipientName",
        "nixName": "relatedOption.parsedmarc.provision.localMail.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Plugin settings for dovecot in general, e.g. sieve,sieve_default, etc.Some of the other knobs of this module will influence by default theplugin settings, but you can still override any plugin settings.If you override a plugin setting, its value is cleared and you haveto copy over the defaults.",
        "nixName": "relatedOption.dovecot2.pluginSettings",
        "type": "attribute set of (string or package)",
        "value": "{ }"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Path under which to expose metrics.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.telemetryPath",
        "type": "string",
        "value": "\"/metrics\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Stats scopes to query.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.scopes",
        "type": "list of string",
        "value": "[\n  \"user\"\n]"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Port to listen on.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9166"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Address to listen on.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.listenAddress",
        "type": "string",
        "value": "\"0.0.0.0\""
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.dovecot.openFirewallis true.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.dovecot.openFirewallis true. It is used asip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "relatedOption.prometheus.exporters.dovecot.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Path to the server’s private key.",
        "nixName": "relatedOption.dovecot2.sslServerKey",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Path to the server’s public key.",
        "nixName": "relatedOption.dovecot2.sslServerCert",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Path to the server’s CA certificate key.",
        "nixName": "relatedOption.dovecot2.sslCACert",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Sieve scripts to be executed. Key is a sequence, e.g. ‘before2’,‘after’ etc.",
        "nixName": "relatedOption.dovecot2.sieve.scripts",
        "type": "attribute set of path",
        "value": "{ }"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Sieve plugins to load",
        "nixName": "relatedOption.dovecot2.sieve.plugins",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Programs available for use by the vnd.dovecot.pipe extension",
        "nixName": "relatedOption.dovecot2.sieve.pipeBins",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Sieve extensions for use in global scripts",
        "nixName": "relatedOption.dovecot2.sieve.globalExtensions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Sieve extensions for use in user scripts",
        "nixName": "relatedOption.dovecot2.sieve.extensions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to enable showing the PAM failure message on authenticationerror (useful for OTPW).",
        "nixName": "relatedOption.dovecot2.showPAMFailure",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Quota limit for the user in bytes. Supports suffixes b, k, M, G, Tand %.",
        "nixName": "relatedOption.dovecot2.quotaGlobalPerUser",
        "type": "string",
        "value": "\"100G\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Null if no special use flag is set. Other than that every use flagmentioned in the RFC is valid.",
        "nixName": "relatedOption.dovecot2.mailboxes.<name>.specialUse",
        "type": "null or one of \"All\", \"Archive\", \"Drafts\", \"Flagged\", \"Junk\", \"Sent\", \"Trash\"",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "The name of the mailbox.",
        "nixName": "relatedOption.dovecot2.mailboxes.<name>.name",
        "type": "string matching the pattern [^\"]+",
        "value": "\"‹name›\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "To automatically remove all email from the mailbox which is olderthan the specified time.",
        "nixName": "relatedOption.dovecot2.mailboxes.<name>.autoexpunge",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Whether to automatically create or create and subscribe to themailbox or not.",
        "nixName": "relatedOption.dovecot2.mailboxes.<name>.auto",
        "type": "one of \"no\", \"create\", \"subscribe\"",
        "value": "\"no\""
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Configure mailboxes and auto create or subscribe them.",
        "nixName": "relatedOption.dovecot2.mailboxes",
        "type": "(attribute set of (submodule)) or (list of unspecified value) convertible to it",
        "value": "{ }"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Default user to store mail for virtual users.",
        "nixName": "relatedOption.dovecot2.mailUser",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "mail plugins to enable as a list of strings to append to thecorresponding per-protocol $mail_plugins configurationvariable",
        "nixName": "relatedOption.dovecot2.mailPlugins.perProtocol.<name>.enable",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Additional entries to add to the mail_plugins variable, perprotocol",
        "nixName": "relatedOption.dovecot2.mailPlugins.perProtocol",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "mail plugins to enable as a list of strings to append to thetop-level $mail_plugins configuration variable",
        "nixName": "relatedOption.dovecot2.mailPlugins.globally.enable",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Additional entries to add to the mail_plugins variable for allprotocols",
        "nixName": "relatedOption.dovecot2.mailPlugins.globally",
        "type": "submodule",
        "value": "{\n  enable = [ ];\n}"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Additional entries to add to the mail_plugins variable, globally andper protocol",
        "nixName": "relatedOption.dovecot2.mailPlugins",
        "type": "submodule",
        "value": "{\n  globally = {\n    enable = [ ];\n  };\n  perProtocol = { };\n}"
      },
      {
        "name": "mail/dovecot.nix",
        "desc": "Default group to store mail for virtual users.",
        "nixName": "relatedOption.dovecot2.mailGroup",
        "type": "null or string",
        "value": "null"
      }
    ]
  },
  {
    "name": "Forgejo",
    "desc": "Deploy Forgejo with a simple setup to create a powerful, self-hosted Git service. Forgejo is designed for managing Git repositories efficiently while providing robust features for collaboration and project management.",
    "longDesc": "**What is Forgejo?**\n\nForgejo is an open-source Git service that allows users to host and manage their repositories, similar to platforms like GitHub or GitLab. It focuses on simplicity, usability, and extensibility, making it an excellent choice for individual developers and organizations.\n\n**Key Features:**\n\n- **One-Click Deployment:** Quick installation via Docker, allowing for immediate access to Git hosting capabilities.\n- **Scalability:** Handles large numbers of repositories and users efficiently, suitable for both small projects and large teams.\n- **Privacy:** Users retain full control over their data, with no reliance on third-party hosting services.\n- **API Compatibility:** Offers a RESTful API for integrating with other applications and services, facilitating automation and custom workflows.\n- **Collaborative Tools:** Supports issue tracking, pull requests, and code reviews, enhancing teamwork and project management.",
    "useCases": "- **Developers:** Host personal projects or open-source contributions securely and efficiently.\n- **Teams and Organizations:** Manage collaborative software development projects with tools for tracking progress and reviewing code.\n- **Educational Institutions:** Provide students with a platform for learning and practicing version control in a collaborative environment.",
    "support": "- **Community Forums:** Engage with the Forgejo community for assistance and discussions through the [Forgejo Community](https://forgejo.org).\n- **Documentation:** Comprehensive user guides and configuration tips are available at the [Forgejo Documentation](https://forgejo.org/docs/latest/user/) and [https://forgejo.org/docs/latest/admin/).\n- **Troubleshooting Help:** Access resources for troubleshooting common issues during setup and operation.\n\n This template provides an overview of Forgejo, highlighting its functionalities and practical applications. For more detailed information, visit the [official Forgejo website](https://forgejo.org).",
    "nixName": "forgejo",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Project Management"
    ],
    "website": "https://forgejo.org",
    "implemented": false,
    "logo": "https://forgejo.org/favicon.ico",
    "options": [
      {
        "name": "customDir",
        "desc": "Base directory for custom templates and other options. If services.forgejo.useWizard is disabled (default), this directory will also hold secrets and the resulting app.ini config at runtime.",
        "nixName": "customDir",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/custom"
      },
      {
        "name": "database.createDatabase",
        "desc": "Whether to create a local database automatically.",
        "nixName": "database.createDatabase",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "database.host",
        "desc": "Database host address.",
        "nixName": "database.host",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "database.name",
        "desc": "Database name.",
        "nixName": "database.name",
        "type": "string",
        "value": "forgejo"
      },
      {
        "name": "database.passwordFile",
        "desc": "A file containing the password corresponding to services.forgejo.database.user.",
        "nixName": "database.passwordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "database.path",
        "desc": "Path to the sqlite3 database file.",
        "nixName": "database.path",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/data/forgejo.db"
      },
      {
        "name": "database.port",
        "desc": "Database host port.",
        "nixName": "database.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "if config.services.forgejo.database.type != \"postgresql\"\nthen 3306\nelse 5432\n"
      },
      {
        "name": "database.socket",
        "desc": "Path to the unix socket file to use for authentication.",
        "nixName": "database.socket",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "database.type",
        "desc": "Database engine to use.",
        "nixName": "database.type",
        "type": "one of \"sqlite3\", \"mysql\", \"postgres\"",
        "value": "\"sqlite3\""
      },
      {
        "name": "database.user",
        "desc": "Database user.",
        "nixName": "database.user",
        "type": "string",
        "value": "forgejo"
      },
      {
        "name": "dump.backupDir",
        "desc": "Path to the directory where the dump archives will be stored.",
        "nixName": "dump.backupDir",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/dump"
      },
      {
        "name": "dump.enable",
        "desc": "Whether to enable periodic dumps via the built-in dump command.",
        "nixName": "dump.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "dump.file",
        "desc": "Filename to be used for the dump. If null a default name is chosen by forgejo.",
        "nixName": "dump.file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "dump.interval",
        "desc": "Run a Forgejo dump at this interval. Runs by default at 04:31 every day. The format is described in systemd.time(7).",
        "nixName": "dump.interval",
        "type": "string",
        "value": "04:31"
      },
      {
        "name": "dump.type",
        "desc": "Archive format used to store the dump file.",
        "nixName": "dump.type",
        "type": "one of \"zip\", \"tar\", \"tar.sz\", \"tar.gz\", \"tar.xz\", \"tar.bz2\", \"tar.br\", \"tar.lz4\", \"tar.zst\"",
        "value": "\"zip\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable Forgejo, a software forge.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group under which Forgejo runs.",
        "nixName": "group",
        "type": "string",
        "value": "forgejo"
      },
      {
        "name": "lfs.contentDir",
        "desc": "Where to store LFS files.",
        "nixName": "lfs.contentDir",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/data/lfs"
      },
      {
        "name": "lfs.enable",
        "desc": "Enables git-lfs support.",
        "nixName": "lfs.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The forgejo package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.forgejo"
      },
      {
        "name": "repositoryRoot",
        "desc": "Path to the git repositories.",
        "nixName": "repositoryRoot",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/repositories"
      },
      {
        "name": "secrets",
        "desc": "This is a small wrapper over systemd’s LoadCredential. It takes the same sections and keys as services.forgejo.settings, but the value of each key is a path instead of a string or bool. The path is then loaded as credential, exported as environment variable and then feed through https://codeberg.org/forgejo/forgejo/src/branch/forgejo/contrib/environment-to-ini/environment-to-ini.go. It does the required environment variable escaping for you.  Keys specified here take priority over the ones in services.forgejo.settings!",
        "nixName": "secrets",
        "type": "attribute set of attribute set of path",
        "value": "{ }"
      },
      {
        "name": "settings",
        "desc": "Free-form settings written directly to the app.ini configfile file. Refer to https://forgejo.org/docs/latest/admin/config-cheat-sheet/ for supported values.",
        "nixName": "settings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
        "value": "{ }"
      },
      {
        "name": "settings.log.LEVEL",
        "desc": "General log level.",
        "nixName": "settings.log.LEVEL",
        "type": "one of \"Trace\", \"Debug\", \"Info\", \"Warn\", \"Error\", \"Critical\"",
        "value": "\"Info\""
      },
      {
        "name": "settings.log.ROOT_PATH",
        "desc": "Root path for log files.",
        "nixName": "settings.log.ROOT_PATH",
        "type": "string",
        "value": "${config.services.forgejo.stateDir}/log"
      },
      {
        "name": "settings.server.DISABLE_SSH",
        "desc": "Disable external SSH feature.",
        "nixName": "settings.server.DISABLE_SSH",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.server.DOMAIN",
        "desc": "Domain name of your server.",
        "nixName": "settings.server.DOMAIN",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "settings.server.HTTP_ADDR",
        "desc": "Listen address. Must be a path when using a unix socket.",
        "nixName": "settings.server.HTTP_ADDR",
        "type": "string or path",
        "value": "if lib.hasSuffix \"+unix\" cfg.settings.server.PROTOCOL then \"/run/forgejo/forgejo.sock\" else \"0.0.0.0\""
      },
      {
        "name": "settings.server.HTTP_PORT",
        "desc": "Listen port. Ignored when using a unix socket.",
        "nixName": "settings.server.HTTP_PORT",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3000"
      },
      {
        "name": "settings.server.PROTOCOL",
        "desc": "Listen protocol. +unix means “over unix”, not “in addition to.”",
        "nixName": "settings.server.PROTOCOL",
        "type": "one of \"http\", \"https\", \"fcgi\", \"http+unix\", \"fcgi+unix\"",
        "value": "\"http\""
      },
      {
        "name": "settings.server.ROOT_URL",
        "desc": "Full public URL of Forgejo server.",
        "nixName": "settings.server.ROOT_URL",
        "type": "string",
        "value": "http://${config.services.forgejo.settings.server.DOMAIN}:${toString config.services.forgejo.settings.server.HTTP_PORT}/"
      },
      {
        "name": "settings.server.SSH_PORT",
        "desc": "SSH port displayed in clone URL. The option is required to configure a service when the external visible port differs from the local listening port i.e. if port forwarding is used.",
        "nixName": "settings.server.SSH_PORT",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "22"
      },
      {
        "name": "settings.server.STATIC_ROOT_PATH",
        "desc": "Upper level of template and static files path.",
        "nixName": "settings.server.STATIC_ROOT_PATH",
        "type": "string or path",
        "value": "config.services.forgejo.package.data"
      },
      {
        "name": "settings.session.COOKIE_SECURE",
        "desc": "Marks session cookies as “secure” as a hint for browsers to only send them via HTTPS. This option is recommend, if Forgejo is being served over HTTPS.",
        "nixName": "settings.session.COOKIE_SECURE",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "stateDir",
        "desc": "Forgejo data directory.",
        "nixName": "stateDir",
        "type": "string",
        "value": "/var/lib/forgejo"
      },
      {
        "name": "useWizard",
        "desc": "Whether to use the built-in installation wizard instead of declaratively managing the app.ini config file in nix.",
        "nixName": "useWizard",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "user",
        "desc": "User account under which Forgejo runs.",
        "nixName": "user",
        "type": "string",
        "value": "forgejo"
      }
    ]
  },
  {
    "name": "Gerbera",
    "desc": "Deploy Gerbera with a straightforward setup to create a powerful UPnP media server. Gerbera allows users to stream and manage their digital media across a variety of devices on a home network.",
    "longDesc": "**What is Gerbera?**\n\nGerbera is an open-source media server that implements the UPnP (Universal Plug and Play) AV (Audio/Video) protocol. It enables users to share and stream media content across different devices such as smart TVs, game consoles, and mobile devices.\n\n**Key Features:**\n\n- **One-Click Deployment:** Quick installation via Docker, facilitating easy access to media server functionalities.\n- **Scalability:** Efficiently manages a large library of media files, suitable for personal collections or community sharing.\n- **Privacy:** Keeps media content local, allowing users to maintain full control over their data without relying on cloud services.\n- **Plugin Support:** Extend functionality with various plugins to enhance streaming and management capabilities.\n- **Web Interface:** Provides an intuitive web-based interface for managing media libraries and settings.",
    "useCases": "- **Home Users:** Stream personal media collections to various devices within the home.\n- **Educational Institutions:** Share educational videos and resources within classrooms or departments.\n- **Media Enthusiasts:** Organize and manage extensive media libraries with easy access to playback options.",
    "support": "- **Community Forums:** Connect with other users for assistance and discussions through the [Gerbera Forum](https://github.com/gerbera/gerbera).\n- **Documentation:** Comprehensive user guides and configuration tips are available at the [Gerbera Documentation](https://docs.gerbera.io/en/stable/).\n- **Troubleshooting Help:** Access resources for troubleshooting common issues during setup and operation.\n\n This template provides an overview of Gerbera’s functionalities, emphasizing its capabilities for effective media management and streaming. For more information, visit the [official Gerbera website](https://gerbera.io/).",
    "tags": [
      "Media Streaming - Multimedia Streaming"
    ],
    "website": "https://docs.gerbera.io/",
    "implemented": false,
    "logo": "",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "gerbera",
    "options": [
      {
        "name": "misc/mediatomb.nix",
        "desc": "The gerbera package to use.",
        "nixName": "relatedOption.mediatomb.package",
        "type": "package",
        "value": "pkgs.gerbera"
      },
      {
        "name": "misc/mediatomb.nix",
        "desc": "Whether to enable the Gerbera/Mediatomb DLNA server.",
        "nixName": "relatedOption.mediatomb.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "misc/mediatomb.nix",
        "desc": "The directory where Gerbera/Mediatomb stores its state, data,etc.",
        "nixName": "relatedOption.mediatomb.dataDir",
        "type": "path",
        "value": "\"/var/lib/${config.services.mediatomb.package.pname}\""
      },
      {
        "name": "misc/mediatomb.nix",
        "desc": "Allow the service to create and use its own config file inside thedataDir as configured by services.mediatomb.dataDir. Deactivated by default,the service then runs with the configuration generated from this module.Otherwise, when enabled, no service configuration is generated.Gerbera/Mediatomb then starts using config.xml within the configureddataDir. It’s up to the user to make a correctconfiguration file.",
        "nixName": "relatedOption.mediatomb.customCfg",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Go-Ethereum",
    "desc": "Deploy Go Ethereum (Geth) with a streamlined setup to create a fully functional Ethereum node. Geth serves as the official Go implementation of the Ethereum protocol, enabling users to interact with the Ethereum blockchain.",
    "longDesc": "Go Ethereum (often referred to as Geth) is an open-source client for the Ethereum blockchain written in Go. It allows users to run an Ethereum node, mine ether, create smart contracts, and interact with decentralized applications (dApps) on the Ethereum network.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Geth using Docker, simplifying the setup process for new users.\n- **Scalability:** Supports both light and full nodes, accommodating various use cases from personal projects to enterprise solutions.\n- **Privacy:** Users maintain full control over their private keys and transactions by running their own node.\n- **API Compatibility:** Provides a JSON-RPC API for seamless integration with other applications, allowing developers to build on top of the Ethereum platform.\n- **Mining Capabilities:** Geth can be configured to mine ether, contributing to the network's security and transaction validation.",
    "useCases": "- **Developers:** Use Geth to test and deploy smart contracts, and interact with dApps.\n- **Enterprises:** Establish private Ethereum networks for internal applications or use Geth to connect to the public Ethereum network for external services.\n- **Researchers and Educators:** Run Ethereum nodes for blockchain research, testing new protocols, or teaching blockchain technology.",
    "support": "- **Community Forums:** Engage with the Ethereum community through the [Ethereum Stack Exchange](https://ethereum.stackexchange.com/) and the [Geth GitHub Discussions](https://github.com/ethereum/go-ethereum/discussions) for help and insights.\n- **Documentation:** Access comprehensive user guides and API references at the [Geth Documentation](https://geth.ethereum.org/docs/) and [Go Ethereum GitHub](https://github.com/ethereum/go-ethereum).\n- **Troubleshooting Help:** Review the official [Geth Releases](https://github.com/ethereum/go-ethereum/releases) for updates and troubleshooting tips related to specific versions.\n\nThis template provides a clear overview of Go Ethereum’s features and practical applications, highlighting its importance in the Ethereum ecosystem. For more detailed information, visit the [official Geth website](https://geth.ethereum.org/).",
    "nixName": "geth",
    "specs": {
      "ram": 16384,
      "storage": 4194304
    },
    "tags": [
      "RPC",
      "Blockchain",
      "Ethereum",
      "Validator"
    ],
    "website": "https://geth.ethereum.org/",
    "implemented": true,
    "logo": "https://geth.ethereum.org/favicon.ico",
    "options": [
      {
        "name": "ethnode.enable",
        "desc": "Whether to enable Go Ethereum Node.",
        "nixName": "ethnode.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "ethnode.port",
        "desc": "Port number Go Ethereum will be listening on, both TCP and UDP.",
        "nixName": "ethnode.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "30303"
      },
      {
        "name": "ethnode.http",
        "desc": "HTTP settings",
        "nixName": "ethnode.http",
        "type": "attribute set",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Whether to enable Go Ethereum HTTP API.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "address",
            "desc": "Listen address of Go Ethereum HTTP API.",
            "nixName": "address",
            "type": "string",
            "value": "127.0.0.1"
          },
          {
            "name": "port",
            "desc": "Port number of Go Ethereum HTTP API.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8545"
          },
          {
            "name": "apis",
            "desc": "APIs to enable over WebSocket",
            "nixName": "apis",
            "type": "list of string",
            "value": "[\"net\"  \"eth\"]"
          }
        ]
      },
      {
        "name": "ethnode.websocket",
        "desc": "Websocket settings",
        "nixName": "ethnode.websocket",
        "type": "attribute set",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Whether to enable Go Ethereum WebSocket API.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "address",
            "desc": "Listen address of Go Ethereum WebSocket API.",
            "nixName": "address",
            "type": "string",
            "value": "127.0.0.1"
          },
          {
            "name": "port",
            "desc": "Port number of Go Ethereum WebSocket API.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8546"
          },
          {
            "name": "apis",
            "desc": "APIs to enable over WebSocket",
            "nixName": "apis",
            "type": "list of string",
            "value": "[\"net\"  \"eth\"]"
          }
        ]
      },
      {
        "name": "ethnode.authrpc",
        "desc": "RPC settings",
        "nixName": "ethnode.authrpc",
        "type": "attribute set",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Whether to enable Go Ethereum Auth RPC API.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "address",
            "desc": "Listen address of Go Ethereum Auth RPC API.",
            "nixName": "address",
            "type": "string",
            "value": "127.0.0.1"
          },
          {
            "name": "port",
            "desc": "Port number of Go Ethereum Auth RPC API.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8551"
          },
          {
            "name": "vhosts",
            "desc": "List of virtual hostnames from which to accept requests.",
            "nixName": "vhosts",
            "type": "null or (list of string)",
            "value": "[ \"localhost\" ]"
          },
          {
            "name": "jwtsecret",
            "desc": "Path to a JWT secret for authenticated RPC endpoint.",
            "nixName": "jwtsecret",
            "type": "string",
            "value": ""
          }
        ]
      },
      {
        "name": "ethnode.metrics",
        "desc": "Metrics settings",
        "nixName": "ethnode.metrics",
        "type": "attribute set",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Whether to enable Go Ethereum prometheus metrics.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "address",
            "desc": "Listen address of Go Ethereum metrics service.",
            "nixName": "address",
            "type": "string",
            "value": "127.0.0.1"
          },
          {
            "name": "port",
            "desc": "Port number of Go Ethereum metrics service.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "6060"
          }
        ]
      },
      {
        "name": "ethnode.syncmode",
        "desc": "Blockchain sync mode.",
        "nixName": "ethnode.syncmode",
        "type": "one of \"snap\", \"fast\", \"full\", \"light\"",
        "value": "\"snap\""
      },
      {
        "name": "ethnode.gcmode",
        "desc": "Blockchain garbage collection mode.",
        "nixName": "ethnode.gcmode",
        "type": "one of \"full\", \"archive\"",
        "value": "\"full\""
      },
      {
        "name": "ethnode.maxpeers",
        "desc": "Maximum peers to connect to.",
        "nixName": "ethnode.maxpeers",
        "type": "signed integer",
        "value": "50"
      },
      {
        "name": "ethnode.extraArgs",
        "desc": "Additional arguments passed to Go Ethereum.",
        "nixName": "ethnode.extraArgs",
        "type": "list of string",
        "value": "[ ]"
      }
    ]
  },
  {
    "name": "GitLab CI",
    "desc": "Deploy GitLab with a straightforward setup to create a comprehensive DevOps platform. GitLab supports source code management, CI/CD pipelines, and collaboration tools for software development teams.",
    "longDesc": "GitLab is an open-source web-based DevOps lifecycle tool that provides a Git repository manager with built-in CI/CD capabilities. It enables teams to manage their source code repositories, automate workflows, and collaborate effectively.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy GitLab using Docker or Helm charts for quick setup in various environments.\n- **Scalability:** Supports individual projects as well as large enterprises, accommodating thousands of users and repositories.\n- **Privacy and Security:** Self-hosted options allow teams to maintain full control over their data and access permissions.\n- **API Compatibility:** Offers a RESTful API for integrating with other tools and automating workflows.\n- **Built-in CI/CD:** Automate testing and deployment processes with integrated continuous integration and delivery tools, enabling rapid development cycles.",
    "useCases": "- **Developers:** Manage code repositories, collaborate on projects, and automate testing and deployment.\n- **Enterprises:** Use GitLab for end-to-end DevOps practices, integrating security and compliance checks throughout the development lifecycle.\n- **Educators:** Facilitate group projects and coding exercises in academic settings, providing students with hands-on experience in version control and collaboration.",
    "support": "- **Community Forums:** Engage with other GitLab users for support and discussions on the [GitLab Community Forum](https://forum.gitlab.com).\n- **Documentation:** Access comprehensive guides and tutorials in the [GitLab Documentation](https://docs.gitlab.com) to help with setup, configuration, and usage.\n- **Troubleshooting Help:** Find solutions to common issues and access the issue tracker on [GitLab's GitHub page](https://gitlab.com/gitlab-org/gitlab) for reporting bugs or seeking assistance.\n\nThis template highlights GitLab’s key functionalities and practical applications, emphasizing its importance in the software development lifecycle. For more information, visit the [official GitLab website](https://gitlab.com/gitlab-org/gitlab).",
    "nixName": "gitlab",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Continuous Integration & Continuous Deployment"
    ],
    "website": "http://www.gitlab.com/",
    "logo": "https://gitlab.com/assets/favicon-72a2cad5025aa931d6ea56c3201d1f18e68a8cd39788c7c80d5b2b82aa5143ef.png",
    "options": [
      {
        "name": "backup.keepTime",
        "desc": "How long to keep the backups around, in hours. 0 means “keep forever”.",
        "nixName": "backup.keepTime",
        "type": "signed integer",
        "value": "0"
      },
      {
        "name": "backup.path",
        "desc": "GitLab path for backups.",
        "nixName": "backup.path",
        "type": "string",
        "value": "config.services.gitlab.statePath + /backup"
      },
      {
        "name": "backup.skip",
        "desc": "Directories to exclude from the backup. The example excludes CI artifacts and LFS objects from the backups. The tar option skips the creation of a tar file. Refer to https://docs.gitlab.com/ee/raketasks/backup_restore.html#excluding-specific-directories-from-the-backup for more information.",
        "nixName": "backup.skip",
        "type": "one of \"db\", \"uploads\", \"builds\", \"artifacts\", \"lfs\", \"registry\", \"pages\", \"repositories\", \"tar\" or list of (one of \"db\", \"uploads\", \"builds\", \"artifacts\", \"lfs\", \"registry\", \"pages\", \"repositories\", \"tar\")",
        "value": "[ ]"
      },
      {
        "name": "backup.startAt",
        "desc": "The time(s) to run automatic backup of GitLab state. Specified in systemd’s time format; see systemd.time(7).",
        "nixName": "backup.startAt",
        "type": "string or list of string",
        "value": "[ ]"
      },
      {
        "name": "backup.uploadOptions",
        "desc": "GitLab automatic upload specification. Tells GitLab to upload the backup to a remote location when done. Attributes specified here are added under production -> backup -> upload in config/gitlab.yml.",
        "nixName": "backup.uploadOptions",
        "type": "attribute set",
        "value": "{ }"
      },
      {
        "name": "databaseCreateLocally",
        "desc": "Whether a database should be automatically created on the local host. Set this to false if you plan on provisioning a local database yourself. This has no effect if services.gitlab.databaseHost is customized.",
        "nixName": "databaseCreateLocally",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "databaseHost",
        "desc": "GitLab database hostname. An empty string means “use local unix socket connection”.",
        "nixName": "databaseHost",
        "type": "string",
        "value": ""
      },
      {
        "name": "databaseName",
        "desc": "GitLab database name.",
        "nixName": "databaseName",
        "type": "string",
        "value": "gitlab"
      },
      {
        "name": "databasePasswordFile",
        "desc": "File containing the GitLab database user password. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "databasePasswordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "databasePool",
        "desc": "Database connection pool size.",
        "nixName": "databasePool",
        "type": "signed integer",
        "value": "5"
      },
      {
        "name": "databaseUsername",
        "desc": "GitLab database user.",
        "nixName": "databaseUsername",
        "type": "string",
        "value": "gitlab"
      },
      {
        "name": "enable",
        "desc": "Enable the gitlab service.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraConfig",
        "desc": "Extra options to be added under production in config/gitlab.yml, as a nix attribute set. Options containing secret data should be set to an attribute set containing the attribute _secret - a string pointing to a file containing the value the option should be set to. See the example to get a better picture of this: in the resulting config/gitlab.yml file, the production.omniauth.providers[0].args.client_options.secret key will be set to the contents of the /var/keys/gitlab_oidc_secret file.",
        "nixName": "extraConfig",
        "type": "YAML value",
        "value": "{ }"
      },
      {
        "name": "extraDatabaseConfig",
        "desc": "Extra configuration in config/database.yml.",
        "nixName": "extraDatabaseConfig",
        "type": "attribute set",
        "value": "{ }"
      },
      {
        "name": "extraEnv",
        "desc": "Additional environment variables for the GitLab environment.",
        "nixName": "extraEnv",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "extraGitlabRb",
        "desc": "Extra configuration to be placed in config/extra-gitlab.rb. This can be used to add configuration not otherwise exposed through this module’s options.",
        "nixName": "extraGitlabRb",
        "type": "string",
        "value": ""
      },
      {
        "name": "extraShellConfig",
        "desc": "Extra configuration to merge into shell-config.yml",
        "nixName": "extraShellConfig",
        "type": "attribute set",
        "value": "{ }"
      },
      {
        "name": "group",
        "desc": "Group to run gitlab and all related services.",
        "nixName": "group",
        "type": "string",
        "value": "gitlab"
      },
      {
        "name": "host",
        "desc": "GitLab host name. Used e.g. for copy-paste URLs.",
        "nixName": "host",
        "type": "string",
        "value": "config.networking.hostName"
      },
      {
        "name": "https",
        "desc": "Whether gitlab prints URLs with https as scheme.",
        "nixName": "https",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "initialRootEmail",
        "desc": "Initial email address of the root account if this is a new install.",
        "nixName": "initialRootEmail",
        "type": "string",
        "value": "admin@local.host"
      },
      {
        "name": "initialRootPasswordFile",
        "desc": "File containing the initial password of the root account if this is a new install. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "initialRootPasswordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "logrotate.enable",
        "desc": "Enable rotation of log files.",
        "nixName": "logrotate.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "logrotate.frequency",
        "desc": "How often to rotate the logs.",
        "nixName": "logrotate.frequency",
        "type": "string",
        "value": "daily"
      },
      {
        "name": "logrotate.keep",
        "desc": "How many rotations to keep.",
        "nixName": "logrotate.keep",
        "type": "signed integer",
        "value": "30"
      },
      {
        "name": "packages.gitaly",
        "desc": "The gitaly package to use.",
        "nixName": "packages.gitaly",
        "type": "package",
        "value": "pkgs.gitaly"
      },
      {
        "name": "packages.gitlab",
        "desc": "The gitlab package to use.",
        "nixName": "packages.gitlab",
        "type": "package",
        "value": "pkgs.gitlab"
      },
      {
        "name": "packages.gitlab-shell",
        "desc": "The gitlab-shell package to use.",
        "nixName": "packages.gitlab-shell",
        "type": "package",
        "value": "pkgs.gitlab-shell"
      },
      {
        "name": "packages.gitlab-workhorse",
        "desc": "The gitlab-workhorse package to use.",
        "nixName": "packages.gitlab-workhorse",
        "type": "package",
        "value": "pkgs.gitlab-workhorse"
      },
      {
        "name": "packages.pages",
        "desc": "The gitlab-pages package to use.",
        "nixName": "packages.pages",
        "type": "package",
        "value": "pkgs.gitlab-pages"
      },
      {
        "name": "pages.enable",
        "desc": "Whether to enable the GitLab Pages service.",
        "nixName": "pages.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "pages.settings",
        "desc": "Configuration options to set in the GitLab Pages config file. Options containing secret data should be set to an attribute set containing the attribute _secret - a string pointing to a file containing the value the option should be set to. See the example to get a better picture of this: in the resulting configuration file, the auth-client-secret and auth-secret keys will be set to the contents of the /var/keys/auth-client-secret and /var/keys/auth-secret files respectively.",
        "nixName": "pages.settings",
        "type": "attribute set of (null or string or signed integer or boolean or (attribute set))",
        "value": ""
      },
      {
        "name": "pages.settings.artifacts-server",
        "desc": "API URL to proxy artifact requests to.",
        "nixName": "pages.settings.artifacts-server",
        "type": "null or string",
        "value": "\"http(s)://<services.gitlab.host>/api/v4\""
      },
      {
        "name": "pages.settings.gitlab-server",
        "desc": "Public GitLab server URL.",
        "nixName": "pages.settings.gitlab-server",
        "type": "null or string",
        "value": "\"http(s)://<services.gitlab.host>\""
      },
      {
        "name": "pages.settings.internal-gitlab-server",
        "desc": "Internal GitLab server used for API requests, useful if you want to send that traffic over an internal load balancer. By default, the value of services.gitlab.pages.settings.gitlab-server is used.",
        "nixName": "pages.settings.internal-gitlab-server",
        "type": "null or string",
        "value": "\"http(s)://<services.gitlab.host>\""
      },
      {
        "name": "pages.settings.listen-http",
        "desc": "The address(es) to listen on for HTTP requests.",
        "nixName": "pages.settings.listen-http",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "pages.settings.listen-https",
        "desc": "The address(es) to listen on for HTTPS requests.",
        "nixName": "pages.settings.listen-https",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "pages.settings.listen-proxy",
        "desc": "The address(es) to listen on for proxy requests.",
        "nixName": "pages.settings.listen-proxy",
        "type": "list of string",
        "value": "[\n  \"127.0.0.1:8090\"\n]"
      },
      {
        "name": "pages.settings.pages-domain",
        "desc": "The domain to serve static pages on.",
        "nixName": "pages.settings.pages-domain",
        "type": "null or string",
        "value": ""
      },
      {
        "name": "pages.settings.pages-root",
        "desc": "The directory where pages are stored.",
        "nixName": "pages.settings.pages-root",
        "type": "string",
        "value": "config.services.gitlab.extraConfig.production.shared.path + /pages"
      },
      {
        "name": "port",
        "desc": "GitLab server port for copy-paste URLs, e.g. 80 or 443 if you’re service over https.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "puma.threadsMax",
        "desc": "The maximum number of threads Puma should use per worker. This limits how many threads Puma will automatically spawn in response to requests. In contrast to workers, threads will never be able to run Ruby code in parallel, but give higher IO parallelism.  Each thread consumes memory and contributes to Global VM Lock contention, so be careful when increasing this.",
        "nixName": "puma.threadsMax",
        "type": "signed integer",
        "value": "4"
      },
      {
        "name": "puma.threadsMin",
        "desc": "The minimum number of threads Puma should use per worker.  Each thread consumes memory and contributes to Global VM Lock contention, so be careful when increasing this.",
        "nixName": "puma.threadsMin",
        "type": "signed integer",
        "value": "0"
      },
      {
        "name": "puma.workers",
        "desc": "The number of worker processes Puma should spawn. This controls the amount of parallel Ruby code can be executed. GitLab recommends Number of CPU cores - 1, but at least two.  Each worker consumes quite a bit of memory, so be careful when increasing this.",
        "nixName": "puma.workers",
        "type": "signed integer",
        "value": "2"
      },
      {
        "name": "redisUrl",
        "desc": "Redis URL for all GitLab services.",
        "nixName": "redisUrl",
        "type": "string",
        "value": "unix:/run/gitlab/redis.sock"
      },
      {
        "name": "registry.certFile",
        "desc": "Path to GitLab container registry certificate.",
        "nixName": "registry.certFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "registry.defaultForProjects",
        "desc": "If GitLab container registry should be enabled by default for projects.",
        "nixName": "registry.defaultForProjects",
        "type": "boolean",
        "value": "config.services.gitlab.registry.enable"
      },
      {
        "name": "registry.enable",
        "desc": "Enable GitLab container registry.",
        "nixName": "registry.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "registry.externalAddress",
        "desc": "External address used to access registry from the internet",
        "nixName": "registry.externalAddress",
        "type": "string",
        "value": ""
      },
      {
        "name": "registry.externalPort",
        "desc": "External port used to access registry from the internet",
        "nixName": "registry.externalPort",
        "type": "signed integer",
        "value": ""
      },
      {
        "name": "registry.host",
        "desc": "GitLab container registry host name.",
        "nixName": "registry.host",
        "type": "string",
        "value": "config.services.gitlab.host"
      },
      {
        "name": "registry.issuer",
        "desc": "GitLab container registry issuer.",
        "nixName": "registry.issuer",
        "type": "string",
        "value": "gitlab-issuer"
      },
      {
        "name": "registry.keyFile",
        "desc": "Path to GitLab container registry certificate-key.",
        "nixName": "registry.keyFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "registry.package",
        "desc": "Container registry package to use. External container registries such as pkgs.docker-distribution are not supported anymore since GitLab 16.0.0.",
        "nixName": "registry.package",
        "type": "package",
        "value": "pkgs.docker-distribution"
      },
      {
        "name": "registry.port",
        "desc": "GitLab container registry port.",
        "nixName": "registry.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "4567"
      },
      {
        "name": "registry.serviceName",
        "desc": "GitLab container registry service name.",
        "nixName": "registry.serviceName",
        "type": "string",
        "value": "container_registry"
      },
      {
        "name": "secrets.dbFile",
        "desc": "A file containing the secret used to encrypt variables in the DB. If you change or lose this key you will be unable to access variables stored in database. Make sure the secret is at least 32 characters and all random, no regular words or you’ll be exposed to dictionary attacks. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "secrets.dbFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "secrets.jwsFile",
        "desc": "A file containing the secret used to encrypt session keys. If you change or lose this key, users will be disconnected. Make sure the secret is an RSA private key in PEM format. You can generate one with openssl genrsa 2048 This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "secrets.jwsFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "secrets.otpFile",
        "desc": "A file containing the secret used to encrypt secrets for OTP tokens. If you change or lose this key, users which have 2FA enabled for login won’t be able to login anymore. Make sure the secret is at least 32 characters and all random, no regular words or you’ll be exposed to dictionary attacks. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "secrets.otpFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "secrets.secretFile",
        "desc": "A file containing the secret used to encrypt variables in the DB. If you change or lose this key you will be unable to access variables stored in database. Make sure the secret is at least 32 characters and all random, no regular words or you’ll be exposed to dictionary attacks. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "secrets.secretFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "sidekiq.concurrency",
        "desc": "How many processor threads to use for processing sidekiq background job queues. When null, the GitLab default is used. See https://docs.gitlab.com/ee/administration/sidekiq/extra_sidekiq_processes.html#manage-thread-counts-explicitly for details.",
        "nixName": "sidekiq.concurrency",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "sidekiq.memoryKiller.enable",
        "desc": "Whether the Sidekiq MemoryKiller should be turned on. MemoryKiller kills Sidekiq when its memory consumption exceeds a certain limit. See https://docs.gitlab.com/ee/administration/operations/sidekiq_memory_killer.html for details.",
        "nixName": "sidekiq.memoryKiller.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "sidekiq.memoryKiller.graceTime",
        "desc": "The time MemoryKiller waits after noticing excessive memory consumption before killing Sidekiq.",
        "nixName": "sidekiq.memoryKiller.graceTime",
        "type": "signed integer",
        "value": "900"
      },
      {
        "name": "sidekiq.memoryKiller.maxMemory",
        "desc": "The maximum amount of memory, in MiB, a Sidekiq worker is allowed to consume before being killed.",
        "nixName": "sidekiq.memoryKiller.maxMemory",
        "type": "signed integer",
        "value": "2000"
      },
      {
        "name": "sidekiq.memoryKiller.shutdownWait",
        "desc": "The time allowed for all jobs to finish before Sidekiq is killed forcefully.",
        "nixName": "sidekiq.memoryKiller.shutdownWait",
        "type": "signed integer",
        "value": "30"
      },
      {
        "name": "smtp.address",
        "desc": "Address of the SMTP server for GitLab.",
        "nixName": "smtp.address",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "smtp.authentication",
        "desc": "Authentication type to use, see http://api.rubyonrails.org/classes/ActionMailer/Base.html",
        "nixName": "smtp.authentication",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "smtp.domain",
        "desc": "HELO domain to use for outgoing mail.",
        "nixName": "smtp.domain",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "smtp.enable",
        "desc": "Enable gitlab mail delivery over SMTP.",
        "nixName": "smtp.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "smtp.enableStartTLSAuto",
        "desc": "Whether to try to use StartTLS.",
        "nixName": "smtp.enableStartTLSAuto",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "smtp.opensslVerifyMode",
        "desc": "How OpenSSL checks the certificate, see http://api.rubyonrails.org/classes/ActionMailer/Base.html",
        "nixName": "smtp.opensslVerifyMode",
        "type": "string",
        "value": "peer"
      },
      {
        "name": "smtp.passwordFile",
        "desc": "File containing the password of the SMTP server for GitLab. This should be a string, not a nix path, since nix paths are copied into the world-readable nix store.",
        "nixName": "smtp.passwordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "smtp.port",
        "desc": "Port of the SMTP server for GitLab.",
        "nixName": "smtp.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "25"
      },
      {
        "name": "smtp.tls",
        "desc": "Whether to use TLS wrapper-mode.",
        "nixName": "smtp.tls",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "smtp.username",
        "desc": "Username of the SMTP server for GitLab.",
        "nixName": "smtp.username",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "statePath",
        "desc": "GitLab state directory. Configuration, repositories and logs, among other things, are stored here. The directory will be created automatically if it doesn’t exist already. Its parent directories must be owned by either root or the user set in services.gitlab.user.",
        "nixName": "statePath",
        "type": "string",
        "value": "/var/gitlab/state"
      },
      {
        "name": "user",
        "desc": "User to run gitlab and all related services.",
        "nixName": "user",
        "type": "string",
        "value": "gitlab"
      },
      {
        "name": "workhorse.config",
        "desc": "Configuration options to add to Workhorse’s configuration file. See https://gitlab.com/gitlab-org/gitlab/-/blob/master/workhorse/config.toml.example and https://docs.gitlab.com/ee/development/workhorse/configuration.html for examples and option documentation. Options containing secret data should be set to an attribute set containing the attribute _secret - a string pointing to a file containing the value the option should be set to. See the example to get a better picture of this: in the resulting configuration file, the object_storage.s3.aws_secret_access_key key will be set to the contents of the /var/keys/aws_secret_access_key file.",
        "nixName": "workhorse.config",
        "type": "TOML value",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "Gitolite",
    "desc": "Deploy Gitolite with a straightforward setup to manage Git repositories and access control easily. Gitolite allows users to host Git repositories securely while providing fine-grained access control.",
    "longDesc": "Gitolite is an open-source tool that enables Git repository hosting with robust access control features. It allows users to set up a centralized Git server while managing permissions for multiple users and groups efficiently.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation using Docker, making it easy to get started with Git repository management.\n- **Scalability:** Supports an unlimited number of repositories and users, making it suitable for both small teams and large organizations.\n- **Privacy and Security:** All repositories are hosted on the user’s infrastructure, ensuring complete control over access and data.\n- **Fine-Grained Access Control:** Provides detailed permission management for users and groups, allowing for customized access to each repository.\n- **SSH-Based Access:** Utilizes SSH for secure connections, enhancing security when accessing repositories.",
    "useCases": "- **Developers:** Manage and share code repositories within teams, ensuring secure access to critical projects.\n- **Enterprises:** Implement a centralized Git server for organizational projects, managing user permissions efficiently.\n- **Educational Institutions:** Facilitate collaboration on student projects while controlling access to sensitive materials.",
    "support": "- **Community Forums:** Engage with the Gitolite community for support and discussions through the [Gitolite Mailing List](https://gitolite.com/gitolite/index.html).\n- **Documentation:** Comprehensive user guides and setup instructions can be found at the [Gitolite Documentation](https://gitolite.com/gitolite/index.html).\n- **Troubleshooting Help:** Access issues and solutions via the [Gitolite GitHub Repository](https://github.com/sitaramc/gitolite) for user-contributed support and updates.\n\nThis template highlights Gitolite’s functionalities and practical applications for managing Git repositories effectively. For more detailed information, visit the [official Gitolite website](https://gitolite.com/gitolite/index.html).",
    "nixName": "gitolite",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Project Management"
    ],
    "website": "https://gitolite.com/gitolite/index.html",
    "implemented": false,
    "logo": "https://gitolite.com/gitolite/img/favicon.ico",
    "options": [
      {
        "name": "adminPubkey",
        "desc": "Initial administrative public key for Gitolite. This should be an SSH Public Key. Note that this key will only be used once, upon the first initialization of the Gitolite user. The key string cannot have any line breaks in it.",
        "nixName": "adminPubkey",
        "type": "string",
        "value": ""
      },
      {
        "name": "commonHooks",
        "desc": "A list of custom git hooks that get copied to ~/.gitolite/hooks/common.",
        "nixName": "commonHooks",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "dataDir",
        "desc": "The gitolite home directory used to store all repositories. If left as the default value this directory will automatically be created before the gitolite server starts, otherwise the sysadmin is responsible for ensuring the directory exists with appropriate ownership and permissions.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/gitolite"
      },
      {
        "name": "description",
        "desc": "Gitolite user account’s description.",
        "nixName": "description",
        "type": "string",
        "value": "Gitolite user"
      },
      {
        "name": "enable",
        "desc": "Enable gitolite management under the gitolite user. After switching to a configuration with Gitolite enabled, you can then run git clone gitolite@host:gitolite-admin.git to manage it further.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableGitAnnex",
        "desc": "Enable git-annex support. Uses the extraGitoliteRc option to apply the necessary configuration.",
        "nixName": "enableGitAnnex",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "extraGitoliteRc",
        "desc": "Extra configuration to append to the default ~/.gitolite.rc. This should be Perl code that modifies the %RC configuration variable. The default ~/.gitolite.rc content is generated by invoking gitolite print-default-rc, and extra configuration from this option is appended to it. The result is placed to Nix store, and the ~/.gitolite.rc file becomes a symlink to it. If you already have a customized (or otherwise changed) ~/.gitolite.rc file, NixOS will refuse to replace it with a symlink, and the gitolite-init initialization service will fail. In this situation, in order to use this option, you will need to take any customizations you may have in ~/.gitolite.rc, convert them to appropriate Perl statements, add them to this option, and remove the file. See also the enableGitAnnex option.",
        "nixName": "extraGitoliteRc",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "group",
        "desc": "Primary group of the Gitolite user account.",
        "nixName": "group",
        "type": "string",
        "value": "gitolite"
      },
      {
        "name": "user",
        "desc": "Gitolite user account. This is the username of the gitolite endpoint.",
        "nixName": "user",
        "type": "string",
        "value": "gitolite"
      }
    ]
  },
  {
    "name": "Rygel",
    "desc": "Deploy Rygel with a streamlined setup to create a powerful UPnP (Universal Plug and Play) media server. Rygel allows users to stream and share digital media content across devices in a home network seamlessly.",
    "longDesc": "Rygel is an open-source UPnP media server that provides a framework for streaming multimedia content. It supports various media formats and allows users to share and access their media libraries on different devices within their network.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation via Docker, enabling quick setup and access to media streaming capabilities.\n- **Scalability:** Efficiently handles large libraries of media files, making it suitable for both personal collections and shared media servers.\n- **Privacy:** Users maintain control over their media, as all content is hosted locally without reliance on cloud services.\n- **API Compatibility:** Provides a UPnP AV API for easy integration with various devices and applications.\n- **Flexible Media Handling:** Supports transcoding and streaming of various media formats, allowing playback on a wide range of devices.",
    "useCases": "- **Home Users:** Stream personal music, videos, and photos to smart TVs, gaming consoles, or mobile devices.\n- **Media Enthusiasts:** Share large media collections with friends and family across the home network.\n- **Educators:** Use Rygel to present multimedia content in classrooms or workshops, facilitating collaborative learning experiences.",
    "support": "- **Community Forums:** Connect with other Rygel users and developers through the [Rygel GitLab Page](https://gnome.pages.gitlab.gnome.org/rygel/) for assistance and discussions.\n- **Documentation:** Access comprehensive guides, configuration options, and troubleshooting tips at the [Rygel Documentation](https://github.com/GNOME/rygel/blob/master/README.md).\n- **Troubleshooting Help:** Review the [Rygel GitHub Repository](https://gnome.pages.gitlab.gnome.org/rygel/) for common issues and solutions provided by the community.\n\nThis template highlights Rygel’s capabilities for media streaming and sharing, emphasizing its role within home networks. For more detailed information, visit the [official Rygel website](https://gnome.pages.gitlab.gnome.org/rygel/).",
    "tags": [
      "Media Streaming - Multimedia Streaming"
    ],
    "website": "https://gitlab.gnome.org/GNOME/rygel",
    "implemented": false,
    "logo": "https://gitlab.gnome.org/uploads/-/system/appearance/favicon/1/GnomeLogoVertical.svg.png",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "gnome.rygel",
    "options": [
      {
        "name": "desktops/gnome/rygel.nix",
        "desc": "Whether to enable Rygel UPnP Mediaserver.You will need to also allow UPnP connections in firewall, see thefollowing comment.",
        "nixName": "enable",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "GoCD",
    "desc": "Deploy GoCD with a straightforward setup to enable continuous delivery for software projects. GoCD allows teams to model and visualize complex workflows, automating the build and deployment processes to enhance software delivery.",
    "longDesc": "GoCD is an open-source continuous delivery server that helps teams automate the build, testing, and deployment of their applications. It enables organizations to manage the entire software delivery process, ensuring that code changes are integrated, tested, and released efficiently.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy GoCD using Docker or other orchestration tools for rapid setup.\n- **Scalability:** Designed to handle complex workflows and large teams, supporting parallel and distributed builds.\n- **Privacy and Security:** Self-hosted solution allows organizations to maintain control over their data and workflows.\n- **API Compatibility:** Provides a RESTful API for integration with other tools and services, facilitating automation and extensibility.\n- **Value Stream Mapping:** Visualize complex workflows and dependencies, allowing teams to identify bottlenecks and improve efficiency.",
    "useCases": "- **Development Teams:** Automate the deployment pipeline to ensure faster and more reliable releases.\n- **Enterprises:** Manage large-scale projects with multiple teams and complex release strategies, maintaining quality and speed.\n- **Educational Institutions:** Teach students about continuous integration and delivery practices using a real-world tool.",
    "support": "- **Community Forums:** Engage with the GoCD community through the [GoCD Discussion Forum](https://discuss.gocd.org) for support and collaboration.\n- **Documentation:** Comprehensive guides, tutorials, and setup instructions are available at the [GoCD Documentation](https://docs.gocd.org/current/).\n- **Troubleshooting Help:** Access the [GoCD GitHub Repository](https://github.com/gocd/gocd) for issue tracking and community-contributed solutions.\n\nThis template highlights the functionalities and practical applications of GoCD, emphasizing its significance in continuous delivery workflows. For more information, visit the [official GoCD website](https://www.gocd.org/index.html).",
    "nixName": "gocd-server",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Continuous Integration & Continuous Deployment"
    ],
    "website": "http://www.go.cd",
    "implemented": false,
    "logo": "http://www.go.cd/assets/images/favicon.ico",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable gocd-server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environment",
        "desc": "Additional environment variables to be passed to the gocd-server process. As a base environment, gocd-server receives NIX_PATH from environment.sessionVariables, NIX_REMOTE is set to “daemon”.",
        "nixName": "environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "extraGroups",
        "desc": "List of extra groups that the “gocd-server” user should be a part of.",
        "nixName": "extraGroups",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraOptions",
        "desc": "Specifies additional command line arguments to pass to Go.CD server’s java process. Example contains debug and gcLog arguments.",
        "nixName": "extraOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "If the default user “gocd-server” is configured then this is the primary group of that user.",
        "nixName": "group",
        "type": "string",
        "value": "gocd-server"
      },
      {
        "name": "initialJavaHeapSize",
        "desc": "Specifies the initial java heap memory size for the Go.CD server’s java process.",
        "nixName": "initialJavaHeapSize",
        "type": "string",
        "value": "512m"
      },
      {
        "name": "listenAddress",
        "desc": "Specifies the bind address on which the Go.CD server HTTP interface listens.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "maxJavaHeapMemory",
        "desc": "Specifies the java maximum heap memory size for the Go.CD server’s java process.",
        "nixName": "maxJavaHeapMemory",
        "type": "string",
        "value": "1024m"
      },
      {
        "name": "packages",
        "desc": "Packages to add to PATH for the Go.CD server’s process.",
        "nixName": "packages",
        "type": "list of package",
        "value": "[ pkgs.stdenv pkgs.jre pkgs.git config.programs.ssh.package pkgs.nix ]"
      },
      {
        "name": "port",
        "desc": "Specifies port number on which the Go.CD server HTTP interface listens.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8153"
      },
      {
        "name": "sslPort",
        "desc": "Specifies port number on which the Go.CD server HTTPS interface listens.",
        "nixName": "sslPort",
        "type": "signed integer",
        "value": "8154"
      },
      {
        "name": "startupOptions",
        "desc": "Specifies startup command line arguments to pass to Go.CD server java process.",
        "nixName": "startupOptions",
        "type": "list of string",
        "value": "[\n  \"-Xms${config.services.gocd-server.initialJavaHeapSize}\"\n  \"-Xmx${config.services.gocd-server.maxJavaHeapMemory}\"\n  \"-Dcruise.listen.host=${config.services.gocd-server.listenAddress}\"\n  \"-Duser.language=en\"\n  \"-Djruby.rack.request.size.threshold.bytes=30000000\"\n  \"-Duser.country=US\"\n  \"-Dcruise.config.dir=${config.services.gocd-server.workDir}/conf\"\n  \"-Dcruise.config.file=${config.services.gocd-server.workDir}/conf/cruise-config.xml\"\n  \"-Dcruise.server.port=${toString config.services.gocd-server.port}\"\n  \"-Dcruise.server.ssl.port=${toString config.services.gocd-server.sslPort}\"\n  \"--add-opens=java.base/java.lang=ALL-UNNAMED\"\n  \"--add-opens=java.base/java.util=ALL-UNNAMED\"\n]\n"
      },
      {
        "name": "user",
        "desc": "User the Go.CD server should execute under.",
        "nixName": "user",
        "type": "string",
        "value": "gocd-server"
      },
      {
        "name": "workDir",
        "desc": "Specifies the working directory in which the Go.CD server java archive resides.",
        "nixName": "workDir",
        "type": "string",
        "value": "/var/lib/go-server"
      }
    ]
  },
  {
    "name": "Gogs",
    "desc": "Deploy Gogs with a straightforward setup to create a self-hosted Git service. Gogs is designed to provide a simple and efficient way to manage Git repositories, enabling teams to collaborate on projects seamlessly.",
    "longDesc": "Gogs is an open-source Git service that offers a lightweight, self-hosted platform for hosting and managing Git repositories. It aims to provide a fast and easy-to-use interface for developers to collaborate on projects without the need for third-party services.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation using Docker or pre-built binaries for quick access.\n- **Scalability:** Capable of handling a large number of repositories and users, making it suitable for both small teams and large organizations.\n- **Privacy and Security:** Users maintain complete control over their repositories, ensuring data privacy and security.\n- **API Compatibility:** Provides a RESTful API for integrating with other tools and automating workflows.\n- **User-Friendly Interface:** Intuitive web interface for managing repositories, issues, and pull requests, enhancing user experience.",
    "useCases": "- **Developers:** Host personal or team projects with a focus on collaboration and version control.\n- **Enterprises:** Implement a private Git service to manage internal projects securely while maintaining compliance.\n- **Educational Institutions:** Provide students with a platform to learn about version control and collaborative software development.",
    "support": "- **Community Forums:** Connect with the Gogs community for support and discussions through the [Gogs GitHub Discussions](https://github.com/gogs/gogs/discussions).\n- **Documentation:** Comprehensive guides and installation instructions are available at the [Gogs Documentation](https://gogs.io/docs/) for user reference.\n- **Troubleshooting Help:** Access the [Gogs GitHub Repository](https://github.com/gogs/gogs) for issue tracking, community contributions, and solutions.\n\nThis template highlights Gogs' capabilities for managing Git repositories, emphasizing its importance for collaborative development. For more detailed information, visit the [official Gogs website](https://gogs.io/).",
    "nixName": "gogs",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Project Management"
    ],
    "website": "https://gogs.io",
    "implemented": false,
    "logo": "https://gogs.io/img/favicon.png",
    "options": [
      {
        "name": "appName",
        "desc": "Application name.",
        "nixName": "appName",
        "type": "string",
        "value": "Gogs: Go Git Service"
      },
      {
        "name": "cookieSecure",
        "desc": "Marks session cookies as “secure” as a hint for browsers to only send them via HTTPS. This option is recommend, if Gogs is being served over HTTPS.",
        "nixName": "cookieSecure",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "database.host",
        "desc": "Database host address.",
        "nixName": "database.host",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "database.name",
        "desc": "Database name.",
        "nixName": "database.name",
        "type": "string",
        "value": "gogs"
      },
      {
        "name": "database.password",
        "desc": "The password corresponding to database.user. Warning: this is stored in cleartext in the Nix store! Use database.passwordFile instead.",
        "nixName": "database.password",
        "type": "string",
        "value": ""
      },
      {
        "name": "database.passwordFile",
        "desc": "A file containing the password corresponding to database.user.",
        "nixName": "database.passwordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "database.path",
        "desc": "Path to the sqlite3 database file.",
        "nixName": "database.path",
        "type": "string",
        "value": "${config.services.gogs.stateDir}/data/gogs.db"
      },
      {
        "name": "database.port",
        "desc": "Database host port.",
        "nixName": "database.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3306"
      },
      {
        "name": "database.type",
        "desc": "Database engine to use.",
        "nixName": "database.type",
        "type": "one of \"sqlite3\", \"mysql\", \"postgres\"",
        "value": "\"sqlite3\""
      },
      {
        "name": "database.user",
        "desc": "Database user.",
        "nixName": "database.user",
        "type": "string",
        "value": "gogs"
      },
      {
        "name": "domain",
        "desc": "Domain name of your server.",
        "nixName": "domain",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "enable",
        "desc": "Enable Go Git Service.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraConfig",
        "desc": "Configuration lines appended to the generated Gogs configuration file.",
        "nixName": "extraConfig",
        "type": "string",
        "value": ""
      },
      {
        "name": "group",
        "desc": "Group account under which Gogs runs.",
        "nixName": "group",
        "type": "string",
        "value": "gogs"
      },
      {
        "name": "httpAddress",
        "desc": "HTTP listen address.",
        "nixName": "httpAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "httpPort",
        "desc": "HTTP listen port.",
        "nixName": "httpPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3000"
      },
      {
        "name": "repositoryRoot",
        "desc": "Path to the git repositories.",
        "nixName": "repositoryRoot",
        "type": "string",
        "value": "${config.services.gogs.stateDir}/repositories"
      },
      {
        "name": "rootUrl",
        "desc": "Full public URL of Gogs server.",
        "nixName": "rootUrl",
        "type": "string",
        "value": "http://localhost:3000/"
      },
      {
        "name": "stateDir",
        "desc": "Gogs data directory.",
        "nixName": "stateDir",
        "type": "string",
        "value": "/var/lib/gogs"
      },
      {
        "name": "useWizard",
        "desc": "Do not generate a configuration and use Gogs’ installation wizard instead. The first registered user will be administrator.",
        "nixName": "useWizard",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "user",
        "desc": "User account under which Gogs runs.",
        "nixName": "user",
        "type": "string",
        "value": "gogs"
      }
    ]
  },
  {
    "name": "grafana",
    "desc": "Deploy Grafana with a streamlined setup to integrate and visualize your data sources effectively. Grafana serves as a bridge for data visualization, leveraging the powerful features of Grafana.",
    "longDesc": "Grafana is a tool designed to enhance the capabilities of Grafana, enabling users to visualize and monitor data from various sources efficiently. It acts as a robust front-end for data management, making it easier to analyze and derive insights from your data.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Grafana using Docker or other orchestration tools for quick setup.\n- **Scalability:** Capable of managing a wide range of data sources, suitable for both small applications and enterprise-level deployments.\n- **Privacy:** Maintains user data security, allowing organizations to control access to their data visualizations.\n- **API Compatibility:** Supports integration with multiple data sources through APIs, enabling dynamic data visualization.\n- **User-Friendly Interface:** Provides an intuitive interface for creating and managing dashboards, making it accessible for users of all skill levels.",
    "useCases": "- **Data Analysts:** Use Grafana to visualize complex datasets, making data-driven decisions easier and faster.\n- **Businesses:** Monitor key performance indicators (KPIs) across various departments, facilitating strategic planning and operational efficiency.\n- **Educational Institutions:** Teach students about data visualization and analytics through hands-on experience with real-world data.",
    "support": "- **Community Forums:** Engage with the Grafana community for support and discussions through [GitHub Discussions](https://github.com/adremsoft/NetCrunch-grafana).\n- **Documentation:** Comprehensive guides and setup instructions can be found at the [Grafana Documentation](https://grafana.com/docs/).\n- **Troubleshooting Help:** Access troubleshooting resources and community support via the [Grafana GitHub Repository](https://github.com/grafana/grafana) for issues related to Grafana and its integration with Grafana.\n\nThis template provides an overview of Grafana’s functionalities, emphasizing its capabilities for data visualization and management. For more detailed information, visit the [official Grafana GitHub page](https://github.com/adremsoft/NetCrunch-grafana).",
    "nixName": "grafana",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://grafana.com",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "dataDir",
        "desc": "Data directory.",
        "nixName": "dataDir",
        "type": "path",
        "value": "\"/var/lib/grafana\""
      },
      {
        "name": "declarativePlugins",
        "desc": "If non-null, then a list of packages containing Grafana plugins to install. If set, plugins cannot be manually installed.",
        "nixName": "declarativePlugins",
        "type": "null or (list of path)",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable grafana.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "The grafana package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.grafana"
      },
      {
        "name": "provision.alerting.contactPoints.path",
        "desc": "Path to YAML contact points configuration. Can’t be used with services.grafana.provision.alerting.contactPoints.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.alerting.contactPoints.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.alerting.contactPoints.settings",
        "desc": "Grafana contact points configuration in Nix. Can’t be used with services.grafana.provision.alerting.contactPoints.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#contact-points for supported options.",
        "nixName": "provision.alerting.contactPoints.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.alerting.contactPoints.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.alerting.contactPoints.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.contactPoints.settings.contactPoints",
        "desc": "List of contact points to import or update.",
        "nixName": "provision.alerting.contactPoints.settings.contactPoints",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.contactPoints.settings.contactPoints.*.name",
        "desc": "Name of the contact point. Required.",
        "nixName": "provision.alerting.contactPoints.settings.contactPoints.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.contactPoints.settings.deleteContactPoints",
        "desc": "List of receivers that should be deleted.",
        "nixName": "provision.alerting.contactPoints.settings.deleteContactPoints",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.contactPoints.settings.deleteContactPoints.*.orgId",
        "desc": "Organization ID, default = 1.",
        "nixName": "provision.alerting.contactPoints.settings.deleteContactPoints.*.orgId",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.contactPoints.settings.deleteContactPoints.*.uid",
        "desc": "Unique identifier for the receiver. Required.",
        "nixName": "provision.alerting.contactPoints.settings.deleteContactPoints.*.uid",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.muteTimings.path",
        "desc": "Path to YAML mute timings configuration. Can’t be used with services.grafana.provision.alerting.muteTimings.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.alerting.muteTimings.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.alerting.muteTimings.settings",
        "desc": "Grafana mute timings configuration in Nix. Can’t be used with services.grafana.provision.alerting.muteTimings.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#mute-timings for supported options.",
        "nixName": "provision.alerting.muteTimings.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.alerting.muteTimings.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.alerting.muteTimings.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.muteTimings.settings.deleteMuteTimes",
        "desc": "List of mute time intervals that should be deleted.",
        "nixName": "provision.alerting.muteTimings.settings.deleteMuteTimes",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.muteTimings.settings.deleteMuteTimes.*.name",
        "desc": "Name of the mute time interval, must be unique. Required.",
        "nixName": "provision.alerting.muteTimings.settings.deleteMuteTimes.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.muteTimings.settings.deleteMuteTimes.*.orgId",
        "desc": "Organization ID, default = 1.",
        "nixName": "provision.alerting.muteTimings.settings.deleteMuteTimes.*.orgId",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.muteTimings.settings.muteTimes",
        "desc": "List of mute time intervals to import or update.",
        "nixName": "provision.alerting.muteTimings.settings.muteTimes",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.muteTimings.settings.muteTimes.*.name",
        "desc": "Name of the mute time interval, must be unique. Required.",
        "nixName": "provision.alerting.muteTimings.settings.muteTimes.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.policies.path",
        "desc": "Path to YAML notification policies configuration. Can’t be used with services.grafana.provision.alerting.policies.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.alerting.policies.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.alerting.policies.settings",
        "desc": "Grafana notification policies configuration in Nix. Can’t be used with services.grafana.provision.alerting.policies.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#notification-policies for supported options.",
        "nixName": "provision.alerting.policies.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.alerting.policies.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.alerting.policies.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.policies.settings.policies",
        "desc": "List of contact points to import or update.",
        "nixName": "provision.alerting.policies.settings.policies",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.policies.settings.resetPolicies",
        "desc": "List of orgIds that should be reset to the default policy.",
        "nixName": "provision.alerting.policies.settings.resetPolicies",
        "type": "list of signed integer",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.rules.path",
        "desc": "Path to YAML rules configuration. Can’t be used with services.grafana.provision.alerting.rules.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.alerting.rules.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.alerting.rules.settings",
        "desc": "Grafana rules configuration in Nix. Can’t be used with services.grafana.provision.alerting.rules.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#rules for supported options.",
        "nixName": "provision.alerting.rules.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.alerting.rules.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.alerting.rules.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.rules.settings.deleteRules",
        "desc": "List of alert rule UIDs that should be deleted.",
        "nixName": "provision.alerting.rules.settings.deleteRules",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.rules.settings.deleteRules.*.orgId",
        "desc": "Organization ID, default = 1",
        "nixName": "provision.alerting.rules.settings.deleteRules.*.orgId",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.rules.settings.deleteRules.*.uid",
        "desc": "Unique identifier for the rule. Required.",
        "nixName": "provision.alerting.rules.settings.deleteRules.*.uid",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.rules.settings.groups",
        "desc": "List of rule groups to import or update.",
        "nixName": "provision.alerting.rules.settings.groups",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.rules.settings.groups.*.folder",
        "desc": "Name of the folder the rule group will be stored in. Required.",
        "nixName": "provision.alerting.rules.settings.groups.*.folder",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.rules.settings.groups.*.interval",
        "desc": "Interval that the rule group should be evaluated at. Required.",
        "nixName": "provision.alerting.rules.settings.groups.*.interval",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.rules.settings.groups.*.name",
        "desc": "Name of the rule group. Required.",
        "nixName": "provision.alerting.rules.settings.groups.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.templates.path",
        "desc": "Path to YAML templates configuration. Can’t be used with services.grafana.provision.alerting.templates.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.alerting.templates.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.alerting.templates.settings",
        "desc": "Grafana templates configuration in Nix. Can’t be used with services.grafana.provision.alerting.templates.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#templates for supported options.",
        "nixName": "provision.alerting.templates.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.alerting.templates.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.alerting.templates.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.templates.settings.deleteTemplates",
        "desc": "List of alert rule UIDs that should be deleted.",
        "nixName": "provision.alerting.templates.settings.deleteTemplates",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.templates.settings.deleteTemplates.*.name",
        "desc": "Name of the template, must be unique. Required.",
        "nixName": "provision.alerting.templates.settings.deleteTemplates.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.templates.settings.deleteTemplates.*.orgId",
        "desc": "Organization ID, default = 1.",
        "nixName": "provision.alerting.templates.settings.deleteTemplates.*.orgId",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.alerting.templates.settings.templates",
        "desc": "List of templates to import or update.",
        "nixName": "provision.alerting.templates.settings.templates",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.alerting.templates.settings.templates.*.name",
        "desc": "Name of the template, must be unique. Required.",
        "nixName": "provision.alerting.templates.settings.templates.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.alerting.templates.settings.templates.*.template",
        "desc": "Alerting with a custom text template",
        "nixName": "provision.alerting.templates.settings.templates.*.template",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.dashboards",
        "desc": "Declaratively provision Grafana’s dashboards.",
        "nixName": "provision.dashboards",
        "type": "submodule",
        "value": "{ }"
      },
      {
        "name": "provision.dashboards.path",
        "desc": "Path to YAML dashboard configuration. Can’t be used with services.grafana.provision.dashboards.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.dashboards.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.dashboards.settings",
        "desc": "Grafana dashboard configuration in Nix. Can’t be used with services.grafana.provision.dashboards.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards for supported options.",
        "nixName": "provision.dashboards.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.dashboards.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.dashboards.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.dashboards.settings.providers",
        "desc": "List of dashboards to insert/update.",
        "nixName": "provision.dashboards.settings.providers",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.dashboards.settings.providers.*.name",
        "desc": "A unique provider name.",
        "nixName": "provision.dashboards.settings.providers.*.name",
        "type": "string",
        "value": "default"
      },
      {
        "name": "provision.dashboards.settings.providers.*.options.path",
        "desc": "Path grafana will watch for dashboards. Required when using the ‘file’ type.",
        "nixName": "provision.dashboards.settings.providers.*.options.path",
        "type": "path",
        "value": ""
      },
      {
        "name": "provision.dashboards.settings.providers.*.type",
        "desc": "Dashboard provider type.",
        "nixName": "provision.dashboards.settings.providers.*.type",
        "type": "string",
        "value": "file"
      },
      {
        "name": "provision.datasources",
        "desc": "Declaratively provision Grafana’s datasources.",
        "nixName": "provision.datasources",
        "type": "submodule",
        "value": "{ }"
      },
      {
        "name": "provision.datasources.path",
        "desc": "Path to YAML datasource configuration. Can’t be used with services.grafana.provision.datasources.settings simultaneously. Can be either a directory or a single YAML file. Will end up in the store.",
        "nixName": "provision.datasources.path",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "provision.datasources.settings",
        "desc": "Grafana datasource configuration in Nix. Can’t be used with services.grafana.provision.datasources.path simultaneously. See https://grafana.com/docs/grafana/latest/administration/provisioning/#data-sources for supported options.",
        "nixName": "provision.datasources.settings",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "provision.datasources.settings.apiVersion",
        "desc": "Config file version.",
        "nixName": "provision.datasources.settings.apiVersion",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "provision.datasources.settings.datasources",
        "desc": "List of datasources to insert/update.",
        "nixName": "provision.datasources.settings.datasources",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "provision.datasources.settings.datasources.*.access",
        "desc": "Access mode. proxy or direct (Server or Browser in the UI). Required.",
        "nixName": "provision.datasources.settings.datasources.*.access",
        "type": "one of \"proxy\", \"direct\"",
        "value": "\"proxy\""
      },
      {
        "name": "provision.datasources.settings.datasources.*.editable",
        "desc": "Allow users to edit datasources from the UI.",
        "nixName": "provision.datasources.settings.datasources.*.editable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "provision.datasources.settings.datasources.*.jsonData",
        "desc": "Extra data for datasource plugins.",
        "nixName": "provision.datasources.settings.datasources.*.jsonData",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "provision.datasources.settings.datasources.*.name",
        "desc": "Name of the datasource. Required.",
        "nixName": "provision.datasources.settings.datasources.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.datasources.settings.datasources.*.secureJsonData",
        "desc": "Datasource specific secure configuration. Please note that the contents of this option will end up in a world-readable Nix store. Use the file provider pointing at a reasonably secured file in the local filesystem to work around that. Look at the documentation for details: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#file-provider",
        "nixName": "provision.datasources.settings.datasources.*.secureJsonData",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "provision.datasources.settings.datasources.*.type",
        "desc": "Datasource type. Required.",
        "nixName": "provision.datasources.settings.datasources.*.type",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.datasources.settings.datasources.*.uid",
        "desc": "Custom UID which can be used to reference this datasource in other parts of the configuration, if not specified will be generated automatically.",
        "nixName": "provision.datasources.settings.datasources.*.uid",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "provision.datasources.settings.datasources.*.url",
        "desc": "Url of the datasource.",
        "nixName": "provision.datasources.settings.datasources.*.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.datasources.settings.deleteDatasources",
        "desc": "List of datasources that should be deleted from the database.",
        "nixName": "provision.datasources.settings.deleteDatasources",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "provision.datasources.settings.deleteDatasources.*.name",
        "desc": "Name of the datasource to delete.",
        "nixName": "provision.datasources.settings.deleteDatasources.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "provision.datasources.settings.deleteDatasources.*.orgId",
        "desc": "Organization ID of the datasource to delete.",
        "nixName": "provision.datasources.settings.deleteDatasources.*.orgId",
        "type": "signed integer",
        "value": ""
      },
      {
        "name": "provision.enable",
        "desc": "Whether to enable provision.",
        "nixName": "provision.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings",
        "desc": "Grafana settings. See https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/ for available options. INI format is used.",
        "nixName": "settings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)",
        "value": ""
      },
      {
        "name": "settings.analytics.check_for_plugin_updates",
        "desc": "When set to false, disables checking for new versions of installed plugins from https://grafana.com. When enabled, the check for a new plugin runs every 10 minutes. It will notify, via the UI, when a new plugin update exists. The check itself will not prompt any auto-updates of the plugin, nor will it send any sensitive information.",
        "nixName": "settings.analytics.check_for_plugin_updates",
        "type": "boolean",
        "value": "cfg.declarativePlugins == null"
      },
      {
        "name": "settings.analytics.check_for_updates",
        "desc": "When set to false, disables checking for new versions of Grafana from Grafana’s GitHub repository. When enabled, the check for a new version runs every 10 minutes. It will notify, via the UI, when a new version is available. The check itself will not prompt any auto-updates of the Grafana software, nor will it send any sensitive information.",
        "nixName": "settings.analytics.check_for_updates",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.analytics.feedback_links_enabled",
        "desc": "Set to false to remove all feedback links from the UI.",
        "nixName": "settings.analytics.feedback_links_enabled",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.analytics.reporting_enabled",
        "desc": "When enabled Grafana will send anonymous usage statistics to stats.grafana.org. No IP addresses are being tracked, only simple counters to track running instances, versions, dashboard and error counts. Counters are sent every 24 hours.",
        "nixName": "settings.analytics.reporting_enabled",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.database.ca_cert_path",
        "desc": "The path to the CA certificate to use.",
        "nixName": "settings.database.ca_cert_path",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.database.cache_mode",
        "desc": "For sqlite3 only. Shared cache setting used for connecting to the database.",
        "nixName": "settings.database.cache_mode",
        "type": "one of \"private\", \"shared\"",
        "value": "\"private\""
      },
      {
        "name": "settings.database.client_cert_path",
        "desc": "The path to the client cert. Only if server requires client authentication.",
        "nixName": "settings.database.client_cert_path",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.database.client_key_path",
        "desc": "The path to the client key. Only if server requires client authentication.",
        "nixName": "settings.database.client_key_path",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.database.conn_max_lifetime",
        "desc": "Sets the maximum amount of time a connection may be reused. The default is 14400 (which means 14400 seconds or 4 hours). For MySQL, this setting should be shorter than the wait_timeout variable.",
        "nixName": "settings.database.conn_max_lifetime",
        "type": "signed integer",
        "value": "14400"
      },
      {
        "name": "settings.database.host",
        "desc": "Only applicable to MySQL or Postgres. Includes IP or hostname and port or in case of Unix sockets the path to it. For example, for MySQL running on the same host as Grafana: host = 127.0.0.1:3306 or with Unix sockets: host = /var/run/mysqld/mysqld.sock",
        "nixName": "settings.database.host",
        "type": "string",
        "value": "127.0.0.1:3306"
      },
      {
        "name": "settings.database.isolation_level",
        "desc": "Only the MySQL driver supports isolation levels in Grafana. In case the value is empty, the driver’s default isolation level is applied.",
        "nixName": "settings.database.isolation_level",
        "type": "null or one of \"READ-UNCOMMITTED\", \"READ-COMMITTED\", \"REPEATABLE-READ\", \"SERIALIZABLE\"",
        "value": "null"
      },
      {
        "name": "settings.database.locking_attempt_timeout_sec",
        "desc": "For mysql, if the migrationLocking feature toggle is set, specify the time (in seconds) to wait before failing to lock the database for the migrations.",
        "nixName": "settings.database.locking_attempt_timeout_sec",
        "type": "signed integer",
        "value": "0"
      },
      {
        "name": "settings.database.log_queries",
        "desc": "Set to true to log the sql calls and execution times",
        "nixName": "settings.database.log_queries",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.database.max_idle_conn",
        "desc": "The maximum number of connections in the idle connection pool.",
        "nixName": "settings.database.max_idle_conn",
        "type": "signed integer",
        "value": "2"
      },
      {
        "name": "settings.database.max_open_conn",
        "desc": "The maximum number of open connections to the database.",
        "nixName": "settings.database.max_open_conn",
        "type": "signed integer",
        "value": "0"
      },
      {
        "name": "settings.database.name",
        "desc": "The name of the Grafana database.",
        "nixName": "settings.database.name",
        "type": "string",
        "value": "grafana"
      },
      {
        "name": "settings.database.password",
        "desc": "The database user’s password (not applicable for sqlite3). Please note that the contents of this option will end up in a world-readable Nix store. Use the file provider pointing at a reasonably secured file in the local filesystem to work around that. Look at the documentation for details: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#file-provider",
        "nixName": "settings.database.password",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.database.path",
        "desc": "Only applicable to sqlite3 database. The file path where the database will be stored.",
        "nixName": "settings.database.path",
        "type": "path",
        "value": "\"${config.services.grafana.dataDir}/data/grafana.db\""
      },
      {
        "name": "settings.database.query_retries",
        "desc": "This setting applies to sqlite3 only and controls the number of times the system retries a query when the database is locked.",
        "nixName": "settings.database.query_retries",
        "type": "signed integer",
        "value": "0"
      },
      {
        "name": "settings.database.server_cert_name",
        "desc": "The common name field of the certificate used by the mysql or postgres server. Not necessary if ssl_mode is set to skip-verify.",
        "nixName": "settings.database.server_cert_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.database.ssl_mode",
        "desc": "For Postgres, use either disable, require or verify-full. For MySQL, use either true, false, or skip-verify.",
        "nixName": "settings.database.ssl_mode",
        "type": "one of \"disable\", \"require\", \"verify-full\", \"true\", \"false\", \"skip-verify\"",
        "value": "\"disable\""
      },
      {
        "name": "settings.database.transaction_retries",
        "desc": "This setting applies to sqlite3 only and controls the number of times the system retries a transaction when the database is locked.",
        "nixName": "settings.database.transaction_retries",
        "type": "signed integer",
        "value": "5"
      },
      {
        "name": "settings.database.type",
        "desc": "Database type.",
        "nixName": "settings.database.type",
        "type": "one of \"mysql\", \"sqlite3\", \"postgres\"",
        "value": "\"sqlite3\""
      },
      {
        "name": "settings.database.user",
        "desc": "The database user (not applicable for sqlite3).",
        "nixName": "settings.database.user",
        "type": "string",
        "value": "root"
      },
      {
        "name": "settings.database.wal",
        "desc": "For sqlite3 only. Setting to enable/disable Write-Ahead Logging.",
        "nixName": "settings.database.wal",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.paths.plugins",
        "desc": "Directory where grafana will automatically scan and look for plugins",
        "nixName": "settings.paths.plugins",
        "type": "path",
        "value": "if (cfg.declarativePlugins == null) then \"${cfg.dataDir}/plugins\" else declarativePlugins"
      },
      {
        "name": "settings.paths.provisioning",
        "desc": "Folder that contains provisioning config files that grafana will apply on startup and while running. Don’t change the value of this option if you are planning to use services.grafana.provision options.",
        "nixName": "settings.paths.provisioning",
        "type": "path",
        "value": "\"directory with links to files generated from services.grafana.provision\""
      },
      {
        "name": "settings.security.admin_email",
        "desc": "The email of the default Grafana Admin, created on startup.",
        "nixName": "settings.security.admin_email",
        "type": "string",
        "value": "admin@localhost"
      },
      {
        "name": "settings.security.admin_password",
        "desc": "Default admin password. Please note that the contents of this option will end up in a world-readable Nix store. Use the file provider pointing at a reasonably secured file in the local filesystem to work around that. Look at the documentation for details: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#file-provider",
        "nixName": "settings.security.admin_password",
        "type": "string",
        "value": "admin"
      },
      {
        "name": "settings.security.admin_user",
        "desc": "Default admin username.",
        "nixName": "settings.security.admin_user",
        "type": "string",
        "value": "admin"
      },
      {
        "name": "settings.security.allow_embedding",
        "desc": "When false, the HTTP header X-Frame-Options: deny will be set in Grafana HTTP responses which will instruct browsers to not allow rendering Grafana in a <frame>, <iframe>, <embed> or <object>. The main goal is to mitigate the risk of Clickjacking.",
        "nixName": "settings.security.allow_embedding",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.content_security_policy",
        "desc": "Set to true to add the Content-Security-Policy header to your requests. CSP allows to control resources that the user agent can load and helps prevent XSS attacks.",
        "nixName": "settings.security.content_security_policy",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.content_security_policy_report_only",
        "desc": "Set to true to add the Content-Security-Policy-Report-Only header to your requests. CSP in Report Only mode enables you to experiment with policies by monitoring their effects without enforcing them. You can enable both policies simultaneously.",
        "nixName": "settings.security.content_security_policy_report_only",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.cookie_samesite",
        "desc": "Sets the SameSite cookie attribute and prevents the browser from sending this cookie along with cross-site requests. The main goal is to mitigate the risk of cross-origin information leakage. This setting also provides some protection against cross-site request forgery attacks (CSRF), read more about SameSite here. Using value disabled does not add any SameSite attribute to cookies.",
        "nixName": "settings.security.cookie_samesite",
        "type": "one of \"lax\", \"strict\", \"none\", \"disabled\"",
        "value": "\"lax\""
      },
      {
        "name": "settings.security.cookie_secure",
        "desc": "Set to true if you host Grafana behind HTTPS.",
        "nixName": "settings.security.cookie_secure",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.csrf_additional_headers",
        "desc": "List of allowed headers to be set by the user. Suggested to use for if authentication lives behind reverse proxies.",
        "nixName": "settings.security.csrf_additional_headers",
        "type": "string or list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.security.csrf_trusted_origins",
        "desc": "List of additional allowed URLs to pass by the CSRF check. Suggested when authentication comes from an IdP.",
        "nixName": "settings.security.csrf_trusted_origins",
        "type": "string or list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.security.data_source_proxy_whitelist",
        "desc": "Define a whitelist of allowed IP addresses or domains, with ports, to be used in data source URLs with the Grafana data source proxy. Format: ip_or_domain:port separated by spaces. PostgreSQL, MySQL, and MSSQL data sources do not use the proxy and are therefore unaffected by this setting.",
        "nixName": "settings.security.data_source_proxy_whitelist",
        "type": "string or list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.security.disable_brute_force_login_protection",
        "desc": "Set to true to disable brute force login protection.",
        "nixName": "settings.security.disable_brute_force_login_protection",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.disable_gravatar",
        "desc": "Set to true to disable the use of Gravatar for user profile images.",
        "nixName": "settings.security.disable_gravatar",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.disable_initial_admin_creation",
        "desc": "Disable creation of admin user on first start of Grafana.",
        "nixName": "settings.security.disable_initial_admin_creation",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.secret_key",
        "desc": "Secret key used for signing. Please note that the contents of this option will end up in a world-readable Nix store. Use the file provider pointing at a reasonably secured file in the local filesystem to work around that. Look at the documentation for details: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#file-provider",
        "nixName": "settings.security.secret_key",
        "type": "string",
        "value": "SW2YcwTIb9zpOOhoPsMm"
      },
      {
        "name": "settings.security.strict_transport_security",
        "desc": "Set to true if you want to enable HTTP Strict-Transport-Security (HSTS) response header. Only use this when HTTPS is enabled in your configuration, or when there is another upstream system that ensures your application does HTTPS (like a frontend load balancer). HSTS tells browsers that the site should only be accessed using HTTPS.",
        "nixName": "settings.security.strict_transport_security",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.strict_transport_security_max_age_seconds",
        "desc": "Sets how long a browser should cache HSTS in seconds. Only applied if strict_transport_security is enabled.",
        "nixName": "settings.security.strict_transport_security_max_age_seconds",
        "type": "signed integer",
        "value": "86400"
      },
      {
        "name": "settings.security.strict_transport_security_preload",
        "desc": "Set to true to enable HSTS preloading option. Only applied if strict_transport_security is enabled.",
        "nixName": "settings.security.strict_transport_security_preload",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.strict_transport_security_subdomains",
        "desc": "Set to true to enable HSTS includeSubDomains option. Only applied if strict_transport_security is enabled.",
        "nixName": "settings.security.strict_transport_security_subdomains",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.security.x_content_type_options",
        "desc": "Set to false to disable the X-Content-Type-Options response header. The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised in the Content-Type headers should not be changed and be followed.",
        "nixName": "settings.security.x_content_type_options",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.security.x_xss_protection",
        "desc": "Set to false to disable the X-XSS-Protection header, which tells browsers to stop pages from loading when they detect reflected cross-site scripting (XSS) attacks.",
        "nixName": "settings.security.x_xss_protection",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.server.cdn_url",
        "desc": "Specify a full HTTP URL address to the root of your Grafana CDN assets. Grafana will add edition and version paths. For example, given a cdn url like https://cdn.myserver.com grafana will try to load a javascript file from http://cdn.myserver.com/grafana-oss/7.4.0/public/build/app.<hash>.js.",
        "nixName": "settings.server.cdn_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.server.cert_file",
        "desc": "Path to the certificate file (if protocol is set to https or h2).",
        "nixName": "settings.server.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.server.cert_key",
        "desc": "Path to the certificate key file (if protocol is set to https or h2).",
        "nixName": "settings.server.cert_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.server.domain",
        "desc": "The public facing domain name used to access grafana from a browser. This setting is only used in the default value of the root_url setting. If you set the latter manually, this option does not have to be specified.",
        "nixName": "settings.server.domain",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "settings.server.enable_gzip",
        "desc": "Set this option to true to enable HTTP compression, this can improve transfer speed and bandwidth utilization. It is recommended that most users set it to true. By default it is set to false for compatibility reasons.",
        "nixName": "settings.server.enable_gzip",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.server.enforce_domain",
        "desc": "Redirect to correct domain if the host header does not match the domain. Prevents DNS rebinding attacks.",
        "nixName": "settings.server.enforce_domain",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.server.http_addr",
        "desc": "Listening address.  This setting intentionally varies from upstream’s default to be a bit more secure by default.",
        "nixName": "settings.server.http_addr",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "settings.server.http_port",
        "desc": "Listening port.",
        "nixName": "settings.server.http_port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3000"
      },
      {
        "name": "settings.server.protocol",
        "desc": "Which protocol to listen.",
        "nixName": "settings.server.protocol",
        "type": "one of \"http\", \"https\", \"h2\", \"socket\"",
        "value": "\"http\""
      },
      {
        "name": "settings.server.read_timeout",
        "desc": "Sets the maximum time using a duration format (5s/5m/5ms) before timing out read of an incoming request and closing idle connections. 0 means there is no timeout for reading the request.",
        "nixName": "settings.server.read_timeout",
        "type": "string",
        "value": "0"
      },
      {
        "name": "settings.server.root_url",
        "desc": "This is the full URL used to access Grafana from a web browser. This is important if you use Google or GitHub OAuth authentication (for the callback URL to be correct). This setting is also important if you have a reverse proxy in front of Grafana that exposes it through a subpath. In that case add the subpath to the end of this URL setting.",
        "nixName": "settings.server.root_url",
        "type": "string",
        "value": "%(protocol)s://%(domain)s:%(http_port)s/"
      },
      {
        "name": "settings.server.router_logging",
        "desc": "Set to true for Grafana to log all HTTP requests (not just errors). These are logged as Info level events to the Grafana log.",
        "nixName": "settings.server.router_logging",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.server.serve_from_sub_path",
        "desc": "Serve Grafana from subpath specified in the root_url setting. By default it is set to false for compatibility reasons. By enabling this setting and using a subpath in root_url above, e.g. root_url = http://localhost:3000/grafana, Grafana is accessible on http://localhost:3000/grafana. If accessed without subpath, Grafana will redirect to an URL with the subpath.",
        "nixName": "settings.server.serve_from_sub_path",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.server.socket",
        "desc": "Path where the socket should be created when protocol=socket. Make sure that Grafana has appropriate permissions before you change this setting.",
        "nixName": "settings.server.socket",
        "type": "string",
        "value": "/run/grafana/grafana.sock"
      },
      {
        "name": "settings.server.socket_gid",
        "desc": "GID where the socket should be set when protocol=socket. Make sure that the target group is in the group of Grafana process and that Grafana process is the file owner before you change this setting. It is recommended to set the gid as http server user gid. Not set when the value is -1.",
        "nixName": "settings.server.socket_gid",
        "type": "signed integer",
        "value": "-1"
      },
      {
        "name": "settings.server.socket_mode",
        "desc": "Mode where the socket should be set when protocol=socket. Make sure that Grafana process is the file owner before you change this setting.",
        "nixName": "settings.server.socket_mode",
        "type": "string",
        "value": "0660"
      },
      {
        "name": "settings.server.static_root_path",
        "desc": "Root path for static assets.",
        "nixName": "settings.server.static_root_path",
        "type": "string",
        "value": "${package}/share/grafana/public"
      },
      {
        "name": "settings.smtp.cert_file",
        "desc": "File path to a cert file.",
        "nixName": "settings.smtp.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.smtp.ehlo_identity",
        "desc": "Name to be used as client identity for EHLO in SMTP dialog.",
        "nixName": "settings.smtp.ehlo_identity",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.smtp.enabled",
        "desc": "Whether to enable SMTP.",
        "nixName": "settings.smtp.enabled",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.smtp.from_address",
        "desc": "Address used when sending out emails.",
        "nixName": "settings.smtp.from_address",
        "type": "string",
        "value": "admin@grafana.localhost"
      },
      {
        "name": "settings.smtp.from_name",
        "desc": "Name to be used as client identity for EHLO in SMTP dialog.",
        "nixName": "settings.smtp.from_name",
        "type": "string",
        "value": "Grafana"
      },
      {
        "name": "settings.smtp.host",
        "desc": "Host to connect to.",
        "nixName": "settings.smtp.host",
        "type": "string",
        "value": "localhost:25"
      },
      {
        "name": "settings.smtp.key_file",
        "desc": "File path to a key file.",
        "nixName": "settings.smtp.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.smtp.password",
        "desc": "Password used for authentication. Please note that the contents of this option will end up in a world-readable Nix store. Use the file provider pointing at a reasonably secured file in the local filesystem to work around that. Look at the documentation for details: https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#file-provider",
        "nixName": "settings.smtp.password",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.smtp.skip_verify",
        "desc": "Verify SSL for SMTP server.",
        "nixName": "settings.smtp.skip_verify",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.smtp.startTLS_policy",
        "desc": "StartTLS policy when connecting to server.",
        "nixName": "settings.smtp.startTLS_policy",
        "type": "null or one of \"OpportunisticStartTLS\", \"MandatoryStartTLS\", \"NoStartTLS\"",
        "value": "null"
      },
      {
        "name": "settings.smtp.user",
        "desc": "User used for authentication.",
        "nixName": "settings.smtp.user",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.users.allow_org_create",
        "desc": "Set to false to prohibit users from creating new organizations.",
        "nixName": "settings.users.allow_org_create",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.users.allow_sign_up",
        "desc": "Set to false to prohibit users from being able to sign up / create user accounts. The admin user can still create users.",
        "nixName": "settings.users.allow_sign_up",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.users.auto_assign_org",
        "desc": "Set to true to automatically add new users to the main organization (id 1). When set to false, new users automatically cause a new organization to be created for that new user. The organization will be created even if the allow_org_create setting is set to false.",
        "nixName": "settings.users.auto_assign_org",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.users.auto_assign_org_id",
        "desc": "Set this value to automatically add new users to the provided org. This requires auto_assign_org to be set to true. Please make sure that this organization already exists.",
        "nixName": "settings.users.auto_assign_org_id",
        "type": "signed integer",
        "value": "1"
      },
      {
        "name": "settings.users.auto_assign_org_role",
        "desc": "The role new users will be assigned for the main organization (if the auto_assign_org setting is set to true).",
        "nixName": "settings.users.auto_assign_org_role",
        "type": "one of \"Viewer\", \"Editor\", \"Admin\"",
        "value": "\"Viewer\""
      },
      {
        "name": "settings.users.default_language",
        "desc": "This setting configures the default UI language, which must be a supported IETF language tag, such as en-US.",
        "nixName": "settings.users.default_language",
        "type": "string",
        "value": "en-US"
      },
      {
        "name": "settings.users.default_theme",
        "desc": "Sets the default UI theme. system matches the user’s system theme.",
        "nixName": "settings.users.default_theme",
        "type": "one of \"dark\", \"light\", \"system\"",
        "value": "\"dark\""
      },
      {
        "name": "settings.users.editors_can_admin",
        "desc": "Editors can administrate dashboards, folders and teams they create.",
        "nixName": "settings.users.editors_can_admin",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.users.hidden_users",
        "desc": "This is a comma-separated list of usernames. Users specified here are hidden in the Grafana UI. They are still visible to Grafana administrators and to themselves.",
        "nixName": "settings.users.hidden_users",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.users.home_page",
        "desc": "Path to a custom home page. Users are only redirected to this if the default home dashboard is used. It should match a frontend route and contain a leading slash.",
        "nixName": "settings.users.home_page",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.users.login_hint",
        "desc": "Text used as placeholder text on login page for login/username input.",
        "nixName": "settings.users.login_hint",
        "type": "string",
        "value": "email or username"
      },
      {
        "name": "settings.users.password_hint",
        "desc": "Text used as placeholder text on login page for password input.",
        "nixName": "settings.users.password_hint",
        "type": "string",
        "value": "password"
      },
      {
        "name": "settings.users.user_invite_max_lifetime_duration",
        "desc": "The duration in time a user invitation remains valid before expiring. This setting should be expressed as a duration. Examples: 6h (hours), 2d (days), 1w (week). The minimum supported duration is 15m (15 minutes).",
        "nixName": "settings.users.user_invite_max_lifetime_duration",
        "type": "string",
        "value": "24h"
      },
      {
        "name": "settings.users.verify_email_enabled",
        "desc": "Require email validation before sign up completes.",
        "nixName": "settings.users.verify_email_enabled",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.users.viewers_can_edit",
        "desc": "Viewers can access and use Explore and perform temporary edits on panels in dashboards they have access to. They cannot save their changes.",
        "nixName": "settings.users.viewers_can_edit",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Headphones",
    "desc": "Deploy Headphones with a straightforward setup to manage and organize your music collection efficiently. Headphones is an automated music downloader that integrates with various services to ensure you have the latest albums from your favorite artists.",
    "longDesc": "Headphones is an open-source application that automatically downloads music albums from various sources and organizes them into your library. It is designed for users who want a streamlined way to manage their music collection without manual intervention.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Headphones using Docker for quick access to its features.\n- **Scalability:** Supports multiple users and large music libraries, making it suitable for both personal and shared environments.\n- **Privacy:** Keeps your music collection private, as all data is managed locally without reliance on third-party services.\n- **API Compatibility:** Offers an API for integration with other applications and services, enhancing automation and connectivity.\n- **Multi-Source Downloading:** Pulls music from various sources, ensuring that you have access to the latest albums and tracks from your favorite artists.",
    "useCases": "- **Music Enthusiasts:** Automate the process of acquiring new music, ensuring your library is always up-to-date.\n- **Developers:** Use the API to integrate Headphones with other music applications or services, creating a personalized music management solution.\n- **Families or Shared Households:** Organize and manage a shared music library for easy access by multiple users.",
    "support": "- **Community Forums:** Join discussions and seek help from other Headphones users through the [Headphones GitHub Repository](https://github.com/rembo10/headphones).\n- **Documentation:** Access comprehensive guides and setup instructions available on the [Headphones Wiki](https://github.com/rembo10/headphones/wiki).\n- **Troubleshooting Help:** Review common issues and solutions in the GitHub Issues section, where you can also report bugs or request features.\n\nThis template outlines the functionalities and practical applications of Headphones, emphasizing its importance for music management. For more detailed information, visit the [official Headphones GitHub page](https://github.com/rembo10/headphones).",
    "nixName": "headphones",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Automation"
    ],
    "website": "https://github.com/rembo10/headphones",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "configFile",
        "desc": "Path to config file.",
        "nixName": "configFile",
        "type": "path",
        "value": "\"${config.services.headphones.dataDir}/config.ini\""
      },
      {
        "name": "dataDir",
        "desc": "Path where to store data files.",
        "nixName": "dataDir",
        "type": "path",
        "value": "\"/var/lib/headphones\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable the headphones server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group to run the service as",
        "nixName": "group",
        "type": "string",
        "value": "headphones"
      },
      {
        "name": "host",
        "desc": "Host to listen on.",
        "nixName": "host",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "port",
        "desc": "Port to bind to.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8181"
      },
      {
        "name": "user",
        "desc": "User to run the service as",
        "nixName": "user",
        "type": "string",
        "value": "headphones"
      }
    ]
  },
  {
    "name": "Healthchecks",
    "desc": "Deploy Healthchecks with a straightforward setup to monitor the status of cron jobs and scheduled tasks. Healthchecks provides notifications and insights into the execution of your scheduled jobs, ensuring they run as expected.",
    "longDesc": "Healthchecks is an open-source monitoring service designed to check the health of scheduled tasks and cron jobs. It alerts users when jobs fail to run or are missed, enabling timely responses to potential issues.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation via Docker, allowing for quick and easy setup of monitoring services.\n- **Scalability:** Capable of handling multiple projects and tasks, making it suitable for individual users and larger teams.\n- **Privacy and Security:** Self-hosted options allow organizations to maintain control over their monitoring data and notifications.\n- **API Compatibility:** Offers a REST API for integrating Healthchecks with other applications and workflows, facilitating automation.\n- **Custom Notifications:** Supports multiple notification channels, including email, Slack, and webhooks, to alert users of job statuses.",
    "useCases": "- **Developers:** Monitor cron jobs to ensure automated tasks run successfully without manual checks.\n- **Enterprises:** Manage large-scale job scheduling across multiple systems, ensuring operational reliability.\n- **Educators:** Use Healthchecks to teach students about job scheduling and monitoring in software development.",
    "support": "- **Community Forums:** Engage with other Healthchecks users and developers through the [Healthchecks GitHub Discussions](https://github.com/healthchecks/healthchecks/discussions).\n- **Documentation:** Comprehensive user guides and installation instructions are available at [Healthchecks Documentation](https://healthchecks.io/docs/).\n- **Troubleshooting Help:** Access resources and community support via the [Healthchecks GitHub Repository]https://github.com/healthchecks/healthchecks) for issues and feature requests.\n\nThis template outlines the functionalities and practical applications of Healthchecks, emphasizing its importance in monitoring scheduled tasks. For more detailed information, visit the [official Healthchecks website](https://healthchecks.io/).",
    "nixName": "healthchecks",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Monitoring"
    ],
    "website": "https://github.com/healthchecks/healthchecks",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "dataDir",
        "desc": "The directory used to store all data for healthchecks.  If left as the default value this directory will automatically be created before the healthchecks server starts, otherwise you are responsible for ensuring the directory exists with appropriate ownership and permissions.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/healthchecks"
      },
      {
        "name": "enable",
        "desc": "Enable healthchecks. It is expected to be run behind a HTTP reverse proxy.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group account under which healthchecks runs.  If left as the default value this group will automatically be created on system activation, otherwise you are responsible for ensuring the group exists before the healthchecks service starts.",
        "nixName": "group",
        "type": "string",
        "value": "healthchecks"
      },
      {
        "name": "listenAddress",
        "desc": "Address the server will listen on.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "package",
        "desc": "The healthchecks package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.healthchecks"
      },
      {
        "name": "port",
        "desc": "Port the server will listen on.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8000"
      },
      {
        "name": "settings",
        "desc": "Environment variables which are read by healthchecks (local)_settings.py. Settings which are explicitly covered in options below, are type-checked and/or transformed before added to the environment, everything else is passed as a string. See https://healthchecks.io/docs/self_hosted_configuration/ for a full documentation of settings. We add additional variables to this list inside the packages local_settings.py.  STATIC_ROOT to set a state directory for dynamically generated static files. SECRET_KEY_FILE to read SECRET_KEY from a file at runtime and keep it out of /nix/store. _FILE variants for several values that hold sensitive information in Healthchecks configuration so that they also can be read from a file and kept out of /nix/store. To see which values have support for a _FILE variant, run:  nix-instantiate --eval --expr '(import <nixpkgs> {}).healthchecks.secrets' or nix eval 'nixpkgs#healthchecks.secrets' if the flake support has been enabled.   If the same variable is set in both settings and settingsFile the value from settingsFile has priority.",
        "nixName": "settings",
        "type": "attribute set of string",
        "value": ""
      },
      {
        "name": "settings.ALLOWED_HOSTS",
        "desc": "The host/domain names that this site can serve.",
        "nixName": "settings.ALLOWED_HOSTS",
        "type": "list of string",
        "value": "[\n  \"*\"\n]"
      },
      {
        "name": "settings.DB",
        "desc": "Database engine to use.",
        "nixName": "settings.DB",
        "type": "one of \"sqlite\", \"postgres\", \"mysql\"",
        "value": "\"sqlite\""
      },
      {
        "name": "settings.DB_NAME",
        "desc": "Database name.",
        "nixName": "settings.DB_NAME",
        "type": "string",
        "value": "if config.services.healthchecks.settings.DB == sqlite\nthen ${config.services.healthchecks.dataDir}/healthchecks.sqlite\nelse hc\n"
      },
      {
        "name": "settings.DEBUG",
        "desc": "Enable debug mode.",
        "nixName": "settings.DEBUG",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.REGISTRATION_OPEN",
        "desc": "A boolean that controls whether site visitors can create new accounts. Set it to false if you are setting up a private Healthchecks instance, but it needs to be publicly accessible (so, for example, your cloud services can send pings to it). If you close new user registration, you can still selectively invite users to your team account.",
        "nixName": "settings.REGISTRATION_OPEN",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.SECRET_KEY_FILE",
        "desc": "Path to a file containing the secret key.",
        "nixName": "settings.SECRET_KEY_FILE",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "settingsFile",
        "desc": "Environment variables which are read by healthchecks (local)_settings.py. Settings which are explicitly covered in options below, are type-checked and/or transformed before added to the environment, everything else is passed as a string. See https://healthchecks.io/docs/self_hosted_configuration/ for a full documentation of settings. We add additional variables to this list inside the packages local_settings.py.  STATIC_ROOT to set a state directory for dynamically generated static files. SECRET_KEY_FILE to read SECRET_KEY from a file at runtime and keep it out of /nix/store. _FILE variants for several values that hold sensitive information in Healthchecks configuration so that they also can be read from a file and kept out of /nix/store. To see which values have support for a _FILE variant, run:  nix-instantiate --eval --expr '(import <nixpkgs> {}).healthchecks.secrets' or nix eval 'nixpkgs#healthchecks.secrets' if the flake support has been enabled.   If the same variable is set in both settings and settingsFile the value from settingsFile has priority.",
        "nixName": "settingsFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "user",
        "desc": "User account under which healthchecks runs.  If left as the default value this user will automatically be created on system activation, otherwise you are responsible for ensuring the user exists before the healthchecks service starts.",
        "nixName": "user",
        "type": "string",
        "value": "healthchecks"
      }
    ]
  },
  {
    "name": "Heimdall (Polygon)",
    "desc": "Deploy Heimdall Polygon with a one-click setup to operate a full-service Polygon PoS (Proof of Stake) network node. Heimdall ensures the integrity of checkpoints and validator management.",
    "longDesc": "**What is Heimdall?**\n\nHeimdall is a critical component of the Polygon PoS architecture, serving as a validator layer. It is responsible for block validation, checkpoint management, and maintaining the network’s decentralized consensus.\n\n**Key Features:**\n\n- **One-Click Deployment:** Easy setup using Nix, Docker, or manual installation.\n- **Consensus Layer Management:** Heimdall processes checkpoints and ensures cross-chain interoperability.\n- **Data Security:** Operates on your infrastructure to provide complete control over sensitive data.\n- **API Accessibility:** Offers a robust API for validators and developers to interact with the Polygon PoS network.\n- **Multi-Network Support:** Supports Polygon Mainnet, Mumbai Testnet, and custom local deployments.",
    "useCases": "- **Validators:** Run and manage Polygon PoS validator nodes efficiently.\n- **Developers:** Build and test integrations with the Polygon PoS network.\n- **Enterprises:** Ensure secure and reliable checkpoint validations in large-scale Polygon-based applications.",
    "support": "- **Community Forums:** Connect with developers and contributors in the [Polygon Community Forum](https://forum.polygon.technology).\n- **Documentation:** Access detailed guides and tutorials in the [Polygon Docs](https://docs.polygon.technology).\n- **GitHub Repository:** Visit the [Heimdall GitHub Repository](https://github.com/maticnetwork/heimdall) for source code and issues tracking.",
    "flakes": [
      {
        "name": "openmesh-heimdall-package",
        "url": "github:CheesecakeLabs/openmesh-heimdall-package"
      }
    ],
    "nixName": "polygon-heimdall",
    "specs": {
      "ram": 16000,
      "storage": 4000000
    },
    "tags": [
      "Validator",
      "Polygon",
      "Checkpoint",
      "Blockchain"
    ],
    "website": "https://polygon.technology/",
    "implemented": true,
    "logo": "https://s2.coinmarketcap.com/static/img/coins/64x64/28321.png",
    "options": [
      {
        "name": "enable",
        "desc": "Enable Polygon Heimdall Node.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "chain",
        "desc": "Set one of the chains: (mainnet, mumbai, amoy, local).",
        "nixName": "chain",
        "type": "string",
        "value": "mainnet"
      },
      {
        "name": "bor_rpc_url",
        "desc": "Set RPC endpoint for the Bor chain.",
        "nixName": "bor_rpc_url",
        "type": "string",
        "value": "http://0.0.0.0:8545"
      },
      {
        "name": "eth_rpc_url",
        "desc": "Set RPC endpoint for the Eth chain.",
        "nixName": "eth_rpc_url",
        "type": "string",
        "value": "http://0.0.0.0:9545"
      },
      {
        "name": "tendermint_rpc_url",
        "desc": "Set RPC endpoint for the Tendermint chain.",
        "nixName": "tendermint_rpc_url",
        "type": "string",
        "value": "http://0.0.0.0:26657"
      },
      {
        "name": "heimdall_rest_server",
        "desc": "Set REST server for the Heimdall chain, used by bridge.",
        "nixName": "heimdall_rest_server",
        "type": "string",
        "value": "http://0.0.0.0:1317"
      },
      {
        "name": "extraArgs",
        "desc": "Additional arguments for the Heimdall executable.",
        "nixName": "extraArgs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "seeds",
        "desc": "List of seeds to connect to.",
        "nixName": "seeds",
        "type": "string",
        "value": "1500161dd491b67fb1ac81868952be49e2509c9f@52.78.36.216:26656,dd4a3f1750af5765266231b9d8ac764599921736@3.36.224.80:26656,8ea4f592ad6cc38d7532aff418d1fb97052463af@34.240.245.39:26656,e772e1fb8c3492a9570a377a5eafdb1dc53cd778@54.194.245.5:26656,6726b826df45ac8e9afb4bdb2469c7771bd797f1@52.209.21.164:26656"
      }
    ]
  },
  {
    "name": "Hound",
    "desc": "Deploy Hound with a streamlined setup to create a lightning-fast source code search engine. Hound indexes repositories and provides quick search capabilities for developers to efficiently find code snippets, definitions, and other essential data across their codebase.",
    "longDesc": "Hound is an open-source tool designed for fast and efficient searching of source code. Built on a robust architecture, it allows users to index and query code repositories quickly, improving productivity and code management.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation process via Docker, allowing for quick and easy setup of the search service.\n- **Scalability:** Capable of indexing a large number of repositories and handling significant search loads, suitable for small teams and large enterprises.\n- **Privacy and Security:** Maintains user data security by hosting the indexing service locally, minimizing reliance on third-party platforms.\n- **API Compatibility:** Provides a minimal API for integration with other development tools, facilitating seamless workflows.\n- **User-Friendly Interface:** Offers an intuitive web interface that allows users to perform searches and navigate through code efficiently.",
    "useCases": "- **Developers:** Quickly search through large codebases to find functions, classes, or comments, improving code comprehension and debugging efficiency.\n- **Enterprises:** Manage multiple repositories and streamline code review processes by providing easy access to code across teams.\n- **Educators:** Teach software development concepts by allowing students to explore and search through example codebases.",
    "support": "- **Community Forums:** Engage with other Hound users through the [Hound GitHub Repository](https://github.com/hound-search/hound) for discussions and support.\n- **Documentation:** Comprehensive setup guides and user instructions are available in the [Hound Documentation](https://github.com/hound-search/hound#quick-start-guide) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find solutions provided by the developer community.\n\nThis template highlights Hound's capabilities for efficient source code searching, emphasizing its importance for developers and teams. For more detailed information, visit the [official Hound GitHub page](https://github.com/hound-search/hound).",
    "nixName": "hound",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Search Engines"
    ],
    "website": "https://github.com/hound-search/hound",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable hound.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group the hound daemon should execute under.",
        "nixName": "group",
        "type": "string",
        "value": "hound"
      },
      {
        "name": "home",
        "desc": "The path to use as hound’s $HOME. If the default user “hound” is configured then this is the home of the “hound” user.",
        "nixName": "home",
        "type": "path",
        "value": "\"/var/lib/hound\""
      },
      {
        "name": "listen",
        "desc": "Listen on this [IP]:port",
        "nixName": "listen",
        "type": "string",
        "value": "0.0.0.0:6080"
      },
      {
        "name": "package",
        "desc": "The hound package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.hound"
      },
      {
        "name": "settings",
        "desc": "The full configuration of the Hound daemon. See the upstream documentation https://github.com/hound-search/hound/blob/main/docs/config-options.md for details.  The dbpath should be an absolute path to a writable directory.",
        "nixName": "settings",
        "type": "JSON value",
        "value": ""
      },
      {
        "name": "user",
        "desc": "User the hound daemon should execute under.",
        "nixName": "user",
        "type": "string",
        "value": "hound"
      }
    ]
  },
  {
    "name": "iodine",
    "desc": "Deploy Iodine with a streamlined setup to create a DNS tunneling solution. Iodine enables users to tunnel IPv4 data through a DNS server, facilitating secure connections in environments where traditional ports may be blocked.",
    "longDesc": "Iodine is an open-source tool designed for tunneling network traffic through DNS. It allows users to establish connections that bypass restrictions, making it useful for various network applications, especially in security-sensitive scenarios.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Iodine using Docker, streamlining the setup process for both beginners and experienced users.\n- **Scalability:** Supports multiple clients and can handle various network loads, making it suitable for both small and large deployments.\n- **Privacy and Security:** Encrypts data transmitted over the DNS tunnel, enhancing the security of network communications.\n- **API Compatibility:** Allows integration with other applications and services for automation and enhanced functionality.\n- **Cross-Platform Support:** Works on multiple operating systems, including Linux, Windows, and macOS, providing flexibility in deployment environments.",
    "useCases": "- **Network Administrators:** Utilize Iodine to create secure remote access solutions in restrictive network environments.\n- **Developers:** Test applications that require reliable connections, even when traditional ports are blocked.\n- **Security Professionals:** Use Iodine for penetration testing and security assessments, ensuring comprehensive network security evaluations.",
    "support": "- **Community Forums:** Connect with other users and developers for support through the [Iodine GitHub Repository](https://github.com/yarrick/iodine).\n- **Documentation:** Comprehensive setup guides and instructions are available at the [Iodine Documentation](https://www.kali.org/tools/iodine/) for user reference.\n- **Troubleshooting Help:** Access community-contributed solutions and report issues through the GitHub issues section for additional support.\n\nThis template provides a clear overview of Iodine’s functionalities, emphasizing its capabilities for secure DNS tunneling. For more detailed information, visit the [official Iodine GitHub page](https://github.com/yarrick/iodine).",
    "nixName": "iodine",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Proxy"
    ],
    "website": "http://code.kryo.se/iodine/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "clients",
        "desc": "Each attribute of this option defines a systemd service that runs iodine. Many or none may be defined. The name of each service is iodine-«name» where «name» is the name of the corresponding attribute name.",
        "nixName": "clients",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "clients.<name>.extraConfig",
        "desc": "Additional command line parameters",
        "nixName": "clients.<name>.extraConfig",
        "type": "string",
        "value": ""
      },
      {
        "name": "clients.<name>.passwordFile",
        "desc": "Path to a file containing the password.",
        "nixName": "clients.<name>.passwordFile",
        "type": "string",
        "value": ""
      },
      {
        "name": "clients.<name>.relay",
        "desc": "DNS server to use as an intermediate relay to the iodined server",
        "nixName": "clients.<name>.relay",
        "type": "string",
        "value": ""
      },
      {
        "name": "clients.<name>.server",
        "desc": "Hostname of server running iodined",
        "nixName": "clients.<name>.server",
        "type": "string",
        "value": ""
      },
      {
        "name": "server.domain",
        "desc": "Domain or subdomain of which nameservers point to us",
        "nixName": "server.domain",
        "type": "string",
        "value": ""
      },
      {
        "name": "server.enable",
        "desc": "enable iodined server",
        "nixName": "server.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "server.extraConfig",
        "desc": "Additional command line parameters",
        "nixName": "server.extraConfig",
        "type": "string",
        "value": ""
      },
      {
        "name": "server.ip",
        "desc": "The assigned ip address or ip range",
        "nixName": "server.ip",
        "type": "string",
        "value": ""
      },
      {
        "name": "server.passwordFile",
        "desc": "File that contains password",
        "nixName": "server.passwordFile",
        "type": "string",
        "value": ""
      }
    ]
  },
  {
    "name": "Jellyfin",
    "desc": "Deploy Jellyfin to create a powerful and flexible media server solution that allows users to manage and stream their personal media collections. Jellyfin is an open-source alternative to Plex and Emby, offering extensive customization and privacy features.",
    "longDesc": "Jellyfin is an open-source media server that lets you manage and stream your personal media collection from anywhere. It provides a versatile platform for movies, TV shows, music, photos, and more, with a focus on user control and privacy.\n\n**Key Features:**\n- **Media Management:** Organize and categorize your media files, including movies, TV shows, music, and photos, with metadata support for a rich media experience.\n- **Streaming:** Stream your media collection to various devices, including smart TVs, mobile devices, and web browsers, with support for multiple users and profiles.\n- **Privacy and Control:** Keep your media library private and secure, with no third-party data sharing or tracking.\n- **Extensive Customization:** Customize the interface and functionality with plugins, themes, and user-defined settings.\n- **Multi-Platform Support:** Available for various platforms, including Windows, macOS, Linux, and Docker, with clients for Android, iOS, and more.",
    "useCases": "- **Home Media Server:** Set up Jellyfin to manage and stream your personal media collection for family and friends.\n- **Remote Access:** Access your media library from anywhere with an internet connection, ensuring you can enjoy your content on the go.\n- **Multi-User Environment:** Create multiple user profiles with individual preferences and parental controls, suitable for households with diverse media needs.",
    "support": "- **Community Forums:** Engage with the Jellyfin community for support and discussions through the [Jellyfin Community Forums](https://forum.jellyfin.org/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Jellyfin Documentation](https://jellyfin.org/docs/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on the [Jellyfin GitHub Repository](https://github.com/jellyfin/jellyfin) to report bugs and find community-contributed solutions.\n This template provides an overview of Jellyfin’s functionalities and practical applications, emphasizing its role as a leading open-source media server solution for personal use. For more detailed information, visit the official [Jellyfin website.](https://jellyfin.org/)",
    "nixName": "jellyfin",
    "specs": {
      "ram": 4000,
      "storage": 10000
    },
    "tags": [
      "Video",
      "Streaming",
      "Media"
    ],
    "website": "https://jellyfin.org/",
    "implemented": true,
    "logo": "https://jellyfin.org/images/favicon.ico",
    "options": [
      {
        "name": "enable",
        "desc": "Enable the Jellyfin Media Server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "Version of jellyfin to run.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.jellyfin"
      },
      {
        "name": "user",
        "desc": "User account under which jellyfin runs.",
        "nixName": "user",
        "type": "string",
        "value": "jellyfin"
      },
      {
        "name": "dataDir",
        "desc": "Base data directory.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/jellyfin"
      },
      {
        "name": "configDir",
        "desc": "Directory containing the server configuration files.",
        "nixName": "configDir",
        "type": "string",
        "value": "/var/lib/jellyfin/config"
      },
      {
        "name": "cacheDir",
        "desc": "Directory containing the jellyfin server cache.",
        "nixName": "cacheDir",
        "type": "string",
        "value": "/var/cache/jellyfin"
      },
      {
        "name": "logDir",
        "desc": "Directory where the Jellyfin logs will be stored,",
        "nixName": "logDir",
        "type": "string",
        "value": "/var/lib/jellyfin/log"
      },
      {
        "name": "openFirewall",
        "desc": "Open the default ports in the firewall for the media server. The HTTP/HTTPS ports can be changed in the Web UI, so this option should only be used if they are unchanged",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      }
    ]
  },
  {
    "name": "Jenkins",
    "desc": "Deploy Jenkins with a straightforward setup to automate software development processes, including continuous integration and continuous delivery (CI/CD). Jenkins is an open-source automation server that enables developers to build, test, and deploy applications efficiently.",
    "longDesc": "**What is Jenkins?**\n\n Jenkins is a widely-used open-source automation server that facilitates the automation of various stages of software development, from building to testing and deploying applications. It supports numerous plugins that allow integration with a vast array of tools and services.\n\n**Key Features:**\n\n- **One-Click Deployment:** Simplified installation using Docker or other orchestration tools for rapid setup and accessibility.\n\n- **Scalability:** Supports distributed builds across multiple nodes, accommodating projects of any size and complexity.\n\n- **Privacy and Security:** Provides extensive security features, including role-based access control and encrypted communications.\n\n- **API Compatibility:** Offers a robust REST API for integration with other tools and automation scripts, enhancing flexibility in workflows.\n\n- **Extensive Plugin Ecosystem:** Thousands of plugins available to extend Jenkins’ functionality, integrating with various development, testing, and deployment tools.",
    "support": "- **Community Forums:** Engage with the Jenkins community for support and discussions through the [Jenkins Community Forum](https://www.jenkins.io/).\n\n- **Documentation:** Comprehensive user guides, installation instructions, and best practices are available at the [Jenkins Documentation](https://www.jenkins.io/doc/) for detailed reference. \n\n- **Troubleshooting Help:** Access the [Jenkins Issue Tracker](https://issues.jenkins.io/) to report bugs and seek solutions to common problems faced by users.\n\n This template provides a clear overview of Jenkins’ functionalities and practical applications, emphasizing its significance in automating software development processes. For more detailed information, visit the official [Jenkins website](https://www.jenkins.io/).​",
    "nixName": "jenkins",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - Continuous Integration & Continuous Deployment"
    ],
    "website": "https://jenkins.io/",
    "implemented": false,
    "logo": "https://jenkins.io/favicon.ico",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable the jenkins continuous integration server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environment",
        "desc": "Additional environment variables to be passed to the jenkins process. As a base environment, jenkins receives NIX_PATH from environment.sessionVariables, NIX_REMOTE is set to “daemon” and JENKINS_HOME is set to the value of services.jenkins.home. This option has precedence and can be used to override those mentioned variables.",
        "nixName": "environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "extraGroups",
        "desc": "List of extra groups that the “jenkins” user should be a part of.",
        "nixName": "extraGroups",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraJavaOptions",
        "desc": "Additional command line arguments to pass to the Java run time (as opposed to Jenkins).",
        "nixName": "extraJavaOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraOptions",
        "desc": "Additional command line arguments to pass to Jenkins.",
        "nixName": "extraOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "If the default user “jenkins” is configured then this is the primary group of that user.",
        "nixName": "group",
        "type": "string",
        "value": "jenkins"
      },
      {
        "name": "home",
        "desc": "The path to use as JENKINS_HOME. If the default user “jenkins” is configured then this is the home of the “jenkins” user.",
        "nixName": "home",
        "type": "path",
        "value": "\"/var/lib/jenkins\""
      },
      {
        "name": "jobBuilder.accessToken",
        "desc": "User token in Jenkins used to reload config. WARNING: This token will be world readable in the Nix store. To keep it secret, use the accessTokenFile option instead.",
        "nixName": "jobBuilder.accessToken",
        "type": "string",
        "value": ""
      },
      {
        "name": "jobBuilder.accessTokenFile",
        "desc": "File containing the API token for the accessUser user.",
        "nixName": "jobBuilder.accessTokenFile",
        "type": "string",
        "value": "${config.services.jenkins.home}/secrets/initialAdminPassword"
      },
      {
        "name": "jobBuilder.accessUser",
        "desc": "User id in Jenkins used to reload config.",
        "nixName": "jobBuilder.accessUser",
        "type": "string",
        "value": "admin"
      },
      {
        "name": "jobBuilder.enable",
        "desc": "Whether to enable the Jenkins Job Builder (JJB) service. It allows defining jobs for Jenkins in a declarative manner. Jobs managed through the Jenkins WebUI (or by other means) are left unchanged. Note that it really is declarative configuration; if you remove a previously defined job, the corresponding job directory will be deleted. Please see the Jenkins Job Builder documentation for more info: https://jenkins-job-builder.readthedocs.io/ .",
        "nixName": "jobBuilder.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "jobBuilder.jsonJobs",
        "desc": "Job descriptions for Jenkins Job Builder in JSON format.",
        "nixName": "jobBuilder.jsonJobs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "jobBuilder.nixJobs",
        "desc": "Job descriptions for Jenkins Job Builder in Nix format. This is a trivial wrapper around jsonJobs, using builtins.toJSON behind the scene.",
        "nixName": "jobBuilder.nixJobs",
        "type": "list of (attribute set)",
        "value": "[ ]"
      },
      {
        "name": "jobBuilder.yamlJobs",
        "desc": "Job descriptions for Jenkins Job Builder in YAML format.",
        "nixName": "jobBuilder.yamlJobs",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "listenAddress",
        "desc": "Specifies the bind address on which the jenkins HTTP interface listens. The default is the wildcard address.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "package",
        "desc": "The jenkins package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.jenkins"
      },
      {
        "name": "packages",
        "desc": "Packages to add to PATH for the jenkins process.",
        "nixName": "packages",
        "type": "list of package",
        "value": "[ pkgs.stdenv pkgs.git pkgs.jdk17 config.programs.ssh.package pkgs.nix ]"
      },
      {
        "name": "plugins",
        "desc": "A set of plugins to activate. Note that this will completely remove and replace any previously installed plugins. If you have manually-installed plugins that you want to keep while using this module, set this option to null. You can generate this set with a tool such as jenkinsPlugins2nix.",
        "nixName": "plugins",
        "type": "null or (attribute set of package)",
        "value": "null"
      },
      {
        "name": "port",
        "desc": "Specifies port number on which the jenkins HTTP interface listens. The default is 8080.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "prefix",
        "desc": "Specifies a urlPrefix to use with jenkins. If the example /jenkins is given, the jenkins server will be accessible using localhost:8080/jenkins.",
        "nixName": "prefix",
        "type": "string",
        "value": ""
      },
      {
        "name": "user",
        "desc": "User the jenkins server should execute under.",
        "nixName": "user",
        "type": "string",
        "value": "jenkins"
      },
      {
        "name": "withCLI",
        "desc": "Whether to make the CLI available. More info about the CLI available at [ https://www.jenkins.io/doc/book/managing/cli](https://www.jenkins.io/doc/book/managing/cli) .",
        "nixName": "withCLI",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Jupyter Notebook",
    "desc": "Deploy Jupyter Notebook to create an interactive computing environment that allows users to write and execute code, visualize data, and document workflows all in one place.",
    "longDesc": "Jupyter Notebook is an open-source web application that enables users to create and share documents containing live code, equations, visualizations, and narrative text. It is widely used in data science, machine learning, and research.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Jupyter Notebook using Docker, Anaconda, or cloud services for quick setup.\n- **Scalability:** Supports various configurations and can be run locally or on cloud platforms to accommodate large datasets and collaborative projects.\n- **Privacy and Security:** Offers options to run notebooks on private servers, ensuring data security and privacy.\n- **API Compatibility:** Integrates with numerous data science libraries and tools, allowing for seamless workflow management.\n- **Interactive Visualizations:** Enables users to create dynamic visualizations and dashboards using libraries like Matplotlib, Seaborn, and Plotly.",
    "useCases": "- **Data Scientists:** Utilize Jupyter Notebooks to analyze datasets, build models, and visualize results in an interactive format.\n- **Educators:** Implement Jupyter as a teaching tool to demonstrate programming concepts, data analysis, and computational thinking.\n- **Researchers:** Use Jupyter Notebooks to document research processes, share findings, and collaborate with peers.",
    "support": "- **Community Forums:** Engage with the Jupyter community for support and discussions through the [Jupyter Community Forum](https://discourse.jupyter.org/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Jupyter Documentation](https://docs.jupyter.org/en/latest/) for detailed reference.\n- **Troubleshooting Help:** Access the [Jupyter GitHub Repository](https://github.com/jupyter/notebook) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Jupyter Notebook’s functionalities and practical applications, emphasizing its role in data science and education. For more detailed information, visit the [official Jupyter website](https://jupyter.org/).",
    "nixName": "jupyter",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://www.python.org",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "command",
        "desc": "Which command the service runs. Note that not all jupyter packageshave all commands, e.g. jupyter-lab isn’t present in the defaultpackage.",
        "nixName": "command",
        "type": "string",
        "value": "\"jupyter-notebook\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable Jupyter development server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Name of the group used to run the jupyter service. Use this if youwant to create a group of users that are able to view the notebookdirectory’s content.",
        "nixName": "group",
        "type": "string",
        "value": "\"jupyter\""
      },
      {
        "name": "ip",
        "desc": "IP address Jupyter will be listening on.",
        "nixName": "ip",
        "type": "string",
        "value": "\"localhost\""
      },
      {
        "name": "kernels",
        "desc": "Declarative kernel config.  Kernels can be declared in any language that supports and has therequired dependencies to communicate with a jupyter server. In python’scase, it means that ipykernel package must always be included in thelist of packages of the targeted environment.",
        "nixName": "kernels",
        "type": "null or (attribute set of (JSON value))",
        "value": "null"
      },
      {
        "name": "kernels.<name>.argv",
        "desc": "Command and arguments to start the kernel.",
        "nixName": "kernels.<name>.argv",
        "type": "list of string",
        "value": null
      },
      {
        "name": "kernels.<name>.displayName",
        "desc": "Name that will be shown to the user.",
        "nixName": "kernels.<name>.displayName",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "kernels.<name>.env",
        "desc": "Environment variables to set for the kernel.",
        "nixName": "kernels.<name>.env",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "kernels.<name>.extraPaths",
        "desc": "Extra paths to link in kernel directory",
        "nixName": "kernels.<name>.extraPaths",
        "type": "attribute set of path",
        "value": "{ }"
      },
      {
        "name": "kernels.<name>.language",
        "desc": "Language of the environment. Typically the name of the binary.",
        "nixName": "kernels.<name>.language",
        "type": "string",
        "value": null
      },
      {
        "name": "kernels.<name>.logo32",
        "desc": "Path to 32x32 logo png.",
        "nixName": "kernels.<name>.logo32",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "kernels.<name>.logo64",
        "desc": "Path to 64x64 logo png.",
        "nixName": "kernels.<name>.logo64",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "notebookConfig",
        "desc": "Raw jupyter config.",
        "nixName": "notebookConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "notebookDir",
        "desc": "Root directory for notebooks.",
        "nixName": "notebookDir",
        "type": "string",
        "value": "\"~/\""
      },
      {
        "name": "package",
        "desc": "The notebook package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.python3.pkgs.notebook"
      },
      {
        "name": "password",
        "desc": "Password to use with notebook. Can be generated using: In [1]: fromnotebook.auth import passwd In [2]: passwd(‘test’) Out[2]:‘sha1:1b961dc713fb:88483270a63e57d18d43cf337e629539de1436ba’ NOTE: youneed to keep the single quote inside the nix string. Or you can use apython oneliner: “open(‘/path/secret_file’, ‘r’,encoding=‘utf8’).read().strip()” It will be interpreted at the end ofthe notebookConfig.",
        "nixName": "password",
        "type": "string",
        "value": null
      },
      {
        "name": "port",
        "desc": "Port number Jupyter will be listening on.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8888"
      },
      {
        "name": "user",
        "desc": "Name of the user used to run the jupyter service. For securityreason, jupyter should really not be run as root. If not set (jupyter),the service will create a jupyter user with appropriate settings.",
        "nixName": "user",
        "type": "string",
        "value": "\"jupyter\""
      }
    ]
  },
  {
    "name": "Kodi",
    "desc": "Deploy Kodi to create a powerful, open-source media center application that allows users to play and view movies, music, podcasts, and other digital media files from local and network storage media.",
    "longDesc": "Kodi is a free and open-source media player and entertainment hub designed to provide a seamless multimedia experience. It supports various file formats and can stream content from local storage, networks, and online services.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Kodi using Docker or other containerization methods for quick installation and setup.\n- **Scalability:** Designed to work on a variety of devices, from smartphones to smart TVs and computers, making it versatile for different user environments.\n- **Privacy and Security:** Offers features like a built-in VPN option for secure streaming, ensuring user privacy while accessing content.\n- **API Compatibility:** Provides an extensive API for integration with third-party services and add-ons, allowing users to customize their Kodi experience.\n- **Wide Format Support:** Supports a large number of audio, video, and image formats, ensuring compatibility with various media types.",
    "useCases": "- **Home Entertainment:** Set up Kodi as a central hub for all media consumption, allowing family members to access movies, shows, and music easily.\n- **Developers:** Create and share custom add-ons to extend Kodi's functionality and improve user experiences.\n- **Educators:** Use Kodi to create engaging multimedia presentations, integrating various media types into teaching materials.",
    "support": "- **Community Forums:** Engage with the Kodi community for support and discussions through the [Kodi Community Forum](https://forum.kodi.tv/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Kodi Documentation](https://xbmc.github.io/docs.kodi.tv/master/kodi-base/) for detailed reference.\n- **Troubleshooting Help:** Access the [Kodi GitHub Repository](https://github.com/xbmc/xbmc) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Kodi’s functionalities and practical applications, emphasizing its role as a versatile media center. For more detailed information, visit the [official Kodi website](https://kodi.tv/).",
    "tags": [
      "Media Streaming - Multimedia Streaming"
    ],
    "website": "https://kodi.tv/",
    "implemented": false,
    "logo": "https://kodi.tv/favicon-32x32.png?v=0f7311d6dfc6bbfa30848b0c28f33af2",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "kodi",
    "options": [
      {
        "name": "x11/desktop-managers/kodi.nix",
        "desc": "The kodi package to use.",
        "nixName": "relatedOption.xserver.desktopManager.kodi.package",
        "type": "package",
        "value": "pkgs.kodi"
      },
      {
        "name": "x11/desktop-managers/kodi.nix",
        "desc": "Enable the kodi multimedia center.",
        "nixName": "relatedOption.xserver.desktopManager.kodi.enable",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Kubo",
    "desc": "Deploy Kubo to create a powerful and versatile implementation of the InterPlanetary File System (IPFS). Kubo serves as a peer-to-peer network that facilitates efficient data storage and retrieval across distributed systems.",
    "longDesc": "Kubo is an open-source implementation of IPFS, designed to provide a decentralized method for storing and sharing files. It enables users to connect to a global network of peers to access and distribute content seamlessly.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Kubo using Docker or other containerization options for quick installation and configuration.\n- **Scalability:** Designed to handle large datasets and numerous concurrent connections, making it suitable for both personal and enterprise applications.\n- **Privacy and Security:** Ensures data is stored and transferred securely across a decentralized network, minimizing the risk of data breaches.\n- **API Compatibility:** Offers a comprehensive API for integration with other applications and services, enabling enhanced functionalities.\n- **Content Addressing:** Uses unique content identifiers (CIDs) to ensure reliable and efficient data retrieval.",
    "useCases": "- **Developers:** Integrate Kubo into applications that require decentralized file storage and retrieval, enhancing data resilience and accessibility.\n- **Enterprises:** Use Kubo to create distributed applications that leverage IPFS for content delivery and data management.\n- **Educators:** Implement Kubo in educational projects to demonstrate decentralized technology and its applications in real-world scenarios.",
    "support": "- **Community Forums:** Engage with the Kubo community for support and discussions through the [Kubo GitHub Repository](https://github.com/ipfs/kubo).\n- **Documentation:** Comprehensive guides and user manuals are available at the [IPFS Documentation](https://docs.ipfs.tech/reference/go/api/) for detailed reference on setup and usage.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Kubo’s functionalities and practical applications, emphasizing its role in decentralized data storage. For more detailed information, visit the [official Kubo GitHub page](https://github.com/ipfs/kubo).",
    "nixName": "kubo",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "File Transfer - Distributed Filesystems"
    ],
    "website": "https://ipfs.io/",
    "implemented": false,
    "logo": "https://ipfs.io/favicon.ico",
    "options": [
      {
        "name": "autoMigrate",
        "desc": "Whether Kubo should try to run the fs-repo-migration at startup.",
        "nixName": "autoMigrate",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "autoMount",
        "desc": "Whether Kubo should try to mount /ipfs and /ipns at startup.",
        "nixName": "autoMount",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "dataDir",
        "desc": "The data dir for Kubo",
        "nixName": "dataDir",
        "type": "string",
        "value": "if versionAtLeast config.system.stateVersion 17.09\nthen /var/lib/ipfs\nelse /var/lib/ipfs/.ipfs\n"
      },
      {
        "name": "defaultMode",
        "desc": "systemd service that is enabled by default",
        "nixName": "defaultMode",
        "type": "one of \"online\", \"offline\", \"norouting\"",
        "value": "\"online\""
      },
      {
        "name": "emptyRepo",
        "desc": "If set to false, the repo will be initialized with help files",
        "nixName": "emptyRepo",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enable",
        "desc": "Whether to enable the Interplanetary File System (WARNING: may cause severe network degradation). NOTE: after enabling this option and rebuilding your system, you need to log out and back in for the IPFS_PATH environment variable to be present in your shell. Until you do that, the CLI tools won’t be able to talk to the daemon by default .",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableGC",
        "desc": "Whether to enable automatic garbage collection",
        "nixName": "enableGC",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "extraFlags",
        "desc": "Extra flags passed to the Kubo daemon",
        "nixName": "extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "Group under which the Kubo daemon runs",
        "nixName": "group",
        "type": "string",
        "value": "ipfs"
      },
      {
        "name": "localDiscovery",
        "desc": "Whether to enable local discovery for the Kubo daemon. This will allow Kubo to scan ports on your local network. Some hosting services will ban you if you do this.",
        "nixName": "localDiscovery",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The kubo package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.kubo"
      },
      {
        "name": "serviceFdlimit",
        "desc": "The fdlimit for the Kubo systemd unit or null to have the daemon attempt to manage it",
        "nixName": "serviceFdlimit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "settings",
        "desc": "Attrset of daemon configuration. See [https://github.com/ipfs/kubo/blob/master/docs/config.md](https://github.com/ipfs/kubo/blob/master/docs/config.md) for reference. You can’t set Identity or Pinning.",
        "nixName": "settings",
        "type": "JSON value",
        "value": "{ }"
      },
      {
        "name": "settings.Addresses.API",
        "desc": "Multiaddr or array of multiaddrs describing the address to serve the local HTTP API on. In addition to the multiaddrs listed here, the daemon will also listen on a Unix domain socket. To allow the ipfs CLI tools to communicate with the daemon over that socket, add your user to the correct group, e.g. users.users.alice.extraGroups = [ config.services.kubo.group ];",
        "nixName": "settings.Addresses.API",
        "type": "string or list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.Addresses.Gateway",
        "desc": "Where the IPFS Gateway can be reached",
        "nixName": "settings.Addresses.Gateway",
        "type": "string or list of string",
        "value": "\"/ip4/127.0.0.1/tcp/8080\""
      },
      {
        "name": "settings.Addresses.Swarm",
        "desc": "Where Kubo listens for incoming p2p connections",
        "nixName": "settings.Addresses.Swarm",
        "type": "list of string",
        "value": "[\n  \"/ip4/0.0.0.0/tcp/4001\"\n  \"/ip6/::/tcp/4001\"\n  \"/ip4/0.0.0.0/udp/4001/quic-v1\"\n  \"/ip4/0.0.0.0/udp/4001/quic-v1/webtransport\"\n  \"/ip6/::/udp/4001/quic-v1\"\n  \"/ip6/::/udp/4001/quic-v1/webtransport\"\n]"
      },
      {
        "name": "settings.Mounts.IPFS",
        "desc": "Where to mount the IPFS namespace to",
        "nixName": "settings.Mounts.IPFS",
        "type": "string",
        "value": "/ipfs"
      },
      {
        "name": "settings.Mounts.IPNS",
        "desc": "Where to mount the IPNS namespace to",
        "nixName": "settings.Mounts.IPNS",
        "type": "string",
        "value": "/ipns"
      },
      {
        "name": "startWhenNeeded",
        "desc": "Whether to use socket activation to start Kubo when needed.",
        "nixName": "startWhenNeeded",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "user",
        "desc": "User under which the Kubo daemon runs",
        "nixName": "user",
        "type": "string",
        "value": "ipfs"
      }
    ]
  },
  {
    "name": "lemmy-server",
    "desc": "Deploy Lemmy Server to create a decentralized, open-source alternative to Reddit. Lemmy allows users to create and participate in communities, share content, and engage in discussions without the limitations of centralized platforms.",
    "longDesc": "Lemmy is a federated social media platform that enables users to create communities (called ‘lemmy instances’) similar to subreddits on Reddit. It is built with Rust and emphasizes decentralization, allowing different instances to communicate while maintaining user control over their data.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Lemmy using Docker or other containerization options for a straightforward installation process.\n- **Scalability:** Designed to handle a large number of users and posts, suitable for both small personal communities and larger federated networks.\n- **Privacy and Security:** Ensures that user data remains private and secure, without advertisements or tracking common on centralized platforms.\n- **API Compatibility:** Offers an API for integration with other applications, enabling custom features and enhancements.\n- **User-Friendly Interface:** Provides an intuitive interface for navigating communities, making posts, and engaging in discussions.",
    "useCases": "- **Community Builders:** Use Lemmy to create and manage online forums for niche interests or topics, promoting user engagement and interaction.\n- **Developers:** Integrate Lemmy into existing applications to provide social features, leveraging its federated architecture.\n- **Educators:** Utilize Lemmy as a platform for academic discussions, group projects, or resource sharing in a collaborative environment.",
    "support": "- **Community Forums:** Engage with the Lemmy community for support and discussions through the [Lemmy GitHub Repository](https://github.com/LemmyNet/lemmy).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Lemmy Documentation](https://www.reddit.com/r/rust/comments/cd3m7l/github_dessalineslemmy_building_a_federated/) for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Lemmy Server’s functionalities and practical applications, emphasizing its role as a decentralized alternative to traditional social media platforms. For more detailed information, visit the [official Lemmy GitHub page](https://github.com/LemmyNet/lemmy).",
    "nixName": "lemmy",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://join-lemmy.org",
    "implemented": false,
    "logo": "https://join-lemmy.org/static/assets/icons/favicon.svg",
    "options": [
      {
        "name": "adminPasswordFile",
        "desc": "File which contains the value of setup.admin_password.",
        "nixName": "adminPasswordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "caddy.enable",
        "desc": "Whether to enable exposing lemmy with the caddy reverse proxy.",
        "nixName": "caddy.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "database.createLocally",
        "desc": "Whether to enable creation of database on the instance.",
        "nixName": "database.createLocally",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "database.uri",
        "desc": "The connection URI to use. Takes priority over the configuration file if set.",
        "nixName": "database.uri",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "database.uriFile",
        "desc": "File which contains the database uri.",
        "nixName": "database.uriFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable lemmy a federated alternative to reddit in rust.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "nginx.enable",
        "desc": "Whether to enable exposing lemmy with the nginx reverse proxy.",
        "nixName": "nginx.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "pictrsApiKeyFile",
        "desc": "File which contains the value of pictrs.api_key.",
        "nixName": "pictrsApiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "server.package",
        "desc": "The lemmy-server package to use.",
        "nixName": "server.package",
        "type": "package",
        "value": "pkgs.lemmy-server"
      },
      {
        "name": "settings",
        "desc": "Lemmy configuration",
        "nixName": "settings",
        "type": "JSON value",
        "value": "{ }"
      },
      {
        "name": "settings.captcha.difficulty",
        "desc": "The difficultly of the captcha to solve.",
        "nixName": "settings.captcha.difficulty",
        "type": "one of \"easy\", \"medium\", \"hard\"",
        "value": "\"medium\""
      },
      {
        "name": "settings.captcha.enabled",
        "desc": "Enable Captcha.",
        "nixName": "settings.captcha.enabled",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.hostname",
        "desc": "The domain name of your instance (eg ‘lemmy.ml’).",
        "nixName": "settings.hostname",
        "type": "string",
        "value": "null"
      },
      {
        "name": "settings.port",
        "desc": "Port where lemmy should listen for incoming requests.",
        "nixName": "settings.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8536"
      },
      {
        "name": "smtpPasswordFile",
        "desc": "File which contains the value of email.smtp_password.",
        "nixName": "smtpPasswordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "ui.package",
        "desc": "The lemmy-ui package to use.",
        "nixName": "ui.package",
        "type": "package",
        "value": "pkgs.lemmy-ui"
      },
      {
        "name": "ui.port",
        "desc": "Port where lemmy-ui should listen for incoming requests.",
        "nixName": "ui.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "1234"
      }
    ]
  },
  {
    "name": "Libreddit",
    "desc": "Deploy Libreddit to create a privacy-focused, open-source alternative to Reddit. Libreddit allows users to engage in discussions, share content, and connect with communities without the tracking and advertisements associated with traditional social media platforms.",
    "longDesc": "Libreddit is a self-hosted web application that provides a Reddit-like experience with an emphasis on user privacy and data ownership. It offers the core functionalities of Reddit while removing advertisements and tracking mechanisms.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Libreddit using Docker or other containerization options for quick installation.\n- **Scalability:** Designed to handle numerous users and posts, making it suitable for both personal and larger community applications.\n- **Privacy and Security:** Ensures user data is not sold or shared with third parties, providing a secure platform for discussions.\n- **API Compatibility:** Offers an API for integration with other applications, enabling custom features and functionalities.\n- **Customizable Interface:** Users can modify the appearance and features to better suit their community's needs.",
    "useCases": "- **Community Managers:** Create and manage forums or communities that prioritize user privacy and engagement without commercial influence.\n- **Developers:** Integrate Libreddit into existing platforms or build custom applications that leverage its functionality.\n- **Educators:** Use Libreddit as a platform for academic discussions and resource sharing in a controlled and private environment.",
    "support": "- **Community Forums:** Engage with the Libreddit community for support and discussions through the [Libreddit GitHub Repository](https://github.com/libreddit/libreddit).\n- **Documentation:** Comprehensive guides and user manuals are available in the repository for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Libreddit’s functionalities and practical applications, emphasizing its role in promoting privacy in social media interactions. For more detailed information, visit the [official Libreddit GitHub page](https://github.com/libreddit/libreddit).",
    "nixName": "libreddit",
    "specs": {
      "ram": 1024,
      "storage": 1024
    },
    "tags": [
      "Communication - Social Networks and Forums"
    ],
    "website": "https://github.com/redlib-org/redlib",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "address",
        "desc": "The address to listen on",
        "nixName": "address",
        "type": "string",
        "value": "\"0.0.0.0\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable Private front-end for Reddit.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for the libreddit web interface",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "The libreddit package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.libreddit"
      },
      {
        "name": "port",
        "desc": "The port to listen on",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      }
    ]
  },
  {
    "name": "Lidarr is a music collection manager for Usenet and BitTorrent users.",
    "desc": "Deploy Lidarr to manage and automate the downloading of music. Lidarr provides users with a powerful tool to track, manage, and collect their music libraries seamlessly.",
    "longDesc": "Lidarr is an open-source music collection manager designed to work similarly to Sonarr and Radarr, focusing on downloading and organizing music files from various sources automatically.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Lidarr using Docker or other package managers for a straightforward installation process.\n- **Scalability:** Capable of managing large music libraries and supporting multiple users, making it ideal for both personal collections and shared environments.\n- **Privacy and Security:** Operates locally to keep user data secure, ensuring that music files and metadata are not shared with third-party services without consent.\n- **API Compatibility:** Offers an extensive API for integration with other applications, allowing for automation and enhanced functionality.\n- **Automatic Metadata Management:** Downloads and organizes music metadata, including album artwork, track listings, and more.",
    "useCases": "- **Music Enthusiasts:** Use Lidarr to automate the management of music collections, ensuring that libraries are always up to date with the latest releases.\n- **DJs and Producers:** Manage extensive music libraries efficiently, making it easier to access tracks for performances.\n- **Developers:** Integrate Lidarr into music-related applications to enhance user experience with automated music management.",
    "support": "- **Community Forums:** Engage with the Lidarr community for support and discussions through the [Lidarr GitHub Repository](https://github.com/Lidarr/Lidarr).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Lidarr Documentation](https://lidarr.audio/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Lidarr’s functionalities and practical applications, emphasizing its role in music management. For more detailed information, visit the [official Lidarr website](https://lidarr.audio/).",
    "nixName": "lidarr",
    "specs": {
      "ram": 2048,
      "storage": 20480
    },
    "tags": [
      "Automation"
    ],
    "website": "https://lidarr.audio/",
    "implemented": false,
    "logo": "https://lidarr.audio/img/favicon.ico",
    "options": [
      {
        "name": "dataDir",
        "desc": "The directory where Lidarr stores its data files.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/lidarr/.config/Lidarr"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Lidarr, a Usenet/BitTorrent music downloader.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group under which Lidarr runs.",
        "nixName": "group",
        "type": "string",
        "value": "lidarr"
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for Lidarr",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The lidarr package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.lidarr"
      },
      {
        "name": "user",
        "desc": "User account under which Lidarr runs.",
        "nixName": "user",
        "type": "string",
        "value": "lidarr"
      }
    ]
  },
  {
    "name": "lighthouse",
    "desc": "Deploy Lighthouse to operate a secure, efficient Ethereum 2.0 beacon chain client. Lighthouse is designed for staking, allowing users to participate in the Ethereum network while providing robust performance and a user-friendly interface.",
    "longDesc": "Lighthouse is an open-source Ethereum 2.0 client developed in Rust, specifically focused on the beacon chain. It allows users to run validators, manage staking, and interact with the Ethereum 2.0 ecosystem seamlessly.\n\n**Key Features:**\n- **One-Click Deployment:** Simplifies the installation process using Docker or other container methods for quick setup.\n- **Scalability:** Designed to efficiently manage multiple validators, making it suitable for both individual users and larger staking operations.\n- **Privacy and Security:** Implements advanced security measures to protect user data and funds, ensuring a secure staking experience.\n- **API Compatibility:** Offers a REST API for integration with other applications, enhancing its usability within the Ethereum ecosystem.\n- **Comprehensive Documentation:** Extensive resources available for users to guide them through setup and operation.",
    "useCases": "- **Ethereum Validators:** Use Lighthouse to stake ETH and earn rewards while supporting the network's security and decentralization.\n- **Developers:** Integrate Lighthouse into applications that require Ethereum 2.0 functionality, such as wallets and DeFi platforms.\n- **Educators and Researchers:** Leverage Lighthouse for teaching about blockchain technology, Ethereum 2.0, and the staking process.",
    "support": "- **Community Forums:** Engage with the Lighthouse community for support and discussions through the [Lighthouse GitHub Repository](https://github.com/sigp/lighthouse).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Lighthouse Documentation](https://lighthouse-book.sigmaprime.io/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Lighthouse’s functionalities and practical applications, emphasizing its role in Ethereum 2.0 staking. For more detailed information, visit the [official Lighthouse website](https://github.com/ManticoreProject/manticore).",
    "nixName": "lighthouse",
    "specs": {
      "ram": 2000,
      "storage": 128000
    },
    "tags": [
      "Blockchain",
      "Ethereum",
      "Validator"
    ],
    "website": "https://lighthouse.sigmaprime.io/",
    "implemented": true,
    "logo": "https://lighthouse.sigmaprime.io/favicon.ico",
    "options": [
      {
        "name": "beacon",
        "desc": "Beacon node",
        "nixName": "beacon",
        "type": "submodule",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Whether to enable Lightouse Beacon node.",
            "nixName": "enable",
            "type": "boolean",
            "value": "true"
          },
          {
            "name": "dataDir",
            "desc": "Directory where data will be stored. Each chain will be stored under it’s own specific subdirectory.",
            "nixName": "dataDir",
            "type": "string",
            "value": "/var/lib/lighthouse-beacon"
          },
          {
            "name": "address",
            "desc": "Listen address of Beacon node.",
            "nixName": "address",
            "type": "string",
            "value": "0.0.0.0"
          },
          {
            "name": "port",
            "desc": "Port number the Beacon node will be listening on.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9000"
          },
          {
            "name": "openFirewall",
            "desc": "Open the port in the firewall",
            "nixName": "openFirewall",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "disableDepositContractSync",
            "desc": "Explicitly disables syncing of deposit logs from the execution node. This overrides any previous option that depends on it. Useful if you intend to run a non-validating beacon node.",
            "nixName": "disableDepositContractSync",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "execution",
            "desc": "Execution node",
            "nixName": "execution",
            "type": "submodule",
            "value": "{ }",
            "options": [
              {
                "name": "address",
                "desc": "Listen address for the execution layer.",
                "nixName": "address",
                "type": "string",
                "value": "127.0.0.1"
              },
              {
                "name": "port",
                "desc": "Port number the Beacon node will be listening on for the execution layer.",
                "nixName": "port",
                "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "value": "8551"
              },
              {
                "name": "jwtPath",
                "desc": "Path for the jwt secret required to connect to the execution layer.",
                "nixName": "jwtPath",
                "type": "string",
                "value": "/var/lib/goethereum/ethnode/mainnet/geth/jwtsecret"
              }
            ]
          },
          {
            "name": "http",
            "desc": "HTTP settings",
            "nixName": "http",
            "type": "submodule",
            "value": "{ }",
            "options": [
              {
                "name": "enable",
                "desc": "Whether to enable Beacon node http api.",
                "nixName": "enable",
                "type": "boolean",
                "value": "false"
              },
              {
                "name": "port",
                "desc": "Port number of Beacon node RPC service.",
                "nixName": "port",
                "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "value": "5052"
              },
              {
                "name": "address",
                "desc": "Listen address of Beacon node RPC service.",
                "nixName": "address",
                "type": "string",
                "value": "127.0.0.1"
              }
            ]
          },
          {
            "name": "metrics",
            "desc": "Metrics settings",
            "nixName": "metrics",
            "type": "submodule",
            "value": "{ }",
            "options": [
              {
                "name": "enable",
                "desc": "Whether to enable Beacon node prometheus metrics.",
                "nixName": "enable",
                "type": "boolean",
                "value": "false"
              },
              {
                "name": "address",
                "desc": "Listen address of Beacon node metrics service.",
                "nixName": "address",
                "type": "string",
                "value": "127.0.0.1"
              },
              {
                "name": "port",
                "desc": "Port number of Beacon node metrics service.",
                "nixName": "port",
                "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "value": "5054"
              }
            ]
          },
          {
            "name": "extraArgs",
            "desc": "Additional arguments passed to the lighthouse beacon command.",
            "nixName": "extraArgs",
            "type": "string",
            "value": ""
          }
        ]
      },
      {
        "name": "validator",
        "desc": "Validator node",
        "nixName": "validator",
        "type": "submodule",
        "value": "{ }",
        "options": [
          {
            "name": "enable",
            "desc": "Enable Lightouse Validator node.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
          },
          {
            "name": "dataDir",
            "desc": "Directory where data will be stored. Each chain will be stored under it’s own specific subdirectory.",
            "nixName": "dataDir",
            "type": "string",
            "value": "/var/lib/lighthouse-validator"
          },
          {
            "name": "beaconNodes",
            "desc": "Beacon nodes to connect to.",
            "nixName": "beaconNodes",
            "type": "list of string",
            "value": "[\n \"http://localhost:5052\"\n]"
          },
          {
            "name": "metrics",
            "desc": "Metrics settings",
            "nixName": "metrics",
            "type": "submodule",
            "value": "{ }",
            "options": [
              {
                "name": "enable",
                "desc": "Whether to enable Validator node prometheus metrics.",
                "nixName": "enable",
                "type": "boolean",
                "value": "false"
              },
              {
                "name": "address",
                "desc": "Listen address of Validator node metrics service.",
                "nixName": "address",
                "type": "string",
                "value": "127.0.0.1"
              },
              {
                "name": "port",
                "desc": "Port number of Validator node metrics service.",
                "nixName": "port",
                "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "value": "5056"
              }
            ]
          },
          {
            "name": "extraArgs",
            "desc": "Additional arguments passed to the lighthouse validator command.",
            "nixName": "extraArgs",
            "type": "string",
            "value": ""
          }
        ]
      },
      {
        "name": "network",
        "desc": "The network to connect to. Mainnet is the default ethereum network.",
        "nixName": "network",
        "type": "string",
        "value": "mainnet"
      },
      {
        "name": "extraArgs",
        "desc": "Additional arguments passed to every lighthouse command.",
        "nixName": "extraArgs",
        "type": "string",
        "value": ""
      }
    ]
  },
  {
    "name": "manticore",
    "desc": "Deploy Manticore to utilize an open-source symbolic execution tool designed for security research and analysis. Manticore allows users to analyze binaries and smart contracts, facilitating the detection of vulnerabilities and security flaws.",
    "longDesc": "Manticore is a powerful symbolic execution tool that enables automated analysis of binary executables and smart contracts. It is used primarily in security research to uncover vulnerabilities, perform formal verification, and assist in reverse engineering tasks.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Manticore using Docker or other containerization methods for rapid setup.\n- **Scalability:** Designed to handle complex analyses efficiently, making it suitable for both individual researchers and large teams.\n- **Privacy and Security:** Operates locally, ensuring sensitive data remains confidential and secure during analysis.\n- **API Compatibility:** Offers a Python API for integration with other tools and workflows, enhancing usability and flexibility.\n- **Comprehensive Reporting:** Generates detailed reports on vulnerabilities and execution paths, aiding in security assessments.",
    "useCases": "- **Security Researchers:** Utilize Manticore to analyze software for vulnerabilities, helping to improve security protocols and practices.\n- **Developers:** Perform automated testing on smart contracts to ensure they are secure before deployment on blockchain platforms.\n- **Academic Institutions:** Incorporate Manticore in courses focused on cybersecurity, teaching students about binary analysis and security research.",
    "support": "- **Community Forums:** Engage with the Manticore community for support and discussions through the [Manticore GitHub Repository](https://github.com/ManticoreProject/manticore).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Manticore Documentation](https://manticore.readthedocs.io/en/latest/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Manticore’s functionalities and practical applications, emphasizing its role in security analysis. For more detailed information, visit the [official Manticore project page](https://github.com/ManticoreProject/manticore).",
    "nixName": "manticore",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "http://manticore.cs.uchicago.edu/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable Manticoresearch.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings",
        "desc": "Configuration for Manticoresearch. See https://manual.manticoresearch.com/Server%20settings for more information.",
        "nixName": "settings",
        "type": "JSON value",
        "value": "{\n  searchd = {\n    data_dir = \"/var/lib/manticore\";\n    listen = [\n      \"127.0.0.1:9312\"\n      \"127.0.0.1:9306:mysql\"\n      \"127.0.0.1:9308:http\"\n    ];\n    log = \"/var/log/manticore/searchd.log\";\n    pid_file = \"/run/manticore/searchd.pid\";\n    query_log = \"/var/log/manticore/query.log\";\n  };\n}"
      }
    ]
  },
  {
    "name": "Manticore Search",
    "desc": "Deploy Manticore Search to implement a powerful, open-source full-text search engine optimized for speed and scalability. Manticore Search provides users with advanced search capabilities for their applications, enabling efficient data retrieval and management.",
    "longDesc": "Manticore Search is an open-source search engine designed to handle complex queries and large volumes of data with high performance. It is built on top of the Sphinx search engine, offering enhanced features and capabilities.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Manticore Search using Docker for a rapid setup and configuration process.\n- **Scalability:** Capable of handling millions of documents and high query loads, making it suitable for both small and large-scale applications.\n- **Privacy and Security:** Offers robust access controls and data encryption, ensuring the safety of user information.\n- **API Compatibility:** Provides a RESTful API for seamless integration with various applications, enabling custom search functionalities.\n- **Advanced Query Capabilities:** Supports complex querying and filtering, allowing users to perform detailed searches across their datasets.",
    "useCases": "- **Developers:** Integrate Manticore Search into applications to provide fast and reliable search functionalities for users.\n- **Enterprises:** Use Manticore Search for data management and retrieval across large databases, enhancing operational efficiency.\n- **Researchers:** Implement Manticore Search to analyze and search large datasets in academic or industry-specific research projects.",
    "support": "- **Community Forums:** Engage with the Manticore Search community for support and discussions through the [Manticore Community Forum](https://manticoresearch.com/community/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Manticore Search Documentation](https://manual.manticoresearch.com/Introduction) for detailed reference.\n- **Troubleshooting Help:** Access the [Manticore Search GitHub Repository](https://github.com/manticoresoftware/manticoresearch) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Manticore Search’s functionalities and practical applications, emphasizing its importance in implementing efficient search solutions. For more detailed information, visit the [official Manticore Search website](https://manticoresearch.com/).",
    "tags": [
      "Search Engines"
    ],
    "website": "https://manticoresearch.com",
    "implemented": false,
    "logo": "https://manticoresearch.com/images/favicon_huef5b6b9b4667cfcb07efebc9f11841a5_5793_32x0_resize_box_3.png",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "manticoresearch",
    "options": [
      {
        "name": "search/manticore.nix",
        "desc": "Whether to enable Manticoresearch.",
        "nixName": "relatedOption.manticore.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "search/manticore.nix",
        "desc": "Configuration for Manticoresearch. See https://manual.manticoresearch.com/Server%20settingsfor more information.",
        "nixName": "relatedOption.manticore.settings",
        "type": "JSON value",
        "value": "{\n  searchd = {\n    data_dir = \"/var/lib/manticore\";\n    listen = [\n      \"127.0.0.1:9312\"\n      \"127.0.0.1:9306:mysql\"\n      \"127.0.0.1:9308:http\"\n    ];\n    log = \"/var/log/manticore/searchd.log\";\n    pid_file = \"/run/manticore/searchd.pid\";\n    query_log = \"/var/log/manticore/query.log\";\n  };\n}"
      }
    ]
  },
  {
    "name": "MeshCentral",
    "desc": "Deploy MeshCentral to create a robust, open-source remote management tool that allows users to manage devices and provide support remotely. MeshCentral offers a comprehensive platform for IT administrators to monitor, control, and support their devices effectively.",
    "longDesc": "MeshCentral is a web-based remote management software that enables users to control devices over the internet. It supports various platforms, allowing users to access and manage their devices seamlessly, regardless of location.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy MeshCentral using Docker or package managers for quick setup and installation.\n- **Scalability:** Designed to handle numerous devices and users simultaneously, making it suitable for small businesses to large enterprises.\n- **Privacy and Security:** Provides encrypted communications and allows users to self-host, ensuring data remains private and secure.\n- **API Compatibility:** Features a RESTful API for integration with other systems, enabling automation and extended functionality.\n- **Cross-Platform Support:** Supports various operating systems, including Windows, Linux, and macOS, allowing for flexible device management.",
    "useCases": "- **IT Administrators:** Use MeshCentral to remotely manage and troubleshoot devices, reducing the need for physical access to systems.\n- **Support Teams:** Provide remote assistance to end-users, enabling faster resolution of technical issues.\n- **Educational Institutions:** Manage classroom devices and support students with their technology needs.",
    "support": "- **Community Forums:** Engage with the MeshCentral community for support and discussions through the [MeshCentral Forum](https://meshcentral.com/forum).\n- **Documentation:** Comprehensive guides and user manuals are available at the [MeshCentral Documentation](https://meshcentral.com/docs/) for detailed reference.\n- **Troubleshooting Help:** Access the [MeshCentral GitHub Repository](https://github.com/Ylianst/MeshCentral) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of MeshCentral’s functionalities and practical applications, emphasizing its role in remote device management. For more detailed information, visit the [official MeshCentral website](https://meshcentral.com/docs/MeshCentral2UserGuide.pdf).",
    "nixName": "meshcentral",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Remote Access"
    ],
    "website": "https://meshcentral.com/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable MeshCentral computer management server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "The meshcentral package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.meshcentral"
      },
      {
        "name": "settings",
        "desc": "Settings for MeshCentral. Refer to upstream documentation for details:  JSON Schema definition simple sample configuration complex sample configuration Old homepage with documentation link",
        "nixName": "settings",
        "type": "JSON value",
        "value": ""
      }
    ]
  },
  {
    "name": "Metabase",
    "desc": "Deploy Metabase to create a powerful business intelligence tool that allows users to visualize data, generate insights, and make data-driven decisions effortlessly. Metabase provides an intuitive interface for querying databases without the need for extensive technical knowledge.",
    "longDesc": "Metabase is an open-source analytics platform that enables users to connect to various databases, create visualizations, and generate reports easily. It is designed for simplicity, allowing even non-technical users to explore and understand their data.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Metabase using Docker, simplifying the installation and configuration process.\n- **Scalability:** Supports a wide range of databases and large datasets, making it suitable for both small startups and large enterprises.\n- **Privacy and Security:** Ensures that sensitive data remains secure with role-based access controls and data encryption.\n- **API Compatibility:** Offers a RESTful API for integration with other applications, enabling automated reporting and data management.\n- **User-Friendly Interface:** Features an easy-to-use interface for creating dashboards, visualizations, and reports without requiring programming skills.",
    "useCases": "- **Data Analysts:** Utilize Metabase to explore datasets, generate reports, and share insights across teams.\n- **Businesses:** Implement Metabase to track key performance indicators (KPIs) and make informed business decisions based on real-time data.\n- **Educators:** Use Metabase for analyzing student performance data and visualizing educational metrics to enhance teaching strategies.",
    "support": "- **Community Forums:** Engage with the Metabase community for support and discussions through the [Metabase Community Forum](https://discuss.metabase.com/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Metabase Documentation](https://www.metabase.com/docs/latest/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on [Metabase GitHub Repository](https://github.com/metabase/metabase) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Metabase’s functionalities and practical applications, emphasizing its role in data visualization and business intelligence. For more detailed information, visit the [official Metabase website](https://www.metabase.com/).",
    "nixName": "metabase",
    "specs": {
      "ram": 1000,
      "storage": 10000
    },
    "tags": [
      "Analytics"
    ],
    "website": "https://metabase.com",
    "implemented": false,
    "logo": "https://metabase.com/images/favicon.ico",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable Metabase service.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "listen.ip",
        "desc": "IP address that Metabase should listen on.",
        "nixName": "listen.ip",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "listen.port",
        "desc": "Listen port for Metabase.",
        "nixName": "listen.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3000"
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for Metabase.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "ssl.enable",
        "desc": "Whether to enable SSL (https) support.",
        "nixName": "ssl.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "ssl.keystore",
        "desc": "Java KeyStore file containing the certificates.",
        "nixName": "ssl.keystore",
        "type": "null or path",
        "value": "\"/var/lib/metabase/metabase.jks\""
      },
      {
        "name": "ssl.port",
        "desc": "Listen port over SSL (https) for Metabase.",
        "nixName": "ssl.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8443"
      }
    ]
  },
  {
    "name": "Minecraft Server",
    "desc": "Deploy and run your own Minecraft Server to host a multiplayer world, enabling players to connect and explore together. Customize gameplay, control server settings, and ensure uptime with decentralized infrastructure via Xnode.",
    "longDesc": "**Overview**\n\nDeploy and run your own Minecraft Server to host a multiplayer world, enabling players to connect and explore together. Customize gameplay, control server settings, and ensure uptime with decentralized infrastructure via Xnode.\n\n**Key Features:**\n\n- **Custom Worlds:** Create unique worlds with gameplay tailored to your community's preferences.\n- **Cross-Platform Access:** Allow players from different devices (PC, console, or mobile) to connect.\n- **Mod & Plugin Support:** Integrate plugins or mods to extend functionality and add new content.\n- **Decentralized Hosting:** Leverage Xnode’s decentralized infrastructure for better uptime and cost-efficiency.\n- **Secure Access:** Protect your server with whitelists, authentication plugins, and encrypted connections.",
    "useCases": "- **Gaming Communities:** Build private or public servers for friends, communities, or streaming.\n- **Education:** Use Minecraft for classroom engagement with educational mods.\n- **Event Hosting:** Run competitions, challenges, or events within your server.",
    "support": "- **Community Channels:**\n   - **Official Minecraft Forums:** [Minecraft Forum](https://www.minecraftforum.net/)\n   - **Reddit Communities:** Minecraft and admincraft for technical support.\n- **FAQs & Troubleshooting:**\n   - **Minecraft Server FAQ:** [Minecraft Server FAQ](https://minecraft.fandom.com/wiki/Tutorials/Setting_up_a_server)\n   - **Direct Assistance:**\n     - Contact Xnode support for issues with infrastructure or deployment.\n     - Use [Minecraft Help Center](https://help.minecraft.net/hc/en-us) for Minecraft-specific queries.",
    "nixName": "minecraft-server",
    "specs": {
      "ram": 2000,
      "storage": 4000
    },
    "tags": [
      "Gaming"
    ],
    "website": "https://minecraft.net",
    "implemented": true,
    "logo": "https://www.minecraft.net/content/dam/minecraftnet/games/minecraft/logos/Homepage_Gameplay-Trailer_MC-OV-logo_300x300.png",
    "options": [
      {
        "name": "dataDir",
        "desc": "Directory to store Minecraft database and other state/data files.",
        "nixName": "dataDir",
        "type": "path",
        "value": "\"/var/lib/minecraft\""
      },
      {
        "name": "declarative",
        "desc": "Whether to use a declarative Minecraft server configuration. Only if set to true, the options services.minecraft-server.whitelist and services.minecraft-server.serverProperties will be applied.",
        "nixName": "declarative",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enable",
        "desc": "If enabled, start a Minecraft Server. The server data will be loaded from and saved to services.minecraft-server.dataDir.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "eula",
        "desc": "Whether you agree to  Mojangs EULA. This option must be set to true to run Minecraft server.",
        "nixName": "eula",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "jvmOpts",
        "desc": "JVM options for the Minecraft server.",
        "nixName": "jvmOpts",
        "type": "strings concatenated with \" \"",
        "value": "\"-Xmx2048M -Xms2048M\""
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open ports in the firewall for the server.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "serverProperties",
        "desc": "Minecraft server properties for the server.properties file. Only has an effect when services.minecraft-server.declarative is set to true. See https://minecraft.gamepedia.com/Server.properties#Java_Edition_3 for documentation on these values.",
        "nixName": "serverProperties",
        "type": "attribute set of (boolean or signed integer or string)",
        "value": "{ }",
        "options": [
          {
            "name": "allow-flight",
            "nixName": "allow-flight",
            "type": "boolean",
            "value": "false",
            "desc": "Allows users to use flight on the server while in Survival mode, if they have a [[mod]] that provides flight installed.With allow-flight enabled, [[griefers]] may become more common, because it makes their work easier. In Creative mode, this has no effect.:'''false''' - Flight is not allowed (players in air for at least 5 seconds get kicked).:'''true''' - Flight is allowed, and used if the player has a fly mod installed."
          },
          {
            "name": "allow-nether",
            "nixName": "allow-nether",
            "type": "boolean",
            "value": "true",
            "desc": "Allows players to travel to the [[Nether]].:'''false''' - [[Nether]] portals do not work.:'''true''' - The server allows [[portal]]s to send players to the Nether."
          },
          {
            "name": "broadcast-console-to-ops",
            "nixName": "broadcast-console-to-ops",
            "type": "boolean",
            "value": "true",
            "desc": "Send console command outputs to all [[Server#Managing_and_maintaining_a_server online operators]]."
          },
          {
            "name": "broadcast-rcon-to-ops",
            "nixName": "broadcast-rcon-to-ops",
            "type": "boolean",
            "value": "true",
            "desc": "Send rcon console command outputs to all online operators."
          },
          {
            "name": "difficulty",
            "nixName": "difficulty",
            "type": "string",
            "value": "easy",
            "desc": "Defines the [[difficulty]] (such as damage dealt by mobs and the way hunger and poison affects players) of the server.If a legacy difficulty number is specified, it is silently converted to a difficulty name.:'''peaceful''' (0):'''easy''' (1):'''normal''' (2):'''hard''' (3)"
          },
          {
            "name": "enable-command-block",
            "nixName": "enable-command-block",
            "type": "boolean",
            "value": "false",
            "desc": "Enables command blocks"
          },
          {
            "name": "enable-jmx-monitoring",
            "nixName": "enable-jmx-monitoring",
            "type": "boolean",
            "value": "false",
            "desc": "Exposes an MBean with the Object name <code>net.minecraft.server:type=Server</code> and two attributes <code>averageTickTime</code> and <code>tickTimes</code> exposing the tick times in milliseconds.In order for enabling JMX on the Java runtime you also need to add a couple of JVM flags to the startup as documented [https://docs.oracle.com/javase/8/docs/technotes/guides/management/agent.html here]."
          },
          {
            "name": "enable-rcon",
            "nixName": "enable-rcon",
            "type": "boolean",
            "value": "false",
            "desc": "Enables remote access to the server console.* It's not recommended to expose RCON to the Internet, because RCON protocol transfers everything without encryption. Everything (including RCON password) communicated between the RCON server and client can be leaked to someone listening in on your connection."
          },
          {
            "name": "enable-status",
            "nixName": "enable-status",
            "type": "boolean",
            "value": "true",
            "desc": "Makes the server appear as \"online\" on the server list.If set to false, it will suppress replies from clients. This means it will appear as offline, but will still accept connections."
          },
          {
            "name": "enable-query",
            "nixName": "enable-query",
            "type": "boolean",
            "value": "false",
            "desc": "Enables GameSpy4 protocol server listener. Used to get information about server."
          },
          {
            "name": "enforce-secure-profile",
            "nixName": "enforce-secure-profile",
            "type": "boolean",
            "value": "true",
            "desc": "If set to '''true''', players without a Mojang-signed public key will not be able to connect to the server."
          },
          {
            "name": "enforce-whitelist",
            "nixName": "enforce-whitelist",
            "type": "boolean",
            "value": "false",
            "desc": "Enforces the whitelist on the server.When this option is enabled, users who are not present on the whitelist (if it's enabled) get kicked from the server after the server reloads the whitelist file.:'''false''' - No user gets kicked if not on the whitelist.:'''true''' - Online users not on the whitelist get kicked."
          },
          {
            "name": "entity-broadcast-range-percentage",
            "nixName": "entity-broadcast-range-percentage",
            "type": "integer (10-1000)",
            "value": "100",
            "desc": "Controls how close entities need to be before being sent to clients. Higher values means they'll be rendered from farther away, potentially causing more lag. This is expressed the percentage of the default value. For example, setting to 50 will make it half as usual. This mimics the function on the client video settings (not unlike Render Distance, which the client can customize so long as it's under the server's setting)."
          },
          {
            "name": "force-gamemode",
            "nixName": "force-gamemode",
            "type": "boolean",
            "value": "false",
            "desc": "Force players to join in the default [[game mode]].:'''false''' - Players join in the gamemode they left in.:'''true''' - Players always join in the default gamemode."
          },
          {
            "name": "function-permission-level",
            "nixName": "function-permission-level",
            "type": "integer (1-4)",
            "value": "2",
            "desc": "Sets the default permission level for [[Function (Java Edition) functions]].See [[permission level]] for the details on the 4 levels."
          },
          {
            "name": "gamemode",
            "nixName": "gamemode",
            "type": "string",
            "value": "survival",
            "desc": "Defines the [[game mode mode of gameplay]].If a legacy gamemode number is specified, it is silently converted to a gamemode name.:'''[[survival]]''' (0):'''[[creative]]''' (1):'''[[adventure]]''' (2):'''[[spectator]]''' (3)"
          },
          {
            "name": "generate-structures",
            "nixName": "generate-structures",
            "type": "boolean",
            "value": "true",
            "desc": "Defines whether [[structures]] (such as villages) can be generated.:'''false''' - Structures are not generated in new chunks.:'''true''' - Structures are generated in new chunks.'''Note:''' ''Dungeons still generate if this is set to false.''"
          },
          {
            "name": "hardcore",
            "nixName": "hardcore",
            "type": "boolean",
            "value": "false",
            "desc": "If set to '''true''', server difficulty is ignored and set to hard and players are set to spectator mode if they die."
          },
          {
            "name": "hide-online-players",
            "nixName": "hide-online-players",
            "type": "boolean",
            "value": "false",
            "desc": "If set to '''true''', a player list is not sent on status requests."
          },
          {
            "name": "initial-disabled-packs",
            "nixName": "initial-disabled-packs",
            "type": "string",
            "value": "",
            "desc": "Comma-separated list of datapacks to not be auto-enabled on world creation."
          },
          {
            "name": "initial-enabled-packs",
            "nixName": "initial-enabled-packs",
            "type": "string",
            "value": "vanilla",
            "desc": "Comma-separated list of datapacks to be enabled during world creation. Feature packs need to be explicitly enabled."
          },
          {
            "name": "level-name",
            "nixName": "level-name",
            "type": "string",
            "value": "world",
            "desc": "The \"level-name\" value is used as the world name and its folder name. The player may also copy their saved game folder here, and change the name to the same as that folder's to load it instead.:Characters such as ' (apostrophe) may need to be escaped by adding a backslash before them."
          },
          {
            "name": "level-seed",
            "nixName": "level-seed",
            "type": "string",
            "value": "",
            "desc": "Sets a world [[Seed (level generation) seed]] for the player's world, as in Singleplayer. The world generates with a random seed if left blank.:Some examples are: minecraft, 404, 1a2b3c."
          },
          {
            "name": "level-type",
            "nixName": "level-type",
            "type": "string",
            "value": "minecraft:normal",
            "desc": "Determines the world preset that is generated.Escaping \":\" is required when using a world preset ID, and the vanilla world preset ID's namespace ({{cd minecraft:}}) can be omitted.:'''minecraft:normal''' - Standard world with hills, valleys, water, etc.:'''minecraft:[[Superflat flat]]''' - A flat world with no features, can be modified with '''generator-settings'''.:'''minecraft:[[Large Biomes large_biomes]]''' - Same as default but all biomes are larger.:'''minecraft:[[amplified]]''' - Same as default but world-generation height limit is increased.:'''minecraft:[[Single Biome single_biome_surface]]''' - A buffet world which the entire overworld consists of one biome, can be modified with '''generator-settings'''.:'''[[buffet]]''' - Only for 1.15 or before. Same as default unless '''generator-settings''' is set.:'''default_1_1''' - Only for 1.15 or before. Same as default, but counted as a different world type.:'''[[Old Customized customized]]''' - Only for 1.15 or before. After 1.13, this value is no different than default, but in 1.12 and before, it could be used to create a completely custom world."
          },
          {
            "name": "max-chained-neighbor-updates",
            "nixName": "max-chained-neighbor-updates",
            "type": "integer{{more info the valid range}}",
            "value": "1000000",
            "desc": "Limiting the amount of consecutive neighbor updates before skipping additional ones. Negative values remove the limit."
          },
          {
            "name": "max-players",
            "nixName": "max-players",
            "type": "integer (0-(2^31 - 1))",
            "value": "20",
            "desc": "The maximum number of players that can play on the server at the same time. Note that more players on the server consume more resources. Note also, op player connections are not supposed to count against the max players, but ops currently cannot join a full server. However, this can be changed by going to the file called ops.json in the player's server directory, opening it, finding the op that the player wants to change, and changing the setting called bypassesPlayerLimit to true (the default is false). This means that that op does not have to wait for a player to leave in order to join. Extremely large values for this field result in the client-side user list being broken."
          },
          {
            "name": "max-tick-time",
            "nixName": "max-tick-time",
            "type": "integer (-1 or 0–(2^63 - 1))",
            "value": "60000",
            "desc": "The maximum number of milliseconds a single tick may take before the server watchdog stops the server with the message, ''A single server tick took 60.00 seconds (should be max 0.05); Considering it to be crashed, server will forcibly shutdown.'' Once this criterion is met, it calls System.exit(1).:'''-1''' - disable watchdog entirely (this disable option was added in 14w32a)"
          },
          {
            "name": "max-world-size",
            "nixName": "max-world-size",
            "type": "integer (1-29999984)",
            "value": "29999984",
            "desc": "This sets the maximum possible size in blocks, expressed as a radius, that the [[world border]] can obtain. Setting the world border bigger causes the commands to complete successfully but the actual border does not move past this block limit. Setting the max-world-size higher than the default doesn't appear to do anything. Examples: *Setting max-world-size to 1000 allows the player to have a 2000×2000 world border.*Setting max-world-size to 4000 gives the player an 8000×8000 world border."
          },
          {
            "name": "motd",
            "nixName": "motd",
            "type": "string",
            "value": "Minecraft Server running on §dXnode",
            "desc": "This is the message that is displayed in the server list of the client, below the name.* The MOTD supports [[Formatting codes#Use in server.properties and pack.mcmeta color and formatting codes]].* If the MOTD is over 59 characters, the server list may report a communication error."
          },
          {
            "name": "network-compression-threshold",
            "nixName": "network-compression-threshold",
            "type": "integer",
            "value": "256",
            "desc": "By default it allows packets that are ''n-1'' bytes big to go normally, but a packet of ''n'' bytes or more gets compressed down. So, a lower number means more compression but compressing small amounts of bytes might actually end up with a larger result than what went in.:'''-1''' - disable compression entirely:'''0''' - compress everything'''Note:''' ''The Ethernet spec requires that packets less than 64 bytes become padded to 64 bytes. Thus, setting a value lower than 64 may not be beneficial. It is also not recommended to exceed the MTU, typically 1500 bytes.''"
          },
          {
            "name": "online-mode",
            "nixName": "online-mode",
            "type": "boolean",
            "value": "true",
            "desc": "Server checks connecting players against ''Minecraft'' account database. Set this to false only if the player's server is '''not''' connected to the Internet. Hackers with fake accounts can connect if this is set to false! If minecraft.net is down or inaccessible, no players can connect if this is set to true. Setting this variable to off purposely is called \"cracking\" a server, and servers that are present with online mode off are called \"cracked\" servers, allowing players with unlicensed copies of ''[[Minecraft]]'' to join.:'''true''' - Enabled. The server assumes it has an Internet connection and checks every connecting player.:'''false''' - Disabled. The server does not attempt to check connecting players."
          },
          {
            "name": "op-permission-level",
            "nixName": "op-permission-level",
            "type": "integer (0-4)",
            "value": "4",
            "desc": "Sets the default [[permission level]] for ops when using {{cmd op}}."
          },
          {
            "name": "player-idle-timeout",
            "nixName": "player-idle-timeout",
            "type": "integer",
            "value": "0",
            "desc": "If non-zero, players are kicked from the server if they are idle for more than that many minutes. :'''Note:''' ''Idle time is reset when the server receives one of the following packets:'':*[http://wiki.vg/Protocol#Click_Window Click Window]:*[http://wiki.vg/Protocol#Enchant_Item Enchant Item]:*[http://wiki.vg/Protocol#Update_Sign Update Sign]:*[http://wiki.vg/Protocol#Player_Digging Player Digging]:*[http://wiki.vg/Protocol#Player_Block_Placement Player Block Placement]:*[http://wiki.vg/Protocol#Held_Item_Change_.28serverbound.29 Held Item Change]:*[http://wiki.vg/Protocol#Animation_.28serverbound.29 Animation] (swing arm):*[http://wiki.vg/Protocol#Entity_Action Entity Action]:*[http://wiki.vg/Protocol#Client_Status Client Status]:*[http://wiki.vg/Protocol#Chat_Message_.28serverbound.29 Chat Message]:*[http://wiki.vg/Protocol#Use_Entity Use Entity]"
          },
          {
            "name": "prevent-proxy-connections",
            "nixName": "prevent-proxy-connections",
            "type": "boolean",
            "value": "false",
            "desc": "If the ISP/AS sent from the server is different from the one from Mojang Studios' authentication server, the player is kicked."
          },
          {
            "name": "previews-chat",
            "nixName": "previews-chat",
            "type": "boolean",
            "value": "false",
            "desc": "If set to '''true''', chat preview will be enabled.:'''true''' - Enabled. When enabled, a server-controlled preview appears above the chat edit box, showing how the message will look when sent.:'''false''' - Disabled."
          },
          {
            "name": "pvp",
            "nixName": "pvp",
            "type": "boolean",
            "value": "true",
            "desc": "Enable PvP on the server. Players shooting themselves with arrows receive damage only if PvP is enabled.:'''true''' - Players can kill each other.:'''false''' - Players cannot kill other players (also known as '''Player versus Environment''' ('''PvE''')).'''Note:''' ''Indirect damage sources spawned by players (such as [[lava]], [[fire]], [[TNT]] and to some extent [[water]], [[sand]] and [[gravel]]) still deal damage to other players.''"
          },
          {
            "name": "query.port",
            "nixName": "\"query.port\"",
            "type": "integer (1-(2^16 - 2))",
            "value": "25565",
            "desc": "Sets the port for the query server (see '''enable-query''')."
          },
          {
            "name": "rate-limit",
            "nixName": "rate-limit",
            "type": "integer",
            "value": "0",
            "desc": "Sets the maximum amount of packets a user can send before getting kicked. Setting to 0 disables this feature."
          },
          {
            "name": "rcon.password",
            "nixName": "\"rcon.password\"",
            "type": "string",
            "value": "",
            "desc": "Sets the password for RCON: a remote console protocol that can allow other applications to connect and interact with a ''Minecraft'' server over the internet."
          },
          {
            "name": "rcon.port",
            "nixName": "\"rcon.port\"",
            "type": "integer (1-(2^16 - 2))",
            "value": "25575",
            "desc": "Sets the RCON network port."
          },
          {
            "name": "resource-pack",
            "nixName": "resource-pack",
            "type": "string",
            "value": "",
            "desc": "Optional URI to a [[resource pack]]. The player may choose to use it. Note that (in some versions before 1.15.2), the \":\" and \"=\" characters need to be escaped with a backslash (\\), e.g. http\\://somedomain.com/somepack.zip?someparam\\=somevalueThe resource pack may not have a larger file size than 250 MiB (Before 1.18: 100 MiB (≈ 100.8 MB)) (Before 1.15: 50 MiB (≈ 50.4 MB)). Note that download success or failure is logged by the client, and not by the server."
          },
          {
            "name": "resource-pack-prompt",
            "nixName": "resource-pack-prompt",
            "type": "string",
            "value": "",
            "desc": "{{Anchor resource-pack-prompt}}Optional, adds a custom message to be shown on resource pack prompt when <code>require-resource-pack</code> is used.Expects chat component syntax, can contain multiple lines."
          },
          {
            "name": "resource-pack-sha1",
            "nixName": "resource-pack-sha1",
            "type": "string",
            "value": "",
            "desc": "{{Anchor resource-pack-hash}} Optional SHA-1 digest of the resource pack, in lowercase hexadecimal. It is recommended to specify this, because it is used to verify the integrity of the resource pack.'''Note:''' If the resource pack is any different, a yellow message \"Invalid sha1 for resource-pack-sha1\" appears in the console when the server starts. Due to the nature of hash functions, errors have a tiny probability of occurring, so this consequence has no effect."
          },
          {
            "name": "require-resource-pack",
            "nixName": "require-resource-pack",
            "type": "boolean",
            "value": "false",
            "desc": "{{Anchor resource-pack-hash}}When this option is enabled (set to true), players will be prompted for a response and will be disconnected if they decline the required pack."
          },
          {
            "name": "server-ip",
            "nixName": "server-ip",
            "type": "string",
            "value": "",
            "desc": "The player should set this if they want the server to bind to a particular IP. It is strongly recommended that the player leaves server-ip blank.:Set to blank, or the IP the player want their server to run (listen) on."
          },
          {
            "name": "server-port",
            "nixName": "server-port",
            "type": "integer (1-(2^16 - 2))",
            "value": "25565",
            "desc": "Changes the port the server is hosting (listening) on. This port must be [[wikipedia:Port forwarding forwarded]] if the server is hosted in a network using [[wikipedia:Network address translation NAT]] (if the player has a home router/firewall)."
          },
          {
            "name": "simulation-distance",
            "nixName": "simulation-distance",
            "type": "integer (3-32)",
            "value": "10",
            "desc": "Sets the maximum distance from players that living entities may be located in order to be updated by the server, measured in chunks in each direction of the player (radius, not diameter). If entities are outside of this radius, then they will not be ticked by the server nor will they be visible to players.''10 is the default/recommended. If the player has major lag, this value is recommended to be reduced.''"
          },
          {
            "name": "snooper-enabled",
            "nixName": "snooper-enabled",
            "type": "boolean",
            "value": "true",
            "desc": "Sets whether the server sends snoop data regularly to http://snoop.minecraft.net.:'''false''' - disable snooping.:'''true''' - enable snooping."
          },
          {
            "name": "spawn-animals",
            "nixName": "spawn-animals",
            "type": "boolean",
            "value": "true",
            "desc": "Determines if [[animal]]s can spawn.:'''true''' - Animals spawn as normal.:'''false''' - Animals immediately vanish.''If the player has major lag, it is recommended to turn this off/set to false.''"
          },
          {
            "name": "spawn-monsters",
            "nixName": "spawn-monsters",
            "type": "boolean",
            "value": "true",
            "desc": "Determines if monsters can spawn.:'''true''' - Enabled. Monsters appear at night and in the dark.:'''false''' - Disabled. No monsters.This setting has no effect if difficulty = 0 (peaceful). If difficulty is not = 0, a monster can still spawn from a [[monster spawner]].''If the player has major lag, it is recommended to turn this off/set to false.''"
          },
          {
            "name": "spawn-npcs",
            "nixName": "spawn-npcs",
            "type": "boolean",
            "value": "true",
            "desc": "Determines whether villagers can spawn.:'''true''' - Enabled. Villagers spawn.:'''false''' - Disabled. No villagers."
          },
          {
            "name": "spawn-protection",
            "nixName": "spawn-protection",
            "type": "integer",
            "value": "16",
            "desc": "Determines the side length of the square [[spawn protection]] area as 2''x''+1. Setting this to 0 disables the spawn protection. A value of 1 protects a 3×3 square centered on the spawn point. 2 protects 5×5, 3 protects 7×7, etc. This option is not generated on the first server start and appears when the first player joins. If there are no [[Server#Managing_and_maintaining_a_server ops]] set on the server, the spawn protection is disabled automatically as well."
          },
          {
            "name": "sync-chunk-writes",
            "nixName": "sync-chunk-writes",
            "type": "boolean",
            "value": "true",
            "desc": "Enables synchronous chunk writes."
          },
          {
            "name": "use-native-transport",
            "nixName": "use-native-transport",
            "type": "boolean",
            "value": "true",
            "desc": "Linux server performance improvements: optimized packet sending/receiving on Linux:'''true''' - Enabled. Enable Linux packet sending/receiving optimization:'''false''' - Disabled. Disable Linux packet sending/receiving optimization"
          },
          {
            "name": "view-distance",
            "nixName": "view-distance",
            "type": "integer (3-32)",
            "value": "10",
            "desc": "Sets the amount of world data the server sends the client, measured in chunks in each direction of the player (radius, not diameter). It determines the server-side viewing distance.''10 is the default/recommended. If the player has major lag, this value is recommended to be reduced.''"
          }
        ]
      },
      {
        "name": "whitelist",
        "desc": "Whitelisted players, only has an effect when services.minecraft-server.declarative is true and the whitelist is enabled via services.minecraft-server.serverProperties by setting white-list to true. This is a mapping from Minecraft usernames to UUIDs. You can use https://mcuuid.net/ to get a Minecraft UUID for a username.",
        "nixName": "whitelist",
        "type": "attribute set of Minecraft UUID",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "MongoDB",
    "desc": "Deploy MongoDB to create a powerful, scalable, and flexible NoSQL database solution that allows users to efficiently store and manage unstructured data. MongoDB is widely used for high-performance applications, thanks to its document-oriented storage and horizontal scalability.",
    "longDesc": "MongoDB is an open-source NoSQL database that provides high performance, high availability, and easy scalability. It enables users to store and manage large volumes of unstructured data, making it ideal for modern applications.\n\n**Key Features:**\n- **Document-Oriented Storage:** Uses BSON format to store data as JSON-like documents, allowing for flexible and dynamic schemas.\n- **Scalability:** Supports horizontal scaling through sharding, distributing data across multiple machines to handle increased load and storage requirements.\n- **High Performance:** Delivers fast read and write operations with in-memory storage, indexing, and rich query capabilities.\n- **High Availability:** Provides replication with automatic failover and data redundancy to ensure continuous availability.\n- **Aggregation Framework:** Supports advanced data processing and analysis through powerful aggregation operations.",
    "useCases": "- **Real-Time Analytics:** Use MongoDB for real-time data analysis and insights in applications such as social media platforms and IoT.\n- **Content Management:** Implement MongoDB for managing and storing large amounts of unstructured content, like documents, images, and videos.\n- **E-Commerce:** Utilize MongoDB for handling product catalogs, customer data, and transaction histories in online shopping platforms.",
    "support": "- **Community Forums:** Engage with the MongoDB community for support and discussions through the [MongoDB Community Forums](https://community.mongodb.com/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [MongoDB Documentation](https://docs.mongodb.com/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on the [MongoDB GitHub Repository](https://github.com/mongodb/mongo) to report bugs and find community-contributed solutions.\n This template provides an overview of MongoDB's functionalities and practical applications, emphasizing its role as a leading NoSQL database solution for modern applications. For more detailed information, visit the official [MongoDB website.](https://www.mongodb.com/) ",
    "nixName": "mongodb",
    "specs": {
      "ram": 500,
      "storage": 100
    },
    "tags": [
      "Database"
    ],
    "website": "https://www.mongodb.com/",
    "implemented": true,
    "logo": "https://www.mongodb.com/assets/images/global/favicon.ico",
    "options": [
      {
        "name": "enable",
        "desc": "Enable the MongoDB server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "Version of MongoDB server to run.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.mongodb-ce"
      },
      {
        "name": "user",
        "desc": "User account under which MongoDB runs",
        "nixName": "user",
        "type": "string",
        "value": "mongodb"
      },
      {
        "name": "bind_ip",
        "desc": "IP to bind to.",
        "nixName": "bind_ip",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "bind_ip_all",
        "desc": "Allow connections from any ip.",
        "nixName": "bind_ip_all",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "quiet",
        "desc": "Quieter output.",
        "nixName": "quiet",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "dbpath",
        "desc": "Location where MongoDB stores its files.",
        "nixName": "dbpath",
        "type": "string",
        "value": "/var/db/mongodb"
      },
      {
        "name": "pidFile",
        "desc": "Location of MongoDB pid file.",
        "nixName": "pidFile",
        "type": "string",
        "value": "/run/mongodb.pid"
      },
      {
        "name": "replSetName",
        "desc": "If this instance is part of a replica set, set its name here. Otherwise, leave empty to run as single node.",
        "nixName": "replSetName",
        "type": "string",
        "value": ""
      },
      {
        "name": "extraConfig",
        "desc": "MongoDB extra configuration in YAML format.",
        "nixName": "extraConfig",
        "type": "string",
        "value": ""
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open ports in the firewall for this application.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      }
    ]
  },
  {
    "name": "Munin",
    "desc": "Deploy Munin to monitor system performance and visualize resource usage over time. Munin provides a simple way to track and analyze metrics, helping users to identify trends and troubleshoot potential issues.",
    "longDesc": "Munin is an open-source monitoring tool that provides insights into system performance, including CPU, memory, network usage, and more. It generates detailed graphs and alerts users when thresholds are exceeded, making it a valuable tool for system administrators.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Munin using Docker or package managers for straightforward installation and configuration.\n- **Scalability:** Can monitor multiple nodes and resources, making it suitable for small setups or larger infrastructures.\n- **Privacy and Security:** Operates locally on users’ servers, ensuring that monitoring data remains private and secure.\n- **API Compatibility:** Integrates with various tools and applications, allowing for automated monitoring and reporting.\n- **Graphical Visualization:** Provides rich visualizations of metrics through an easy-to-navigate web interface.",
    "useCases": "- **System Administrators:** Use Munin to monitor server health, optimize performance, and prevent outages through proactive alerts.\n- **Developers:** Integrate Munin into development workflows to analyze application performance and resource usage during testing.\n- **Enterprises:** Implement Munin for IT infrastructure monitoring, ensuring systems run smoothly and efficiently across departments.",
    "support": "- **Community Forums:** Engage with the Munin community for support and discussions through the [Munin Users Mailing List](https://munin-monitoring.org/) and related forums.\n- **Documentation:** Comprehensive guides and user manuals are available at the [Munin Documentation](https://munin-monitoring.org/documentation/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on [Munin GitHub Repository](https://github.com/munin-monitoring/munin) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Munin’s functionalities and practical applications, emphasizing its role in system monitoring and performance management. For more detailed information, visit the [official Munin website](https://munin-monitoring.org/).",
    "tags": [
      "Monitoring"
    ],
    "website": "https://munin-monitoring.org/",
    "implemented": false,
    "logo": "https://munin-monitoring.org/assets/favicons/favicon-32x32.png",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "munin",
    "options": [
      {
        "name": "monitoring/munin.nix",
        "desc": "Enable munin-cron. Takes care of all heavy lifting to collect datafrom nodes and draws graphs to html. Runs munin-update, munin-limits,munin-graphs and munin-html in that order.HTML output is in /var/www/munin/, configure your favourite webserverto serve static files.",
        "nixName": "relatedOption.munin-cron.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Munin plugins to disable, even ifmunin-node-configure --suggest tries to enable them. Todisable a wildcard plugin, use an actual wildcard, as in theexample.munin_stats is disabled by default as it tries to read/var/log/munin/munin-update.log for timing information, andthe NixOS build of Munin does not write this file.",
        "nixName": "relatedOption.munin-node.disabledPlugins",
        "type": "list of string",
        "value": "[\n  \"munin_stats\"\n]"
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "munin-node.confextra configuration. See https://guide.munin-monitoring.org/en/latest/reference/munin-node.conf.html",
        "nixName": "relatedOption.munin-node.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Custom styling for the HTML that munin-cron generates. This will beappended to the CSS files used by munin-cron and will thus takeprecedence over the builtin styles.",
        "nixName": "relatedOption.munin-cron.extraCSS",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Enable Munin Node agent. Munin node listens on 0.0.0.0 and by defaultaccepts connections only from 127.0.0.1 for security reasons.See https://guide.munin-monitoring.org/en/latest/architecture/index.html.",
        "nixName": "relatedOption.munin-node.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Additional Munin plugins to autoconfigure, usingmunin-node-configure --suggest. These should be the actualpaths to the plugin files (or directories containing them), not justtheir names.If you want to manually enable individual plugins instead, use services.munin-node.extraPlugins.Note that only plugins that have the ‘autoconfig’ capability will doanything if listed here, since plugins that cannot autoconfigure won’tbe automatically enabled by munin-node-configure.Plugins will be copied into the Nix store, and it will attempt tomodify them to run properly by fixing hardcoded references to/bin, /usr/bin, /sbin, and/usr/sbin.",
        "nixName": "relatedOption.munin-node.extraAutoPlugins",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Additional Munin plugins to activate. Keys are the name of the pluginsymlink, values are the path to the underlying plugin script. You canuse the same plugin script multiple times (e.g. for wildcardplugins).Note that these plugins do not participate in autoconfiguration. Ifyou want to autoconfigure additional plugins, use services.munin-node.extraAutoPlugins.Plugins enabled in this manner take precedence over autoconfiguredplugins.Plugins will be copied into the Nix store, and it will attempt tomodify them to run properly by fixing hardcoded references to/bin, /usr/bin, /sbin, and/usr/sbin.",
        "nixName": "relatedOption.munin-node.extraPlugins",
        "type": "attribute set of path",
        "value": "{ }"
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "munin.conf extraglobal configuration. See https://guide.munin-monitoring.org/en/latest/reference/munin.conf.html.Useful to setup notifications, see https://guide.munin-monitoring.org/en/latest/tutorial/alert.html",
        "nixName": "relatedOption.munin-cron.extraGlobalConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "plugin-conf.d extraplugin configuration. See https://guide.munin-monitoring.org/en/latest/plugin/use.html",
        "nixName": "relatedOption.munin-node.extraPluginConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "monitoring/munin.nix",
        "desc": "Definitions of hosts of nodes to collect data from. Needs at leastone host for cron to succeed. See https://guide.munin-monitoring.org/en/latest/reference/munin.conf.html",
        "nixName": "relatedOption.munin-cron.hosts",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      }
    ]
  },
  {
    "name": "Near Protocol Node",
    "desc": "A Near Protocol node for participating in the Near network",
    "longDesc": "The Near Protocol Node is a crucial component for participating in the Near blockchain network. By running a node, users can contribute to the network's security and decentralization. The node allows for transaction validation, block production (for validators), and provides access to the network's data for developers and users. This deployment uses Docker to simplify the setup process, making it accessible for both beginners and experienced users. Key features include:\n- **Network Participation:** Connect to mainnet, testnet, or betanet.\n- **Configurable Parameters:** Adjust settings like boot nodes, minimum peers, and RPC address.\n- **Data Persistence:** Uses a volume to store node data, ensuring continuity across restarts.\n- **Resource Requirements:** Specifies minimum CPU, memory, and storage needs for optimal performance.",
    "useCases": "- **Validators:** Run a node to validate transactions and earn rewards.\n- **Developers:** Use a local node for testing smart contracts and applications.\n- **Enthusiasts:** Support the network by running a node and contributing to its decentralization.",
    "support": "- **GitHub Repository:** For issues and contributions, visit [Near Docker Testing](https://github.com/johnforfar/near-docker-testing).\n- **Documentation:** Comprehensive guides are available at [Near Docs](https://docs.near.org/validator/running-a-node).\n- **Community:** Join the Near community forums and Discord for discussions and support.",
    "nixName": "near",
    "specs": {
      "ram": 24000,
      "storage": 1000000
    },
    "tags": [
      "Blockchain",
      "NEAR",
      "Validator"
    ],
    "website": "https://near.org",
    "implemented": false,
    "logo": "https://cryptologos.cc/logos/near-protocol-near-logo.png",
    "options": [
      {
        "name": "network",
        "desc": "Network to connect to (mainnet, testnet, betanet)",
        "nixName": "network",
        "type": "one of \"mainnet\", \"testnet\", \"betanet\"",
        "value": "mainnet"
      },
      {
        "name": "boot_nodes",
        "desc": "List of boot nodes to connect to",
        "nixName": "bootNodes",
        "type": "list of strings",
        "value": "[]"
      },
      {
        "name": "min_peers",
        "desc": "Minimum number of peers to maintain",
        "nixName": "minPeers",
        "type": "integer",
        "value": "40"
      },
      {
        "name": "rpc.addr",
        "desc": "RPC listening address",
        "nixName": "rpc.addr",
        "type": "string",
        "value": "0.0.0.0:3030"
      },
      {
        "name": "extraArgs",
        "desc": "Additional arguments for the Near node",
        "nixName": "extraArgs",
        "type": "list of strings",
        "value": "[]"
      }
    ]
  },
  {
    "name": "Netdata",
    "desc": "Deploy Netdata to provide real-time performance monitoring and troubleshooting for systems and applications. Netdata enables users to visualize metrics and logs with a focus on ease of use and low resource consumption.",
    "longDesc": "Netdata is an open-source monitoring solution that provides insights into system performance and resource utilization through interactive, real-time visualizations. It helps users identify bottlenecks and issues in their infrastructure.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Netdata using Docker or other container technologies for quick installation and management.\n- **Scalability:** Capable of monitoring thousands of metrics from multiple sources in real time, suitable for small applications to large enterprise environments.\n- **Privacy and Security:** Netdata runs locally, ensuring that data remains on the user’s servers without sending sensitive information to external services.\n- **API Compatibility:** Provides a powerful API for integrating with existing tools and custom applications, allowing for extended functionality.\n- **Rich Visualizations:** Offers detailed graphs and dashboards for visualizing metrics, making it easier to understand system performance at a glance.",
    "useCases": "- **System Administrators:** Monitor server performance and resource usage in real time to ensure optimal operation.\n- **Developers:** Use Netdata for application performance monitoring, identifying and resolving issues during development and testing.\n- **DevOps Teams:** Integrate Netdata into CI/CD pipelines for continuous monitoring and troubleshooting, improving deployment reliability.",
    "support": "- **Community Forums:** Engage with the Netdata community for support and discussions through the [Netdata Community Forum](https://community.netdata.cloud/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Netdata Documentation](https://learn.netdata.cloud/) for detailed reference.\n- **Troubleshooting Help:** Access the [Netdata GitHub Repository](https://github.com/netdata/netdata) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Netdata’s functionalities and practical applications, emphasizing its importance in system monitoring. For more detailed information, visit the [official Netdata website](https://learn.netdata.cloud/).",
    "nixName": "netdata",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Monitoring"
    ],
    "website": "https://www.netdata.cloud/",
    "implemented": false,
    "logo": "https://www.netdata.cloud/favicon-32x32.png",
    "options": [
      {
        "name": "claimTokenFile",
        "desc": "If set, automatically registers the agent using the given claim token file.",
        "nixName": "claimTokenFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "config",
        "desc": "netdata.conf configuration as nix attributes. cannot be combined with configText.",
        "nixName": "config",
        "type": "attribute set of (attribute set)",
        "value": "{ }"
      },
      {
        "name": "configDir",
        "desc": "Complete netdata config directory except netdata.conf. The default configuration is merged with changes defined in this option. Each top-level attribute denotes a path in the configuration directory as in environment.etc. Its value is the absolute path and must be readable by netdata. Cannot be combined with configText.",
        "nixName": "configDir",
        "type": "attribute set of path",
        "value": "{ }"
      },
      {
        "name": "configText",
        "desc": "Verbatim netdata.conf, cannot be combined with config.",
        "nixName": "configText",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "deadlineBeforeStopSec",
        "desc": "In order to detect when netdata is misbehaving, we run a concurrent task pinging netdata (wait-for-netdata-up) in the systemd unit. If after a while, this task does not succeed, we stop the unit and mark it as failed. You can control this deadline in seconds with this option, it’s useful to bump it if you have (1) a lot of data (2) doing upgrades (3) have low IOPS/throughput.",
        "nixName": "deadlineBeforeStopSec",
        "type": "signed integer",
        "value": "120"
      },
      {
        "name": "enable",
        "desc": "Whether to enable netdata.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableAnalyticsReporting",
        "desc": "Enable reporting of anonymous usage statistics to Netdata Inc. via either Google Analytics (in versions prior to 1.29.4), or Netdata Inc.’s self-hosted PostHog (in versions 1.29.4 and later). See: https://learn.netdata.cloud/docs/agent/anonymous-statistics",
        "nixName": "enableAnalyticsReporting",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "extraPluginPaths",
        "desc": "Extra paths to add to the netdata global “plugins directory” option. Useful for when you want to include your own collection scripts. Details about writing a custom netdata plugin are available at: https://docs.netdata.cloud/collectors/plugins.d/ Cannot be combined with configText.",
        "nixName": "extraPluginPaths",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "Group under which netdata runs.",
        "nixName": "group",
        "type": "string",
        "value": "netdata"
      },
      {
        "name": "package",
        "desc": "The netdata package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.netdata"
      },
      {
        "name": "python.enable",
        "desc": "Whether to enable python-based plugins",
        "nixName": "python.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "python.extraPackages",
        "desc": "Extra python packages available at runtime to enable additional python plugins.",
        "nixName": "python.extraPackages",
        "type": "function that evaluates to a(n) list of package",
        "value": "ps: []"
      },
      {
        "name": "python.recommendedPythonPackages",
        "desc": "Whether to enable a set of recommended Python plugins by installing extra Python packages.",
        "nixName": "python.recommendedPythonPackages",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "user",
        "desc": "User account under which netdata runs.",
        "nixName": "user",
        "type": "string",
        "value": "netdata"
      }
    ]
  },
  {
    "name": "nextcloud",
    "desc": "Deploy Nextcloud to create a self-hosted, secure cloud storage solution that enables users to manage and share files, calendars, and contacts. Nextcloud provides a powerful alternative to commercial cloud services, emphasizing privacy and data ownership.",
    "longDesc": "Nextcloud is an open-source file synchronization and sharing platform that allows users to host their own cloud services. It offers a comprehensive suite of tools for collaboration, including file storage, calendar management, and communication features.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Nextcloud using Docker or other container technologies for efficient installation.\n- **Scalability:** Designed to handle small to large user bases, accommodating a variety of needs from personal to enterprise environments.\n- **Privacy and Security:** Ensures data remains on the user’s server, protecting it from unauthorized access and providing features like end-to-end encryption.\n- **API Compatibility:** Offers a robust API for integration with other applications, enhancing functionality and customizability.\n- **Extensive App Ecosystem:** Users can extend functionalities with numerous apps available in the Nextcloud App Store, ranging from productivity tools to integrations with third-party services.",
    "useCases": "- **Individuals:** Manage personal documents and media files securely while having access to collaboration tools.\n- **Businesses:** Implement Nextcloud to share files and collaborate internally, reducing reliance on external cloud providers.\n- **Educational Institutions:** Use Nextcloud as a platform for sharing resources, collaborating on projects, and managing class schedules.",
    "support": "- **Community Forums:** Engage with the Nextcloud community for support and discussions through the [Nextcloud Community](https://help.nextcloud.com/.\n- **Documentation:** Comprehensive guides and user manuals are available at the [Nextcloud Documentation](https://docs.nextcloud.com/) for detailed reference.\n- **Troubleshooting Help:** Access the [Nextcloud GitHub Repository](https://github.com/nextcloud) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Nextcloud’s functionalities and practical applications, emphasizing its role as a self-hosted cloud solution. For more detailed information, visit the [official Nextcloud documentation](https://docs.nextcloud.com/).",
    "nixName": "nextcloud",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://nextcloud.com",
    "implemented": false,
    "logo": "https://nextcloud.com/c/uploads/2022/08/nextcloud-logo-icon.svg",
    "options": [
      {
        "name": "appstoreEnable",
        "desc": "Allow the installation and updating of apps from the Nextcloud appstore. Enabled by default unless there are packages in services.nextcloud.extraApps. Set this to true to force enable the store even if services.nextcloud.extraApps is used. Set this to false to disable the installation of apps from the global appstore. App management is always enabled regardless of this setting.",
        "nixName": "appstoreEnable",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "autoUpdateApps.enable",
        "desc": "Run a regular auto-update of all apps installed from the Nextcloud app store.",
        "nixName": "autoUpdateApps.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "autoUpdateApps.startAt",
        "desc": "When to run the update. See systemd.services.<name>.startAt.",
        "nixName": "autoUpdateApps.startAt",
        "type": "string or list of string",
        "value": "\"05:00:00\""
      },
      {
        "name": "caching.apcu",
        "desc": "Whether to load the APCu module into PHP.",
        "nixName": "caching.apcu",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "caching.memcached",
        "desc": "Whether to load the Memcached module into PHP. You still need to enable Memcached in your config.php. See https://docs.nextcloud.com/server/14/admin_manual/configuration_server/caching_configuration.html",
        "nixName": "caching.memcached",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "caching.redis",
        "desc": "Whether to load the Redis module into PHP. You still need to enable Redis in your config.php. See https://docs.nextcloud.com/server/14/admin_manual/configuration_server/caching_configuration.html",
        "nixName": "caching.redis",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "cli.memoryLimit",
        "desc": "The memory_limit of PHP is equal to services.nextcloud.maxUploadSize. The value can be customized for nextcloud-cron.service using this option.",
        "nixName": "cli.memoryLimit",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config.adminpassFile",
        "desc": "The full path to a file that contains the admin’s password. Must be readable by user nextcloud. The password is set only in the initial setup of Nextcloud by the systemd service nextcloud-setup.service.",
        "nixName": "config.adminpassFile",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.adminuser",
        "desc": "Username for the admin account. The username is only set during the initial setup of Nextcloud! Since the username also acts as unique ID internally, it cannot be changed later!",
        "nixName": "config.adminuser",
        "type": "string",
        "value": "root"
      },
      {
        "name": "config.dbhost",
        "desc": "Database host (+port) or socket path. If services.nextcloud.database.createLocally is true and services.nextcloud.config.dbtype is either pgsql or mysql, defaults to the correct Unix socket instead.",
        "nixName": "config.dbhost",
        "type": "null or string",
        "value": "\"localhost\""
      },
      {
        "name": "config.dbname",
        "desc": "Database name.",
        "nixName": "config.dbname",
        "type": "null or string",
        "value": "\"nextcloud\""
      },
      {
        "name": "config.dbpassFile",
        "desc": "The full path to a file that contains the database password.",
        "nixName": "config.dbpassFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config.dbtableprefix",
        "desc": "Table prefix in Nextcloud’s database. Note: since Nextcloud 20 it’s not an option anymore to create a database schema with a custom table prefix. This option only exists for backwards compatibility with installations that were originally provisioned with Nextcloud <20.",
        "nixName": "config.dbtableprefix",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config.dbtype",
        "desc": "Database type.",
        "nixName": "config.dbtype",
        "type": "one of \"sqlite\", \"pgsql\", \"mysql\"",
        "value": "\"sqlite\""
      },
      {
        "name": "config.dbuser",
        "desc": "Database user.",
        "nixName": "config.dbuser",
        "type": "null or string",
        "value": "\"nextcloud\""
      },
      {
        "name": "config.objectstore.s3.autocreate",
        "desc": "Create the objectstore if it does not exist.",
        "nixName": "config.objectstore.s3.autocreate",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "config.objectstore.s3.bucket",
        "desc": "The name of the S3 bucket.",
        "nixName": "config.objectstore.s3.bucket",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.objectstore.s3.enable",
        "desc": "Whether to enable S3 object storage as primary storage. This mounts a bucket on an Amazon S3 object storage or compatible implementation into the virtual filesystem. Further details about this feature can be found in the upstream documentation .",
        "nixName": "config.objectstore.s3.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "config.objectstore.s3.hostname",
        "desc": "Required for some non-Amazon implementations.",
        "nixName": "config.objectstore.s3.hostname",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config.objectstore.s3.key",
        "desc": "The access key for the S3 bucket.",
        "nixName": "config.objectstore.s3.key",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.objectstore.s3.port",
        "desc": "Required for some non-Amazon implementations.",
        "nixName": "config.objectstore.s3.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "config.objectstore.s3.region",
        "desc": "Required for some non-Amazon implementations.",
        "nixName": "config.objectstore.s3.region",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config.objectstore.s3.secretFile",
        "desc": "The full path to a file that contains the access secret. Must be readable by user nextcloud.",
        "nixName": "config.objectstore.s3.secretFile",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.objectstore.s3.sseCKeyFile",
        "desc": "If provided this is the full path to a file that contains the key to enable server-side encryption with customer-provided keys (SSE-C). The file must contain a random 32-byte key encoded as a base64 string, e.g. generated with the command openssl rand 32 | base64 Must be readable by user nextcloud.",
        "nixName": "config.objectstore.s3.sseCKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "config.objectstore.s3.usePathStyle",
        "desc": "Required for some non-Amazon S3 implementations. Ordinarily, requests will be made with http://bucket.hostname.domain/, but with path style enabled requests are made with http://hostname.domain/bucket instead.",
        "nixName": "config.objectstore.s3.usePathStyle",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "config.objectstore.s3.useSsl",
        "desc": "Use SSL for objectstore access.",
        "nixName": "config.objectstore.s3.useSsl",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "configureRedis",
        "desc": "Whether to configure Nextcloud to use the recommended Redis settings for small instances.  The notify_push app requires Redis to be configured. If this option is turned off, this must be configured manually.",
        "nixName": "configureRedis",
        "type": "boolean",
        "value": "config.services.nextcloud.notify_push.enable"
      },
      {
        "name": "database.createLocally",
        "desc": "Whether to create the database and database user locally.",
        "nixName": "database.createLocally",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "datadir",
        "desc": "Nextcloud’s data storage path. Will be services.nextcloud.home by default. This folder will be populated with a config.php file and a data folder which contains the state of the instance (excluding the database).“;",
        "nixName": "datadir",
        "type": "string",
        "value": "config.services.nextcloud.home"
      },
      {
        "name": "enable",
        "desc": "Whether to enable nextcloud.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableImagemagick",
        "desc": "Whether to enable the ImageMagick module for PHP. This is used by the theming app and for generating previews of certain images (e.g. SVG and HEIF). You may want to disable it for increased security. In that case, previews will still be available for some images (e.g. JPEG and PNG). See https://github.com/nextcloud/server/issues/13099 .",
        "nixName": "enableImagemagick",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraApps",
        "desc": "Extra apps to install. Should be an attrSet of appid to packages generated by fetchNextcloudApp. The appid must be identical to the “id” value in the apps appinfo/info.xml. Using this will disable the appstore to prevent Nextcloud from updating these apps (see services.nextcloud.appstoreEnable).",
        "nixName": "extraApps",
        "type": "attribute set of package",
        "value": "{ }"
      },
      {
        "name": "extraAppsEnable",
        "desc": "Automatically enable the apps in services.nextcloud.extraApps every time Nextcloud starts. If set to false, apps need to be enabled in the Nextcloud web user interface or with nextcloud-occ app:enable.",
        "nixName": "extraAppsEnable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "fastcgiTimeout",
        "desc": "FastCGI timeout for database connection in seconds.",
        "nixName": "fastcgiTimeout",
        "type": "signed integer",
        "value": "120"
      },
      {
        "name": "home",
        "desc": "Storage path of nextcloud.",
        "nixName": "home",
        "type": "string",
        "value": "/var/lib/nextcloud"
      },
      {
        "name": "hostName",
        "desc": "FQDN for the nextcloud instance.",
        "nixName": "hostName",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "https",
        "desc": "Use HTTPS for generated links.",
        "nixName": "https",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "maxUploadSize",
        "desc": "The upload limit for files. This changes the relevant options in php.ini and nginx if enabled.",
        "nixName": "maxUploadSize",
        "type": "string",
        "value": "512M"
      },
      {
        "name": "nginx.hstsMaxAge",
        "desc": "Value for the max-age directive of the HTTP Strict-Transport-Security header. See section 6.1.1 of IETF RFC 6797 for detailed information on this directive and header.",
        "nixName": "nginx.hstsMaxAge",
        "type": "positive integer, meaning >0",
        "value": "15552000"
      },
      {
        "name": "nginx.recommendedHttpHeaders",
        "desc": "Enable additional recommended HTTP response headers",
        "nixName": "nginx.recommendedHttpHeaders",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "notify_push.bendDomainToLocalhost",
        "desc": "Whether to add an entry to /etc/hosts for the configured nextcloud domain to point to localhost and add localhost to nextcloud’s trusted_proxies config option. This is useful when nextcloud’s domain is not a static IP address and when the reverse proxy cannot be bypassed because the backend connection is done via unix socket.",
        "nixName": "notify_push.bendDomainToLocalhost",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "notify_push.dbhost",
        "desc": "Database host (+port) or socket path. If services.nextcloud.database.createLocally is true and services.nextcloud.config.dbtype is either pgsql or mysql, defaults to the correct Unix socket instead.",
        "nixName": "notify_push.dbhost",
        "type": "null or string",
        "value": "\"config.services.nextcloud.config.dbhost\""
      },
      {
        "name": "notify_push.dbname",
        "desc": "Database name.",
        "nixName": "notify_push.dbname",
        "type": "null or string",
        "value": "\"config.services.nextcloud.config.dbname\""
      },
      {
        "name": "notify_push.dbpassFile",
        "desc": "The full path to a file that contains the database password.",
        "nixName": "notify_push.dbpassFile",
        "type": "null or string",
        "value": "\"config.services.nextcloud.config.dbpassFile\""
      },
      {
        "name": "notify_push.dbtableprefix",
        "desc": "Table prefix in Nextcloud’s database. Note: since Nextcloud 20 it’s not an option anymore to create a database schema with a custom table prefix. This option only exists for backwards compatibility with installations that were originally provisioned with Nextcloud <20.",
        "nixName": "notify_push.dbtableprefix",
        "type": "null or string",
        "value": "\"config.services.nextcloud.config.dbtableprefix\""
      },
      {
        "name": "notify_push.dbtype",
        "desc": "Database type.",
        "nixName": "notify_push.dbtype",
        "type": "one of \"sqlite\", \"pgsql\", \"mysql\"",
        "value": "\"config.services.nextcloud.config.dbtype\""
      },
      {
        "name": "notify_push.dbuser",
        "desc": "Database user.",
        "nixName": "notify_push.dbuser",
        "type": "null or string",
        "value": "\"config.services.nextcloud.config.dbuser\""
      },
      {
        "name": "notify_push.enable",
        "desc": "Whether to enable Notify push.",
        "nixName": "notify_push.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "notify_push.logLevel",
        "desc": "Log level",
        "nixName": "notify_push.logLevel",
        "type": "one of \"error\", \"warn\", \"info\", \"debug\", \"trace\"",
        "value": "\"error\""
      },
      {
        "name": "notify_push.socketPath",
        "desc": "Socket path to use for notify_push",
        "nixName": "notify_push.socketPath",
        "type": "string",
        "value": "/run/nextcloud-notify_push/sock"
      },
      {
        "name": "phpExtraExtensions",
        "desc": "Additional PHP extensions to use for Nextcloud. By default, only extensions necessary for a vanilla Nextcloud installation are enabled, but you may choose from the list of available extensions and add further ones. This is sometimes necessary to be able to install a certain Nextcloud app that has additional requirements.",
        "nixName": "phpExtraExtensions",
        "type": "function that evaluates to a(n) list of package",
        "value": "all: []"
      },
      {
        "name": "phpOptions",
        "desc": "Options for PHP’s php.ini file for nextcloud. Please note that this option is additive on purpose while the attribute values inside the default are option defaults: that means that {  services.nextcloud.phpOptions.\"opcache.interned_strings_buffer\" = \"23\"; } will override the php.ini option opcache.interned_strings_buffer without discarding the rest of the defaults. Overriding all of phpOptions (including upload_max_filesize, post_max_size and memory_limit which all point to services.nextcloud.maxUploadSize by default) can be done like this: {  services.nextcloud.phpOptions = lib.mkForce {   /* ... */  }; }",
        "nixName": "phpOptions",
        "type": "attribute set of (string or signed integer)",
        "value": "{\n  catch_workers_output = \"yes\";\n  display_errors = \"stderr\";\n  error_reporting = \"E_ALL & ~E_DEPRECATED & ~E_STRICT\";\n  expose_php = \"Off\";\n  \"opcache.fast_shutdown\" = \"1\";\n  \"opcache.interned_strings_buffer\" = \"8\";\n  \"opcache.max_accelerated_files\" = \"10000\";\n  \"opcache.memory_consumption\" = \"128\";\n  \"opcache.revalidate_freq\" = \"1\";\n  \"openssl.cafile\" = \"/etc/ssl/certs/ca-certificates.crt\";\n  output_buffering = \"0\";\n  short_open_tag = \"Off\";\n}"
      },
      {
        "name": "poolConfig",
        "desc": "Options for Nextcloud’s PHP pool. See the documentation on php-fpm.conf for details on configuration directives.",
        "nixName": "poolConfig",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "poolSettings",
        "desc": "Options for nextcloud’s PHP pool. See the documentation on php-fpm.conf for details on configuration directives.",
        "nixName": "poolSettings",
        "type": "attribute set of (string or signed integer or boolean)",
        "value": "{\n  pm = \"dynamic\";\n  \"pm.max_children\" = \"32\";\n  \"pm.max_requests\" = \"500\";\n  \"pm.max_spare_servers\" = \"4\";\n  \"pm.min_spare_servers\" = \"2\";\n  \"pm.start_servers\" = \"2\";\n}"
      },
      {
        "name": "secretFile",
        "desc": "Secret options which will be appended to Nextcloud’s config.php file (written as JSON, in the same form as the services.nextcloud.settings option), for example {redis:{password:secret}}.",
        "nixName": "secretFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "settings.default_phone_region",
        "desc": "An ISO 3166-1 country code which replaces automatic phone-number detection without a country code. As an example, with DE set as the default phone region, the +49 prefix can be omitted for phone numbers.",
        "nixName": "settings.default_phone_region",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.log_type",
        "desc": "Logging backend to use. systemd requires the php-systemd package to be added to services.nextcloud.phpExtraExtensions. See the nextcloud documentation for details.",
        "nixName": "settings.log_type",
        "type": "one of \"errorlog\", \"file\", \"syslog\", \"systemd\"",
        "value": "\"syslog\""
      },
      {
        "name": "settings.loglevel",
        "desc": "Log level value between 0 (DEBUG) and 4 (FATAL).  0 (debug): Log all activity. 1 (info): Log activity such as user logins and file activities, plus warnings, errors, and fatal errors. 2 (warn): Log successful operations, as well as warnings of potential problems, errors and fatal errors. 3 (error): Log failed operations and fatal errors. 4 (fatal): Log only fatal errors that cause the server to stop.",
        "nixName": "settings.loglevel",
        "type": "integer between 0 and 4 (both inclusive)",
        "value": "2"
      },
      {
        "name": "settings.overwriteprotocol",
        "desc": "Force Nextcloud to always use HTTP or HTTPS i.e. for link generation. Nextcloud uses the currently used protocol by default, but when behind a reverse-proxy, it may use http for everything although Nextcloud may be served via HTTPS.",
        "nixName": "settings.overwriteprotocol",
        "type": "one of \"\", \"http\", \"https\"",
        "value": "\"\""
      },
      {
        "name": "settings.\"profile.enabled\"",
        "desc": "Makes user-profiles globally available under nextcloud.tld/u/user.name. Even though it’s enabled by default in Nextcloud, it must be explicitly enabled here because it has the side-effect that personal information is even accessible to unauthenticated users by default. By default, the following properties are set to “Show to everyone” if this flag is enabled:  About Full name Headline Organisation Profile picture Role Twitter Website Only has an effect in Nextcloud 23 and later.",
        "nixName": "settings.\"profile.enabled\"",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.skeletondirectory",
        "desc": "The directory where the skeleton files are located. These files will be copied to the data directory of new users. Leave empty to not copy any skeleton files.",
        "nixName": "settings.skeletondirectory",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.trusted_domains",
        "desc": "Trusted domains, from which the nextcloud installation will be accessible. You don’t need to add services.nextcloud.hostname here.",
        "nixName": "settings.trusted_domains",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.trusted_proxies",
        "desc": "Trusted proxies, to provide if the nextcloud installation is being proxied to secure against e.g. spoofing.",
        "nixName": "settings.trusted_proxies",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "webfinger",
        "desc": "Enable this option if you plan on using the webfinger plugin. The appropriate nginx rewrite rules will be added to your configuration.",
        "nixName": "webfinger",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Nitter ",
    "desc": "Deploy Nitter to create a privacy-focused, open-source alternative front-end for Twitter. Nitter allows users to browse Twitter without being tracked or subjected to advertisements, providing a lightweight way to access Twitter content.",
    "longDesc": "Nitter is an open-source web client for Twitter that prioritizes user privacy and reduces the load of Twitter’s web interface. It allows users to view tweets and profiles without the need for a Twitter account, minimizing data collection and enhancing security.\n\n**Key Features:**\n- **One-Click Deployment:** Set up Nitter easily using Docker or other containerization solutions for quick and straightforward installation.\n- **Scalability:** Supports a wide range of users and can be deployed on various server configurations, making it suitable for both personal and community use.\n- **Privacy and Security:** Does not track users or store any personal data, providing a safer browsing experience.\n- **API Compatibility:** Offers a simple API for integration with other applications or for building custom features.\n- **Lightweight Interface:** Designed to be fast and responsive, providing a smooth user experience even on lower-end devices.",
    "useCases": "- **Privacy-Conscious Users:** Access Twitter content without compromising personal data through tracking.\n- **Developers:** Use Nitter as a foundation for developing applications that interact with Twitter content without the bloat of the official interface.\n- **Educators and Researchers:** Analyze public tweets and interactions while maintaining user anonymity and privacy.",
    "support": "- **Community Forums:** Engage with the Nitter community for support and discussions through the [Nitter GitHub Repository](https://github.com/zedeus/nitter).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Nitter Documentation](https://github.com/zedeus/nitter) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Nitter’s functionalities and practical applications, emphasizing its role as a privacy-focused alternative to Twitter. For more detailed information, visit the [official Nitter website](https://nitter-scraper.readthedocs.io/en/latest/).",
    "nixName": "nitter",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Communication - Social Networks and Forums"
    ],
    "website": "https://github.com/zedeus/nitter",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "cache.listMinutes",
        "desc": "How long to cache list info (not the tweets, so keep it high).",
        "nixName": "cache.listMinutes",
        "type": "signed integer",
        "value": "240"
      },
      {
        "name": "cache.redisConnections",
        "desc": "Redis connection pool size.",
        "nixName": "cache.redisConnections",
        "type": "signed integer",
        "value": "20"
      },
      {
        "name": "cache.redisHost",
        "desc": "Redis host.",
        "nixName": "cache.redisHost",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "cache.redisMaxConnections",
        "desc": "Maximum number of connections to Redis. New connections are opened when none are available, but if the pool size goes above this, they are closed when released, do not worry about this unless you receive tons of requests per second.",
        "nixName": "cache.redisMaxConnections",
        "type": "signed integer",
        "value": "30"
      },
      {
        "name": "cache.redisPort",
        "desc": "Redis port.",
        "nixName": "cache.redisPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "6379"
      },
      {
        "name": "cache.rssMinutes",
        "desc": "How long to cache RSS queries.",
        "nixName": "cache.rssMinutes",
        "type": "signed integer",
        "value": "10"
      },
      {
        "name": "config.base64Media",
        "desc": "Use base64 encoding for proxied media URLs.",
        "nixName": "config.base64Media",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "config.enableDebug",
        "desc": "Whether to enable request logs and debug endpoints.",
        "nixName": "config.enableDebug",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "config.enableRSS",
        "desc": "Whether to enable RSS feeds.",
        "nixName": "config.enableRSS",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "config.proxy",
        "desc": "URL to a HTTP/HTTPS proxy.",
        "nixName": "config.proxy",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.proxyAuth",
        "desc": "Credentials for proxy.",
        "nixName": "config.proxyAuth",
        "type": "string",
        "value": ""
      },
      {
        "name": "config.tokenCount",
        "desc": "Minimum amount of usable tokens. Tokens are used to authorize API requests, but they expire after ~1 hour, and have a limit of 187 requests. The limit gets reset every 15 minutes, and the pool is filled up so there is always at least tokenCount usable tokens. Only increase this if you receive major bursts all the time.",
        "nixName": "config.tokenCount",
        "type": "signed integer",
        "value": "10"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Nitter, an alternative Twitter front-end.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "guestAccounts",
        "desc": "Path to the guest accounts file. This file contains a list of guest accounts that can be used to access the instance without logging in. The file is in JSONL format, where each line is a JSON object with the following fields: {“oauth_token”:“some_token”,“oauth_token_secret”:“some_secret_key”} See https://github.com/zedeus/nitter/wiki/Guest-Account-Branch-Deployment for more information on guest accounts and how to generate them.",
        "nixName": "guestAccounts",
        "type": "path",
        "value": "\"/var/lib/nitter/guest_accounts.jsonl\""
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for Nitter web interface.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The nitter package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.nitter"
      },
      {
        "name": "preferences.autoplayGifs",
        "desc": "Autoplay GIFs.",
        "nixName": "preferences.autoplayGifs",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "preferences.bidiSupport",
        "desc": "Support bidirectional text (makes clicking on tweets harder).",
        "nixName": "preferences.bidiSupport",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.hideBanner",
        "desc": "Hide profile banner.",
        "nixName": "preferences.hideBanner",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.hidePins",
        "desc": "Hide pinned tweets.",
        "nixName": "preferences.hidePins",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.hideReplies",
        "desc": "Hide tweet replies.",
        "nixName": "preferences.hideReplies",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.hideTweetStats",
        "desc": "Hide tweet stats (replies, retweets, likes).",
        "nixName": "preferences.hideTweetStats",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.hlsPlayback",
        "desc": "Enable HLS video streaming (requires JavaScript).",
        "nixName": "preferences.hlsPlayback",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.infiniteScroll",
        "desc": "Infinite scrolling (requires JavaScript, experimental!).",
        "nixName": "preferences.infiniteScroll",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.mp4Playback",
        "desc": "Enable MP4 video playback.",
        "nixName": "preferences.mp4Playback",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "preferences.muteVideos",
        "desc": "Mute videos by default.",
        "nixName": "preferences.muteVideos",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.proxyVideos",
        "desc": "Proxy video streaming through the server (might be slow).",
        "nixName": "preferences.proxyVideos",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "preferences.replaceReddit",
        "desc": "Replace Reddit links with links to this instance (blank to disable).",
        "nixName": "preferences.replaceReddit",
        "type": "string",
        "value": ""
      },
      {
        "name": "preferences.replaceTwitter",
        "desc": "Replace Twitter links with links to this instance (blank to disable).",
        "nixName": "preferences.replaceTwitter",
        "type": "string",
        "value": ""
      },
      {
        "name": "preferences.replaceYouTube",
        "desc": "Replace YouTube links with links to this instance (blank to disable).",
        "nixName": "preferences.replaceYouTube",
        "type": "string",
        "value": ""
      },
      {
        "name": "preferences.squareAvatars",
        "desc": "Square profile pictures.",
        "nixName": "preferences.squareAvatars",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "preferences.stickyProfile",
        "desc": "Make profile sidebar stick to top.",
        "nixName": "preferences.stickyProfile",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "preferences.theme",
        "desc": "Instance theme.",
        "nixName": "preferences.theme",
        "type": "string",
        "value": "Nitter"
      },
      {
        "name": "redisCreateLocally",
        "desc": "Configure local Redis server for Nitter.",
        "nixName": "redisCreateLocally",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "server.address",
        "desc": "The address to listen on.",
        "nixName": "server.address",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "server.hostname",
        "desc": "Hostname of the instance.",
        "nixName": "server.hostname",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "server.httpMaxConnections",
        "desc": "Maximum number of HTTP connections.",
        "nixName": "server.httpMaxConnections",
        "type": "signed integer",
        "value": "100"
      },
      {
        "name": "server.https",
        "desc": "Set secure attribute on cookies. Keep it disabled to enable cookies when not using HTTPS.",
        "nixName": "server.https",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "server.port",
        "desc": "The port to listen on.",
        "nixName": "server.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "server.staticDir",
        "desc": "Path to the static files directory.",
        "nixName": "server.staticDir",
        "type": "path",
        "value": "\"${config.services.nitter.package}/share/nitter/public\""
      },
      {
        "name": "server.title",
        "desc": "Title of the instance.",
        "nixName": "server.title",
        "type": "string",
        "value": "nitter"
      },
      {
        "name": "settings",
        "desc": "Add settings here to override NixOS module generated settings. Check the official repository for the available settings: https://github.com/zedeus/nitter/blob/master/nitter.example.conf",
        "nixName": "settings",
        "type": "attribute set",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "Ollama",
    "desc": "Deploy and run your own instance of Ollama to power applications with large language models (LLMs) locally. Ollama offers secure, on-premise AI capabilities, enabling the use of popular models such as Llama, Mistral, and custom AI models without sending data to third-party servers.",
    "longDesc": "**What is Ollama?**\n\nOllama is a cutting-edge platform designed for deploying and running large language models (LLMs) locally, without reliance on external cloud services. Its primary goal is to enable developers, enterprises, and individuals to harness the power of AI models like Llama, Mistral, and Codextral entirely on local infrastructure, ensuring maximum privacy and control.\n\n**Key Features:**\n\n- **Local AI Execution:** Run LLMs without sending data to third-party services, maintaining full control over sensitive information.\n- **Multi-Model Support:** Access a library of models, including Llama 3, Phi 3, and Mistral, each suited for specific use cases like chat, coding assistance, or natural language processing.\n- **Seamless Integration:** Ollama provides compatibility with the OpenAI API format, making it easy for users to transition existing applications.\n- **GPU Acceleration:** Leverage Nvidia GPUs to optimize model performance, with Docker containers making deployment efficient across various platforms.\n- **Configurable CLI & API:** Users can interact with models through an easy-to-use command line interface or via a REST API, providing flexibility for both quick experiments and production-level integrations.",
    "useCases": "- **Code Autocompletion & Developer Tools:** Improve productivity by running local code assistants (e.g., Codextral) for autocompletion and debugging.\n- **Enterprise AI Solutions:** Build private chatbots and automation tools without exposing internal data to external cloud providers.\n- **AI in Research & Education:** Deploy educational or research-focused LLMs locally, ensuring minimal infrastructure dependency and full control over datasets.",
    "support": "- **Community Channels:**\n   - Join the [Ollama Discord](https://discord.com) for community assistance and real-time support.\n   - Explore and contribute via Ollama's GitHub repository for open-source collaboration.\n- **FAQs & Troubleshooting Resources:**\n   - [Ollama Documentation on GitHub](https://github.com/ollama/ollama)\n   - Blog updates on Docker and OpenAI API integrations: [Ollama Blog](https://ollama.com)\n- **Direct Assistance:**\n   - Contact Xnode support for infrastructure-related issues.\n   - Use the [Ollama Help Center](https://ollama.com) for documentation and community-driven solutions.\n\n This template offers a comprehensive guide for deploying and managing the Ollama server through Xnode. For more details, you can refer to the [official Ollama site](https://ollama.com) and its documentation on GitHub.",
    "nixName": "ollama",
    "specs": {
      "ram": 2000,
      "storage": 12000
    },
    "tags": [
      "LLM",
      "AI"
    ],
    "website": "https://github.com/ollama/ollama",
    "implemented": true,
    "logo": "https://avatars.githubusercontent.com/u/151674099",
    "options": [
      {
        "name": "acceleration",
        "desc": "What interface to use for hardware acceleration.  null: default behavior  if nixpkgs.config.rocmSupport is enabled, uses rocm if nixpkgs.config.cudaSupport is enabled, uses cuda otherwise defaults to false  false: disable GPU, only use CPU rocm: supported by most modern AMD GPUs  may require overriding gpu type with services.ollama.rocmOverrideGfx if rocm doesn’t detect your AMD gpu  cuda: supported by most modern NVIDIA GPUs",
        "nixName": "acceleration",
        "type": "null or one of false, \"rocm\", \"cuda\"",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable ollama server for local large language models.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environmentVariables",
        "desc": "Set arbitrary environment variables for the ollama service. Be aware that these are only seen by the ollama server (systemd service), not normal invocations like ollama run. Since ollama run is mostly a shell around the ollama server, this is usually sufficient.",
        "nixName": "environmentVariables",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "home",
        "desc": "The home directory that the ollama service is started in. See also services.ollama.writablePaths and services.ollama.sandbox.",
        "nixName": "home",
        "type": "string",
        "value": "%S/ollama"
      },
      {
        "name": "host",
        "desc": "The host address which the ollama server HTTP interface listens to.",
        "nixName": "host",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "loadModels",
        "desc": "The models to download as soon as the service starts. Search for models of your choice from: https://ollama.com/library",
        "nixName": "loadModels",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "models",
        "desc": "The directory that the ollama service will read models from and download new models to. See also services.ollama.writablePaths and services.ollama.sandbox if downloading models or other mutation of the filesystem is required.",
        "nixName": "models",
        "type": "string",
        "value": "%S/ollama/models"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open the firewall for ollama. This adds services.ollama.port to networking.firewall.allowedTCPPorts.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "port",
        "desc": "Which port the ollama server listens to.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "11434"
      },
      {
        "name": "rocmOverrideGfx",
        "desc": "Override what rocm will detect your gpu model as. For example, make rocm treat your RX 5700 XT (or any other model) as an RX 6900 XT using a value of 10.3.0 (gfx 1030). This sets the value of HSA_OVERRIDE_GFX_VERSION. See ollama’s docs for details.",
        "nixName": "rocmOverrideGfx",
        "type": "null or string",
        "value": "null"
      }
    ]
  },
  {
    "name": "Open WebUI",
    "desc": "Deploy Open WebUI with a single click to unlock an advanced, self-hosted interface for interacting with AI models. It supports seamless multi-modal interaction and can operate entirely offline, ensuring maximum privacy for your data.",
    "longDesc": "**What is Open WebUI?**\n\nOpen WebUI is an extensible platform designed for users to run AI models and facilitate complex interactions locally. It offers comprehensive support for various LLMs, including compatibility with Ollama and OpenAI APIs, along with the ability to host RAG (Retrieval Augmented Generation) workflows, chat interfaces, and more.\n\n**Key Features:**\n\n- **One-Click Deployment:** Simplified through Docker containers, eliminating configuration complexities.\n- **Multi-Model Support:** Manage and switch between multiple AI models such as Ollama or OpenAI-based LLMs.\n- **Modular Functionality:** Utilize tools for document processing, embedding models, and model fine-tuning within a unified workspace.\n- **Privacy and Security:** Keeps all data local, avoiding external servers to maintain user control over sensitive information.\n- **Versatile Interactions:** Supports chat, code completion, document search, and even summarization of YouTube videos through RAG pipelines.",
    "useCases": "- **Developers:** Run code assistants locally to boost productivity with enhanced privacy.\n- **Enterprises:** Create internal chatbots or other automation tools to streamline workflows while keeping data confidential.\n- **Educators & Researchers:** Use AI models for teaching or experimentation without reliance on internet connectivity.",
    "support": "- **Community Channels:** Join the [Open WebUI Discord](https://discord.com) for real-time help and discussions.\n- **Documentation:** Explore setup guides and troubleshooting steps in the [Open WebUI documentation](https://docs.openwebui.com).\n- **Additional Help:** Access regular updates and in-depth tutorials on [Open WebUI's GitHub](https://github.com/open-webui/open-webui).",
    "nixName": "open-webui",
    "specs": {
      "ram": 400,
      "storage": 100
    },
    "tags": [
      "LLM"
    ],
    "website": "https://github.com/open-webui/open-webui",
    "implemented": true,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable Open-WebUI server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environment",
        "desc": "Extra environment variables for Open-WebUI",
        "nixName": "environment",
        "type": "attribute set of string",
        "value": "{\n  ANONYMIZED_TELEMETRY = \"False\";\n  DO_NOT_TRACK = \"True\";\n  SCARF_NO_ANALYTICS = \"True\";\n}"
      },
      {
        "name": "host",
        "desc": "The host address which the Open-WebUI server HTTP interface listens to.",
        "nixName": "host",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open the firewall for Open-WebUI. This adds services.open-webui.port to networking.firewall.allowedTCPPorts.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "port",
        "desc": "Which port the Open-WebUI server listens to.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "stateDir",
        "desc": "State directory of Open-WebUI.",
        "nixName": "stateDir",
        "type": "path",
        "value": "\"/var/lib/open-webui\""
      }
    ]
  },
  {
    "name": "OpenAFS",
    "desc": "Deploy OpenAFS to create a distributed file system that provides high-performance, secure, and scalable file sharing across multiple platforms. OpenAFS is designed to enable seamless access to files in a networked environment, promoting collaboration and resource sharing.",
    "longDesc": "OpenAFS is an open-source implementation of the Andrew File System (AFS) that allows users to access files stored on remote servers as if they were local. It supports various operating systems, making it versatile for different environments.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up OpenAFS using pre-configured packages or through containerization options for quick installation.\n- **Scalability:** Designed to handle large numbers of clients and servers, making it suitable for both small organizations and large enterprises.\n- **Privacy and Security:** Implements robust security features, including Kerberos authentication, ensuring that data is protected from unauthorized access.\n- **API Compatibility:** Offers APIs for integration with various applications, enhancing functionality and flexibility in managing file storage.\n- **Cross-Platform Support:** Compatible with multiple operating systems, including Linux, Windows, and macOS, allowing diverse environments to utilize OpenAFS.",
    "useCases": "- **Educational Institutions:** Use OpenAFS to manage and share resources across departments, providing students and faculty with seamless access to files and applications.\n- **Research Organizations:** Implement OpenAFS for collaborative projects, enabling researchers to share large datasets and results efficiently.\n- **Enterprises:** Utilize OpenAFS for centralized file storage, reducing redundancy and promoting data integrity across distributed teams.",
    "support": "- **Community Forums:** Engage with the OpenAFS community for support and discussions through the [OpenAFS Mailing Lists](https://www.openafs.org/) and user forums.\n- **Documentation:** Comprehensive guides and user manuals are available at the [OpenAFS Documentation](https://www.openafs.org/) for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the [OpenAFS GitHub Repository](https://github.com/openafs/openafs) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of OpenAFS’s functionalities and practical applications, emphasizing its role in distributed file management. For more detailed information, visit the [official OpenAFS website](https://www.openafs.org/).",
    "tags": [
      "File Transfer - Distributed Filesystems"
    ],
    "website": "https://www.openafs.org",
    "implemented": false,
    "logo": "",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "openafs",
    "options": [
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "The openafs package to use.",
        "nixName": "relatedOption.openafsServer.package",
        "type": "package",
        "value": "pkgs.openafs"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Whether to enable the OpenAFS client.",
        "nixName": "relatedOption.openafsClient.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Whether to enable the OpenAFS server. An OpenAFS server needs acomplex setup. So, be aware that enabling this service and setting someoptions does not give you a turn-key-ready solution. You need at least arunning Kerberos 5 setup, as OpenAFS relies on it for authentication.See the Guide “QuickStartUnix” coming with pkgs.openafs.docfor complete setup instructions.",
        "nixName": "relatedOption.openafsServer.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "OpenAFS programs package. MUST match the kernel module package!",
        "nixName": "relatedOption.openafsClient.packages.programs",
        "type": "package",
        "value": "getBin pkgs.openafs"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "OpenAFS kernel module package. MUST match the userland package!",
        "nixName": "relatedOption.openafsClient.packages.module",
        "type": "package",
        "value": "config.boot.kernelPackages.openafs"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Whether to enable the backup server role. When using OpenAFS built-inbuserver, use in conjunction with the database role tomaintain the Backup Database. Normally only used in conjunction withtape storage or IBM’s Tivoli Storage Manager.For a modern backup server, enable this role and see enableFabs .",
        "nixName": "relatedOption.openafsServer.roles.backup.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "UDP packet size to use in Bytes. Higher values can speed upcommunications. The default of 1 MB is a sufficient in most cases. Makesure to increase the kernel’s UDP buffer size accordingly vianet.core(w|r|opt)mem_max sysctl.",
        "nixName": "relatedOption.openafsServer.udpPacketSize",
        "type": "signed integer",
        "value": "1310720"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the davolserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.fileserver.volserverArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the salvageserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.fileserver.salvageserverArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the dasalvager process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.fileserver.salvagerArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the dafileserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.fileserver.fileserverArgs",
        "type": "string",
        "value": "\"-vattachpar 128 -vhashsize 11 -L -rxpck 400 -cb 1000000\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Fileserver role, serves files and volumes from its local storage.",
        "nixName": "relatedOption.openafsServer.roles.fileserver.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the vlserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.database.vlserverArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the ptserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.database.ptserverArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Database server role, maintains the Volume Location Database,Protection Database (and Backup Database, see backup role).There can be multiple servers in the database role for replication,which then need reliable network connection to each other.Servers in this role appear in AFSDB DNS records or theCellServDB.",
        "nixName": "relatedOption.openafsServer.roles.database.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Additional configuration parameters for the FABS backup server.",
        "nixName": "relatedOption.openafsServer.roles.backup.fabsExtraConfig",
        "type": "attribute set",
        "value": "{ }"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the fabsys process. See fabsys_server(1) and fabsys_config(1).",
        "nixName": "relatedOption.openafsServer.roles.backup.fabsArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Whether to enable FABS, the flexible AFS backup system. It storesvolumes as dump files, relying on other pre-existing backup solutionsfor handling them. .",
        "nixName": "relatedOption.openafsServer.roles.backup.enableFabs",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "IP Address of a database server",
        "nixName": "relatedOption.openafsServer.roles.backup.cellServDB.*.ip",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "DNS full-qualified domain name of a database server",
        "nixName": "relatedOption.openafsServer.roles.backup.cellServDB.*.dnsname",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Definition of all cell-local backup database server machines. Usethis when your cell uses less backup database servers than otherdatabase server machines.",
        "nixName": "relatedOption.openafsServer.roles.backup.cellServDB",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Arguments to the buserver process. See its man page.",
        "nixName": "relatedOption.openafsServer.roles.backup.buserverArgs",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "If enabled, allow principal names containing (.) dots. Enabling thishas security implications!",
        "nixName": "relatedOption.openafsServer.dottedPrincipals",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "IP Address of a database server",
        "nixName": "relatedOption.openafsServer.cellServDB.*.ip",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "DNS full-qualified domain name of a database server",
        "nixName": "relatedOption.openafsServer.cellServDB.*.dnsname",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Definition of all cell-local database server machines.",
        "nixName": "relatedOption.openafsServer.cellServDB",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "Cell name, this server will serve.",
        "nixName": "relatedOption.openafsServer.cellName",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/server.nix",
        "desc": "List of IP addresses this server is advertised under. SeeNetInfo(5)",
        "nixName": "relatedOption.openafsServer.advertisedAddresses",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Start up in disconnected mode. You need to executefs disco online (as root) to switch to connected mode.Useful for roaming devices.",
        "nixName": "relatedOption.openafsClient.startDisconnected",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Minimal cell list in /afs.",
        "nixName": "relatedOption.openafsClient.sparse",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Mountpoint of the AFS file tree, conventionally /afs.When set to a different value, only cross-cells that use the same valuecan be accessed.",
        "nixName": "relatedOption.openafsClient.mountPoint",
        "type": "string",
        "value": "\"/afs\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Inode calculation method. compat is computationally lessexpensive, but md5 greatly reduces the likelihood of inodecollisions in larger scenarios involving multiple cells mounted into oneAFS space.",
        "nixName": "relatedOption.openafsClient.inumcalc",
        "type": "string matching the pattern compat|md5",
        "value": "\"compat\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Return fake data on stat() calls. If true, always do so.If false, only do so for cross-cell mounts (as these arepotentially expensive).",
        "nixName": "relatedOption.openafsClient.fakestat",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Number of daemons to serve user requests. Numbers higher than 6usually do no increase performance. Default is sufficient for up to fiveconcurrent users.",
        "nixName": "relatedOption.openafsClient.daemons",
        "type": "signed integer",
        "value": "2"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Whether to enable (weak) protocol encryption.",
        "nixName": "relatedOption.openafsClient.crypt",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "IP Address of a database server",
        "nixName": "relatedOption.openafsClient.cellServDB.*.ip",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "DNS full-qualified domain name of a database server",
        "nixName": "relatedOption.openafsClient.cellServDB.*.dnsname",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "This cell’s database server records, added to the global CellServDB.See CellServDB(5) man page for syntax. Ignored when afsdbis set to true.",
        "nixName": "relatedOption.openafsClient.cellServDB",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Cell name.",
        "nixName": "relatedOption.openafsClient.cellName",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Use in-memory cache for diskless machines. Has no real performancebenefit anymore.",
        "nixName": "relatedOption.openafsClient.cache.diskless",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Cache directory.",
        "nixName": "relatedOption.openafsClient.cache.directory",
        "type": "string",
        "value": "\"/var/cache/openafs\""
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Size of each cache chunk given in powers of 2. 0 resetsthe chunk size to its default values (13 (8 KB) for memcache, 18-20 (256KB to 1 MB) for diskcache). Maximum value is 30. Important performanceparameter. Set to higher values when dealing with large files.",
        "nixName": "relatedOption.openafsClient.cache.chunksize",
        "type": "integer between 0 and 30 (both inclusive)",
        "value": "0"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Cache size in 1KB blocks.",
        "nixName": "relatedOption.openafsClient.cache.blocks",
        "type": "signed integer",
        "value": "100000"
      },
      {
        "name": "network-filesystems/openafs/client.nix",
        "desc": "Resolve cells via AFSDB DNS records.",
        "nixName": "relatedOption.openafsClient.afsdb",
        "type": "boolean",
        "value": "true"
      }
    ]
  },
  {
    "name": "OpenSearch",
    "desc": "Deploy OpenSearch to create a scalable, open-source search and analytics engine. OpenSearch is designed for both search and data visualization, allowing users to explore their data in real-time.",
    "longDesc": "OpenSearch is an open-source search and analytics suite derived from Elasticsearch and Kibana. It is designed to help users search, analyze, and visualize large amounts of data quickly and efficiently.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy OpenSearch using Docker or Kubernetes for quick installation and management.\n- **Scalability:** Supports large-scale deployments, allowing users to handle increasing data volumes effectively.\n- **Privacy and Security:** Offers security features such as role-based access control and encrypted communications to protect user data.\n- **API Compatibility:** Provides a RESTful API for integration with various applications and services, enabling automation and extended functionality.\n- **Data Visualization:** Includes built-in dashboards and visualizations to help users interpret their data effectively.",
    "useCases": "- **Developers:** Integrate OpenSearch into applications for advanced search capabilities and data analytics.\n- **Enterprises:** Use OpenSearch for log and event data analysis, improving operational efficiency and monitoring.\n- **Researchers:** Leverage the platform to index and analyze large datasets, facilitating data-driven research.",
    "support": "- **Community Forums:** Engage with the OpenSearch community for support and discussions through the [OpenSearch Discuss Forum](https://discuss.opensearch.org/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [OpenSearch Documentation](https://opensearch.org/docs/latest/) for detailed reference.\n- **Troubleshooting Help:** Access the [OpenSearch GitHub Repository](https://github.com/opensearch-project) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of OpenSearch’s functionalities and practical applications, emphasizing its role in data search and analytics. For more detailed information, visit the [official OpenSearch website](https://opensearch.org/docs/latest/).",
    "nixName": "opensearch",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Search Engines"
    ],
    "website": "https://github.com/opensearch-project/OpenSearch",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "dataDir",
        "desc": "Data directory for OpenSearch. If you change this, you need to manually create the directory. You also need to create the opensearch user and group, or change services.opensearch.user and services.opensearch.group to existing ones with access to the directory.",
        "nixName": "dataDir",
        "type": "path",
        "value": "\"/var/lib/opensearch\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable OpenSearch.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraCmdLineOptions",
        "desc": "Extra command line options for the OpenSearch launcher.",
        "nixName": "extraCmdLineOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraJavaOptions",
        "desc": "Extra command line options for Java.",
        "nixName": "extraJavaOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "The group OpenSearch runs as. Should be left at default unless you have very specific needs.",
        "nixName": "group",
        "type": "string",
        "value": "opensearch"
      },
      {
        "name": "logging",
        "desc": "opensearch logging configuration.",
        "nixName": "logging",
        "type": "string",
        "value": "''\n  logger.action.name = org.opensearch.action\n  logger.action.level = info\n  \n  appender.console.type = Console\n  appender.console.name = console\n  appender.console.layout.type = PatternLayout\n  appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\n  \n  rootLogger.level = info\n  rootLogger.appenderRef.console.ref = console\n''"
      },
      {
        "name": "package",
        "desc": "The OpenSearch package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.opensearch"
      },
      {
        "name": "restartIfChanged",
        "desc": "Automatically restart the service on config change. This can be set to false to defer restarts on a server or cluster. Please consider the security implications of inadvertently running an older version, and the possibility of unexpected behavior caused by inconsistent versions across a cluster when disabling this option.",
        "nixName": "restartIfChanged",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings",
        "desc": "OpenSearch configuration.",
        "nixName": "settings",
        "type": "YAML value",
        "value": "{ }"
      },
      {
        "name": "settings.\"cluster.name\"",
        "desc": "The name of the cluster.",
        "nixName": "settings.\"cluster.name\"",
        "type": "string",
        "value": "opensearch"
      },
      {
        "name": "settings.\"discovery.type\"",
        "desc": "The type of discovery to use.",
        "nixName": "settings.\"discovery.type\"",
        "type": "string",
        "value": "single-node"
      },
      {
        "name": "settings.\"http.port\"",
        "desc": "The port to listen on for HTTP traffic.",
        "nixName": "settings.\"http.port\"",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9200"
      },
      {
        "name": "settings.\"network.host\"",
        "desc": "Which port this service should listen on.",
        "nixName": "settings.\"network.host\"",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "settings.\"plugins.security.disabled\"",
        "desc": "Whether to enable the security plugin, plugins.security.ssl.transport.keystore_filepath or plugins.security.ssl.transport.server.pemcert_filepath and plugins.security.ssl.transport.client.pemcert_filepath must be set for this plugin to be enabled.",
        "nixName": "settings.\"plugins.security.disabled\"",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "settings.\"transport.port\"",
        "desc": "The port to listen on for transport traffic.",
        "nixName": "settings.\"transport.port\"",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9300"
      },
      {
        "name": "user",
        "desc": "The user OpenSearch runs as. Should be left at default unless you have very specific needs.",
        "nixName": "user",
        "type": "string",
        "value": "opensearch"
      }
    ]
  },
  {
    "name": "VSCode",
    "desc": "Deploy Visual Studio Code (VSCode) with a one-click setup to access a powerful, lightweight code editor optimized for building, debugging, and collaborating on modern software projects.",
    "longDesc": "**What is VSCode?**\n\nVSCode is a free, open-source code editor developed by Microsoft. It supports a wide range of programming languages and integrates with frameworks and tools for tasks like debugging, testing, and version control. It’s known for its flexibility, rich extension ecosystem, and cross-platform availability.\n\n**Key Features:**\n\n- **One-Click Deployment:** Quickly set up VSCode through Docker containers for instant access on any platform.\n- **Extensive Language Support:** Built-in support for JavaScript, Python, Java, and more, with additional languages available via extensions.\n- **Integrated Tools:** Seamless integration with GitHub, Docker, and cloud services for version control, deployment, and collaboration.\n- **Live Collaboration:** Use features like Live Share to collaborate with others in real-time on coding projects.\n- **Customizable Workspace:** Configure and extend your development environment using themes, extensions, and profiles tailored to your workflow.",
    "useCases": "- **Developers:** Write, test, and debug code efficiently with language-aware tools and IntelliSense.\n- **Enterprises:** Manage complex projects and CI/CD pipelines with built-in Git and Docker tools.\n- **Educators and Students:** Use the collaborative tools and built-in terminals for teaching programming and coding exercises.",
    "support": "- **Community and Documentation:** Access guides and resources through the [VSCode documentation](https://code.visualstudio.com/docs) and the [GitHub repository](https://github.com/microsoft/vscode-docs).\n- **Extensions and Marketplace:** Find tools and add-ons on the [VSCode Marketplace](https://marketplace.visualstudio.com).\n- **Help and Troubleshooting:** Explore community forums or consult the official documentation for setup tips, best practices, and troubleshooting help.\n\n This deployment template highlights the ease of using VSCode on Xnode while focusing on privacy, collaboration, and flexibility through Docker deployment. For more information, visit the [official VSCode documentation](https://code.visualstudio.com/docs)",
    "nixName": "openvscode-server",
    "specs": {
      "ram": 2000,
      "storage": 10000
    },
    "tags": [
      "IDE",
      "Development",
      "Code",
      "Programming"
    ],
    "website": "https://github.com/gitpod-io/openvscode-server",
    "implemented": true,
    "logo": "https://code.visualstudio.com/assets/images/code-stable.png",
    "options": [
      {
        "name": "connectionToken",
        "desc": "A secret that must be included with all requests.",
        "nixName": "connectionToken",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "connectionTokenFile",
        "desc": "Path to a file that contains the connection token.",
        "nixName": "connectionTokenFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable openvscode-server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extensionsDir",
        "desc": "Set the root path for extensions.",
        "nixName": "extensionsDir",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "extraArguments",
        "desc": "Additional arguments to pass to openvscode-server.",
        "nixName": "extraArguments",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraEnvironment",
        "desc": "Additional environment variables to pass to openvscode-server.",
        "nixName": "extraEnvironment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "extraGroups",
        "desc": "An array of additional groups for the openvscode-server user.",
        "nixName": "extraGroups",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "extraPackages",
        "desc": "Additional packages to add to the openvscode-server PATH.",
        "nixName": "extraPackages",
        "type": "list of package",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "The group to run openvscode-server under. By default, a group named openvscode-server will be created.",
        "nixName": "group",
        "type": "string",
        "value": "openvscode-server"
      },
      {
        "name": "host",
        "desc": "The host name or IP address the server should listen to.",
        "nixName": "host",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "port",
        "desc": "The port the server should listen to. If 0 is passed a random free port is picked. If a range in the format num-num is passed, a free port from the range (end inclusive) is selected.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "4000"
      },
      {
        "name": "serverDataDir",
        "desc": "Specifies the directory that server data is kept in.",
        "nixName": "serverDataDir",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "socketPath",
        "desc": "The path to a socket file for the server to listen to.",
        "nixName": "socketPath",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "telemetryLevel",
        "desc": "Sets the initial telemetry level. Valid levels are: ‘off’, ‘crash’, ‘error’ and ‘all’.",
        "nixName": "telemetryLevel",
        "type": "null or one of \"off\", \"crash\", \"error\", \"all\"",
        "value": "null"
      },
      {
        "name": "user",
        "desc": "The user to run openvscode-server as. By default, a user named openvscode-server will be created.",
        "nixName": "user",
        "type": "string",
        "value": "openvscode-server"
      },
      {
        "name": "userDataDir",
        "desc": "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.",
        "nixName": "userDataDir",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "withoutConnectionToken",
        "desc": "Run without a connection token. Only use this if the connection is secured by other means.",
        "nixName": "withoutConnectionToken",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open ports in the firewall for this application.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      }
    ]
  },
  {
    "name": "Pleroma",
    "desc": "Deploy Pleroma to create a lightweight, decentralized social networking platform that allows users to communicate and share content freely. Pleroma is designed to be self-hosted, giving users control over their data and the community they build.",
    "longDesc": "Pleroma is an open-source social media server based on the ActivityPub protocol, allowing users to interact in a federated environment. It supports a variety of features typical in social networks, such as posts, direct messages, and notifications.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Pleroma using Docker or similar container technologies for quick installation and management.\n- **Scalability:** Designed to handle a large number of users and interactions efficiently, making it suitable for both small communities and larger instances.\n- **Privacy and Security:** Focuses on user privacy, allowing individuals to control their data and the visibility of their content.\n- **API Compatibility:** Integrates seamlessly with other platforms through the ActivityPub protocol, enabling interaction with different social networks.\n- **Customizable:** Offers extensive customization options, allowing users to modify the appearance and functionality of their instance.",
    "useCases": "- **Developers:** Create and manage their own social networking applications using Pleroma’s open-source codebase.\n- **Community Managers:** Foster online communities with customized features and privacy controls tailored to their members' needs.\n- **Educators:** Use Pleroma as a platform for collaborative learning and discussions in educational settings.",
    "support": "- **Community Forums:** Engage with the Pleroma community for support and discussions through the [Pleroma GitHub Repository](https://github.com/pleroma-social/pleroma).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Pleroma Documentation](https://docs-develop.pleroma.social/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Pleroma’s functionalities and practical applications, emphasizing its role in creating decentralized social networks. For more detailed information, visit the [official Pleroma documentation](https://docs-develop.pleroma.social/).",
    "nixName": "pleroma",
    "specs": {
      "ram": 2048,
      "storage": 0
    },
    "tags": [
      "Communication - Social Networks and Forums"
    ],
    "website": "https://git.pleroma.social/pleroma/pleroma",
    "implemented": false,
    "logo": "https://git.pleroma.social/uploads/-/system/appearance/favicon/1/favicon.png",
    "options": [
      {
        "name": "configs",
        "desc": "Pleroma public configuration. This list gets appended from left to right into /etc/pleroma/config.exs. Elixir evaluates its configuration imperatively, meaning you can override a setting by appending a new str to this NixOS option list. DO NOT STORE ANY PLEROMA SECRET HERE, use services.pleroma.secretConfigFile instead. This setting is going to be stored in a file part of the Nix store. The Nix store being world-readable, it’s not the right place to store any secret Have a look to Pleroma section in the NixOS manual for more information.",
        "nixName": "configs",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "enable",
        "desc": "Whether to enable pleroma.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group account under which pleroma runs.",
        "nixName": "group",
        "type": "string",
        "value": "pleroma"
      },
      {
        "name": "package",
        "desc": "The pleroma package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.pleroma"
      },
      {
        "name": "secretConfigFile",
        "desc": "Path to the file containing your secret pleroma configuration. DO NOT POINT THIS OPTION TO THE NIX STORE, the store being world-readable, it’ll compromise all your secrets.",
        "nixName": "secretConfigFile",
        "type": "string",
        "value": "/var/lib/pleroma/secrets.exs"
      },
      {
        "name": "stateDir",
        "desc": "Directory where the pleroma service will save the uploads and static files.",
        "nixName": "stateDir",
        "type": "string",
        "value": "/var/lib/pleroma"
      },
      {
        "name": "user",
        "desc": "User account under which pleroma runs.",
        "nixName": "user",
        "type": "string",
        "value": "pleroma"
      }
    ]
  },
  {
    "name": "Privoxy",
    "desc": "Deploy Privoxy to enhance your web browsing experience by providing advanced filtering capabilities and privacy protection. Privoxy acts as a proxy server that filters unwanted web page data, allowing users to block ads, manage cookies, and protect their online privacy.",
    "longDesc": "Privoxy is an open-source web proxy with filtering capabilities for enhancing privacy and usability. It integrates directly with any web browser and can be configured to block ads, manage cookies, and strip unwanted content from web pages.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Privoxy using Docker or other container technologies for quick installation and management.\n- **Scalability:** Supports multiple users and configurations, making it suitable for both personal and enterprise use.\n- **Privacy and Security:** Enhances user privacy by filtering out tracking cookies, ads, and other unwanted content.\n- **Customizable Rules:** Allows users to create and modify filtering rules based on their needs, providing flexibility in content management.\n- **HTTP/HTTPS Support:** Handles both HTTP and HTTPS traffic, ensuring comprehensive web browsing security.",
    "useCases": "- **Individuals:** Block intrusive ads and trackers while browsing the internet, improving page load times and user experience.\n- **Families:** Set up Privoxy on home networks to provide safer browsing experiences for children by filtering unwanted content.\n- **Businesses:** Implement Privoxy as part of a broader security strategy to protect employee privacy and manage web traffic effectively.",
    "support": "- **Community Forums:** Engage with the Privoxy community for support and discussions through the [Privoxy GitHub Repository](https://github.com/zouguangxian/Privoxy).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Privoxy Official Documentation](https://www.privoxy.org/user-manual/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides an overview of Privoxy’s functionalities and practical applications, emphasizing its importance in enhancing web browsing privacy and usability. For more detailed information, visit the [official Privoxy website](https://www.privoxy.org/).",
    "nixName": "privoxy",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Proxy"
    ],
    "website": "https://www.privoxy.org/",
    "logo": "",
    "options": [
      {
        "name": "certsLifetime",
        "desc": "If inspectHttps is enabled, the time generated HTTPS certificates will be stored in a temporary directory for reuse. Once the lifetime has expired the directory will cleared and the certificate will have to be generated again, on-demand. Depending on the traffic, you may want to reduce the lifetime to limit the disk usage, since Privoxy itself never deletes the certificates.  The format is that of the tmpfiles.d(5) Age parameter.",
        "nixName": "certsLifetime",
        "type": "tmpfiles.d(5) age format",
        "value": "\"10d\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable Privoxy, non-caching filtering proxy.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableTor",
        "desc": "Whether to configure Privoxy to use Tor’s faster SOCKS port, suitable for HTTP.",
        "nixName": "enableTor",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "inspectHttps",
        "desc": "Whether to configure Privoxy to inspect HTTPS requests, meaning all encrypted traffic will be filtered as well. This works by decrypting and re-encrypting the requests using a per-domain generated certificate. To issue per-domain certificates, Privoxy must be provided with a CA certificate, using the ca-cert-file, ca-key-file settings.  The CA certificate must also be added to the system trust roots, otherwise browsers will reject all Privoxy certificates as invalid. You can do so by using the option security.pki.certificateFiles.",
        "nixName": "inspectHttps",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings",
        "desc": "This option is mapped to the main Privoxy configuration file. Check out the Privoxy user manual at https://www.privoxy.org/user-manual/config.html for available settings and documentation.  Repeated settings can be represented by using a list.",
        "nixName": "settings",
        "type": "privoxy configuration type. The format consists of an attribute\nset of settings. Each setting can be either a value (integer, string,\nboolean or path) or a list of such values.\n",
        "value": "{ }"
      },
      {
        "name": "settings.actionsfile",
        "desc": "List of paths to Privoxy action files. These paths may either be absolute or relative to the privoxy configuration directory.",
        "nixName": "settings.actionsfile",
        "type": "list of string",
        "value": "[\n  \"match-all.action\"\n  \"default.action\"\n]"
      },
      {
        "name": "settings.enable-edit-actions",
        "desc": "Whether the web-based actions file editor may be used.",
        "nixName": "settings.enable-edit-actions",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings.filterfile",
        "desc": "List of paths to Privoxy filter files. These paths may either be absolute or relative to the privoxy configuration directory.",
        "nixName": "settings.filterfile",
        "type": "list of string",
        "value": "[\n  \"default.filter\"\n]"
      },
      {
        "name": "settings.listen-address",
        "desc": "Pair of address:port the proxy server is listening to.",
        "nixName": "settings.listen-address",
        "type": "string",
        "value": "127.0.0.1:8118"
      },
      {
        "name": "userActions",
        "desc": "Actions to be included in a user.action file. This will have a higher priority and can be used to override all other actions.",
        "nixName": "userActions",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "userFilters",
        "desc": "Filters to be included in a user.filter file. This will have a higher priority and can be used to override all other filters definitions.",
        "nixName": "userFilters",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      }
    ]
  },
  {
    "name": "Prometheus",
    "desc": "Deploy Prometheus to monitor and alert on the performance and reliability of your systems and applications. Prometheus is an open-source systems monitoring and alerting toolkit designed for reliability and scalability.",
    "longDesc": "Prometheus is a powerful open-source monitoring solution that collects metrics from configured targets at specified intervals, evaluates rule expressions, and triggers alerts if certain conditions are met. It is widely used for monitoring microservices and cloud-native environments.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Prometheus using Docker or Kubernetes for rapid installation and configuration.\n- **Scalability:** Capable of handling millions of time series data points, making it suitable for large-scale environments.\n- **Privacy and Security:** Collects metrics without storing sensitive data, enhancing security during monitoring.\n- **API Compatibility:** Provides a powerful HTTP API for querying and retrieving metrics, enabling integration with various tools and dashboards.\n- **Flexible Data Model:** Supports multidimensional data collection with time series data, allowing users to slice and dice metrics according to their needs.",
    "useCases": "- **DevOps Teams:** Monitor application performance, server health, and system resource usage, enabling proactive incident management.\n- **Enterprises:** Implement Prometheus to ensure the reliability and performance of services, particularly in microservices architectures.\n- **Educators:** Use Prometheus in courses focused on monitoring, cloud computing, and DevOps practices.",
    "support": "- **Community Forums:** Engage with the Prometheus community for support and discussions through the [Prometheus Users Mailing List](https://groups.google.com/forum/#!forum/prometheus-userss) and [Prometheus GitHub Repository](https://github.com/prometheus/prometheus).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Prometheus Documentation](https://prometheus.io/docs/introduction/overview/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Prometheus’s functionalities and practical applications, emphasizing its importance in monitoring and alerting. For more detailed information, visit the [official Prometheus website](https://prometheus.io/).",
    "nixName": "prometheus",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Monitoring"
    ],
    "website": "https://prometheus.io",
    "implemented": false,
    "logo": "https://prometheus.io/assets/favicons/favicon.ico",
    "options": [
      {
        "name": "alertmanager.checkConfig",
        "desc": "Check configuration with amtool check-config. The call to amtool is subject to sandboxing by Nix. If you use credentials stored in external files (environmentFile, etc), they will not be visible to amtool and it will report errors, despite a correct configuration.",
        "nixName": "alertmanager.checkConfig",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "alertmanager.clusterPeers",
        "desc": "Initial peers for HA cluster.",
        "nixName": "alertmanager.clusterPeers",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "alertmanager.configText",
        "desc": "Alertmanager configuration as YAML text. If non-null, this option defines the text that is written to alertmanager.yml. If null, the contents of alertmanager.yml is generated from the structured config options.",
        "nixName": "alertmanager.configText",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "alertmanager.configuration",
        "desc": "Alertmanager configuration as nix attribute set.",
        "nixName": "alertmanager.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "alertmanager.enable",
        "desc": "Whether to enable Prometheus Alertmanager.",
        "nixName": "alertmanager.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "alertmanager.environmentFile",
        "desc": "File to load as environment file. Environment variables from this file will be interpolated into the config file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE}",
        "nixName": "alertmanager.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "alertmanager.extraFlags",
        "desc": "Extra commandline options when launching the Alertmanager.",
        "nixName": "alertmanager.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "alertmanager.listenAddress",
        "desc": "Address to listen on for the web interface and API. Empty string will listen on all interfaces. “localhost” will listen on 127.0.0.1 (but not ::1).",
        "nixName": "alertmanager.listenAddress",
        "type": "string",
        "value": ""
      },
      {
        "name": "alertmanager.logFormat",
        "desc": "If set use a syslog logger or JSON logging.",
        "nixName": "alertmanager.logFormat",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "alertmanager.logLevel",
        "desc": "Only log messages with the given severity or above.",
        "nixName": "alertmanager.logLevel",
        "type": "one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
        "value": "\"warn\""
      },
      {
        "name": "alertmanager.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "alertmanager.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "alertmanager.package",
        "desc": "The prometheus-alertmanager package to use.",
        "nixName": "alertmanager.package",
        "type": "package",
        "value": "pkgs.prometheus-alertmanager"
      },
      {
        "name": "alertmanager.port",
        "desc": "Port to listen on for the web interface and API.",
        "nixName": "alertmanager.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9093"
      },
      {
        "name": "alertmanager.webExternalUrl",
        "desc": "The URL under which Alertmanager is externally reachable (for example, if Alertmanager is served via a reverse proxy). Used for generating relative and absolute links back to Alertmanager itself. If the URL has a path portion, it will be used to prefix all HTTP endoints served by Alertmanager. If omitted, relevant URL components will be derived automatically.",
        "nixName": "alertmanager.webExternalUrl",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "alertmanagerIrcRelay.enable",
        "desc": "Whether to enable Alertmanager IRC Relay.",
        "nixName": "alertmanagerIrcRelay.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "alertmanagerIrcRelay.extraFlags",
        "desc": "Extra command line options to pass to alertmanager-irc-relay.",
        "nixName": "alertmanagerIrcRelay.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "alertmanagerIrcRelay.package",
        "desc": "The alertmanager-irc-relay package to use.",
        "nixName": "alertmanagerIrcRelay.package",
        "type": "package",
        "value": "pkgs.alertmanager-irc-relay"
      },
      {
        "name": "alertmanagerIrcRelay.settings",
        "desc": "Configuration for Alertmanager IRC Relay as a Nix attribute set. For a reference, check out the example configuration and the source code. Note: The webhook’s URL MUST point to the IRC channel where the message should be posted. For #mychannel from the example, this would be http://localhost:8080/mychannel.",
        "nixName": "alertmanagerIrcRelay.settings",
        "type": "YAML value",
        "value": ""
      },
      {
        "name": "alertmanagerNotificationQueueCapacity",
        "desc": "The capacity of the queue for pending alert manager notifications.",
        "nixName": "alertmanagerNotificationQueueCapacity",
        "type": "signed integer",
        "value": "10000"
      },
      {
        "name": "alertmanagerWebhookLogger.enable",
        "desc": "Whether to enable Alertmanager Webhook Logger.",
        "nixName": "alertmanagerWebhookLogger.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "alertmanagerWebhookLogger.extraFlags",
        "desc": "Extra command line options to pass to alertmanager-webhook-logger.",
        "nixName": "alertmanagerWebhookLogger.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "alertmanagerWebhookLogger.package",
        "desc": "The alertmanager-webhook-logger package to use.",
        "nixName": "alertmanagerWebhookLogger.package",
        "type": "package",
        "value": "pkgs.alertmanager-webhook-logger"
      },
      {
        "name": "alertmanagers",
        "desc": "A list of alertmanagers to send alerts to. See the official documentation for more information.",
        "nixName": "alertmanagers",
        "type": "list of (attribute set)",
        "value": "[ ]"
      },
      {
        "name": "checkConfig",
        "desc": "Check configuration with promtool check. The call to promtool is subject to sandboxing by Nix. If you use credentials stored in external files (password_file, bearer_token_file, etc), they will not be visible to promtool and it will report errors, despite a correct configuration. To resolve this, you may set this option to syntax-only in order to only syntax check the Prometheus configuration.",
        "nixName": "checkConfig",
        "type": "boolean or value \"syntax-only\" (singular enum)",
        "value": "true"
      },
      {
        "name": "configText",
        "desc": "If non-null, this option defines the text that is written to prometheus.yml. If null, the contents of prometheus.yml is generated from the structured config options.",
        "nixName": "configText",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Prometheus monitoring daemon.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableAgentMode",
        "desc": "Whether to enable agent mode.",
        "nixName": "enableAgentMode",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "enableReload",
        "desc": "Reload prometheus when configuration file changes (instead of restart). The following property holds: switching to a configuration (switch-to-configuration) that changes the prometheus configuration only finishes successfully when prometheus has finished loading the new configuration.",
        "nixName": "enableReload",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters",
        "desc": "Prometheus exporter configuration",
        "nixName": "exporters",
        "type": "submodule",
        "value": "{ }"
      },
      {
        "name": "exporters.apcupsd.apcupsdAddress",
        "desc": "Address of the apcupsd Network Information Server (NIS).",
        "nixName": "exporters.apcupsd.apcupsdAddress",
        "type": "string",
        "value": ":3551"
      },
      {
        "name": "exporters.apcupsd.apcupsdNetwork",
        "desc": "Network of the apcupsd Network Information Server (NIS): one of “tcp”, “tcp4”, or “tcp6”.",
        "nixName": "exporters.apcupsd.apcupsdNetwork",
        "type": "one of \"tcp\", \"tcp4\", \"tcp6\"",
        "value": "\"tcp\""
      },
      {
        "name": "exporters.apcupsd.enable",
        "desc": "Whether to enable the prometheus apcupsd exporter.",
        "nixName": "exporters.apcupsd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.apcupsd.extraFlags",
        "desc": "Extra commandline options to pass to the apcupsd exporter.",
        "nixName": "exporters.apcupsd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.apcupsd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.apcupsd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.apcupsd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.apcupsd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.apcupsd.openFirewall is true.",
        "nixName": "exporters.apcupsd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.apcupsd.group",
        "desc": "Group under which the apcupsd exporter shall be run.",
        "nixName": "exporters.apcupsd.group",
        "type": "string",
        "value": "apcupsd-exporter"
      },
      {
        "name": "exporters.apcupsd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.apcupsd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.apcupsd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.apcupsd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.apcupsd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.apcupsd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9162"
      },
      {
        "name": "exporters.apcupsd.user",
        "desc": "User name under which the apcupsd exporter shall be run.",
        "nixName": "exporters.apcupsd.user",
        "type": "string",
        "value": "apcupsd-exporter"
      },
      {
        "name": "exporters.artifactory.artiAccessToken",
        "desc": "Access token for authentication against JFrog Artifactory API. One of the password or access token needs to be set.",
        "nixName": "exporters.artifactory.artiAccessToken",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.artifactory.artiPassword",
        "desc": "Password for authentication against JFrog Artifactory API. One of the password or access token needs to be set.",
        "nixName": "exporters.artifactory.artiPassword",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.artifactory.artiUsername",
        "desc": "Username for authentication against JFrog Artifactory API.",
        "nixName": "exporters.artifactory.artiUsername",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.artifactory.enable",
        "desc": "Whether to enable the prometheus artifactory exporter.",
        "nixName": "exporters.artifactory.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.artifactory.extraFlags",
        "desc": "Extra commandline options to pass to the artifactory exporter.",
        "nixName": "exporters.artifactory.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.artifactory.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.artifactory.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.artifactory.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.artifactory.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.artifactory.openFirewall is true.",
        "nixName": "exporters.artifactory.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.artifactory.group",
        "desc": "Group under which the artifactory exporter shall be run.",
        "nixName": "exporters.artifactory.group",
        "type": "string",
        "value": "artifactory-exporter"
      },
      {
        "name": "exporters.artifactory.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.artifactory.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.artifactory.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.artifactory.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.artifactory.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.artifactory.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9531"
      },
      {
        "name": "exporters.artifactory.scrapeUri",
        "desc": "URI on which to scrape JFrog Artifactory.",
        "nixName": "exporters.artifactory.scrapeUri",
        "type": "string",
        "value": "http://localhost:8081/artifactory"
      },
      {
        "name": "exporters.artifactory.user",
        "desc": "User name under which the artifactory exporter shall be run.",
        "nixName": "exporters.artifactory.user",
        "type": "string",
        "value": "artifactory-exporter"
      },
      {
        "name": "exporters.bind.bindGroups",
        "desc": "List of statistics to collect. Available: [server, view, tasks]",
        "nixName": "exporters.bind.bindGroups",
        "type": "list of (one of \"server\", \"view\", \"tasks\")",
        "value": "[\n  \"server\"\n  \"view\"\n]"
      },
      {
        "name": "exporters.bind.bindTimeout",
        "desc": "Timeout for trying to get stats from Bind.",
        "nixName": "exporters.bind.bindTimeout",
        "type": "string",
        "value": "10s"
      },
      {
        "name": "exporters.bind.bindURI",
        "desc": "HTTP XML API address of an Bind server.",
        "nixName": "exporters.bind.bindURI",
        "type": "string",
        "value": "http://localhost:8053/"
      },
      {
        "name": "exporters.bind.bindVersion",
        "desc": "BIND statistics version. Can be detected automatically.",
        "nixName": "exporters.bind.bindVersion",
        "type": "one of \"xml.v2\", \"xml.v3\", \"auto\"",
        "value": "\"auto\""
      },
      {
        "name": "exporters.bind.enable",
        "desc": "Whether to enable the prometheus bind exporter.",
        "nixName": "exporters.bind.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bind.extraFlags",
        "desc": "Extra commandline options to pass to the bind exporter.",
        "nixName": "exporters.bind.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.bind.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.bind.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.bind.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.bind.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.bind.openFirewall is true.",
        "nixName": "exporters.bind.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.bind.group",
        "desc": "Group under which the bind exporter shall be run.",
        "nixName": "exporters.bind.group",
        "type": "string",
        "value": "bind-exporter"
      },
      {
        "name": "exporters.bind.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.bind.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.bind.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.bind.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bind.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.bind.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9119"
      },
      {
        "name": "exporters.bind.user",
        "desc": "User name under which the bind exporter shall be run.",
        "nixName": "exporters.bind.user",
        "type": "string",
        "value": "bind-exporter"
      },
      {
        "name": "exporters.bird.birdSocket",
        "desc": "Path to BIRD2 (or BIRD1 v4) socket.",
        "nixName": "exporters.bird.birdSocket",
        "type": "path",
        "value": "\"/run/bird/bird.ctl\""
      },
      {
        "name": "exporters.bird.birdVersion",
        "desc": "Specifies whether BIRD1 or BIRD2 is in use.",
        "nixName": "exporters.bird.birdVersion",
        "type": "one of 1, 2",
        "value": "2"
      },
      {
        "name": "exporters.bird.enable",
        "desc": "Whether to enable the prometheus bird exporter.",
        "nixName": "exporters.bird.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bird.extraFlags",
        "desc": "Extra commandline options to pass to the bird exporter.",
        "nixName": "exporters.bird.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.bird.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.bird.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.bird.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.bird.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.bird.openFirewall is true.",
        "nixName": "exporters.bird.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.bird.group",
        "desc": "Group under which the bird exporter shall be run.",
        "nixName": "exporters.bird.group",
        "type": "string",
        "value": "bird-exporter"
      },
      {
        "name": "exporters.bird.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.bird.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.bird.newMetricFormat",
        "desc": "Enable the new more-generic metric format.",
        "nixName": "exporters.bird.newMetricFormat",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.bird.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.bird.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bird.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.bird.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9324"
      },
      {
        "name": "exporters.bird.user",
        "desc": "User name under which the bird exporter shall be run.",
        "nixName": "exporters.bird.user",
        "type": "string",
        "value": "bird-exporter"
      },
      {
        "name": "exporters.bitcoin.enable",
        "desc": "Whether to enable the prometheus bitcoin exporter.",
        "nixName": "exporters.bitcoin.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bitcoin.extraEnv",
        "desc": "Extra environment variables for the exporter.",
        "nixName": "exporters.bitcoin.extraEnv",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.bitcoin.extraFlags",
        "desc": "Extra commandline options to pass to the bitcoin exporter.",
        "nixName": "exporters.bitcoin.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.bitcoin.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.bitcoin.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.bitcoin.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.bitcoin.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.bitcoin.openFirewall is true.",
        "nixName": "exporters.bitcoin.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.bitcoin.group",
        "desc": "Group under which the bitcoin exporter shall be run.",
        "nixName": "exporters.bitcoin.group",
        "type": "string",
        "value": "bitcoin-exporter"
      },
      {
        "name": "exporters.bitcoin.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.bitcoin.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.bitcoin.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.bitcoin.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.bitcoin.package",
        "desc": "The prometheus-bitcoin-exporter package to use.",
        "nixName": "exporters.bitcoin.package",
        "type": "package",
        "value": "pkgs.prometheus-bitcoin-exporter"
      },
      {
        "name": "exporters.bitcoin.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.bitcoin.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9332"
      },
      {
        "name": "exporters.bitcoin.refreshSeconds",
        "desc": "How often to ask bitcoind for metrics.",
        "nixName": "exporters.bitcoin.refreshSeconds",
        "type": "unsigned integer, meaning >=0",
        "value": "300"
      },
      {
        "name": "exporters.bitcoin.rpcHost",
        "desc": "RPC host.",
        "nixName": "exporters.bitcoin.rpcHost",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "exporters.bitcoin.rpcPasswordFile",
        "desc": "File containing RPC password.",
        "nixName": "exporters.bitcoin.rpcPasswordFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.bitcoin.rpcPort",
        "desc": "RPC port number.",
        "nixName": "exporters.bitcoin.rpcPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8332"
      },
      {
        "name": "exporters.bitcoin.rpcScheme",
        "desc": "Whether to connect to bitcoind over http or https.",
        "nixName": "exporters.bitcoin.rpcScheme",
        "type": "one of \"http\", \"https\"",
        "value": "\"http\""
      },
      {
        "name": "exporters.bitcoin.rpcUser",
        "desc": "RPC user name.",
        "nixName": "exporters.bitcoin.rpcUser",
        "type": "string",
        "value": "bitcoinrpc"
      },
      {
        "name": "exporters.bitcoin.user",
        "desc": "User name under which the bitcoin exporter shall be run.",
        "nixName": "exporters.bitcoin.user",
        "type": "string",
        "value": "bitcoin-exporter"
      },
      {
        "name": "exporters.blackbox.configFile",
        "desc": "Path to configuration file.",
        "nixName": "exporters.blackbox.configFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.blackbox.enable",
        "desc": "Whether to enable the prometheus blackbox exporter.",
        "nixName": "exporters.blackbox.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.blackbox.enableConfigCheck",
        "desc": "Whether to run a correctness check for the configuration file. This depends on the configuration file residing in the nix-store. Paths passed as string will be copied to the store.",
        "nixName": "exporters.blackbox.enableConfigCheck",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.blackbox.extraFlags",
        "desc": "Extra commandline options to pass to the blackbox exporter.",
        "nixName": "exporters.blackbox.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.blackbox.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.blackbox.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.blackbox.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.blackbox.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.blackbox.openFirewall is true.",
        "nixName": "exporters.blackbox.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.blackbox.group",
        "desc": "Group under which the blackbox exporter shall be run.",
        "nixName": "exporters.blackbox.group",
        "type": "string",
        "value": "blackbox-exporter"
      },
      {
        "name": "exporters.blackbox.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.blackbox.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.blackbox.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.blackbox.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.blackbox.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.blackbox.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9115"
      },
      {
        "name": "exporters.blackbox.user",
        "desc": "User name under which the blackbox exporter shall be run.",
        "nixName": "exporters.blackbox.user",
        "type": "string",
        "value": "blackbox-exporter"
      },
      {
        "name": "exporters.borgmatic.configFile",
        "desc": "The path to the borgmatic config file",
        "nixName": "exporters.borgmatic.configFile",
        "type": "path",
        "value": "\"/etc/borgmatic/config.yaml\""
      },
      {
        "name": "exporters.borgmatic.enable",
        "desc": "Whether to enable the prometheus borgmatic exporter.",
        "nixName": "exporters.borgmatic.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.borgmatic.extraFlags",
        "desc": "Extra commandline options to pass to the borgmatic exporter.",
        "nixName": "exporters.borgmatic.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.borgmatic.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.borgmatic.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.borgmatic.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.borgmatic.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.borgmatic.openFirewall is true.",
        "nixName": "exporters.borgmatic.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.borgmatic.group",
        "desc": "Group under which the borgmatic exporter shall be run.",
        "nixName": "exporters.borgmatic.group",
        "type": "string",
        "value": "borgmatic-exporter"
      },
      {
        "name": "exporters.borgmatic.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.borgmatic.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.borgmatic.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.borgmatic.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.borgmatic.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.borgmatic.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9996"
      },
      {
        "name": "exporters.borgmatic.user",
        "desc": "User name under which the borgmatic exporter shall be run.",
        "nixName": "exporters.borgmatic.user",
        "type": "string",
        "value": "borgmatic-exporter"
      },
      {
        "name": "exporters.buildkite-agent.enable",
        "desc": "Whether to enable the prometheus buildkite-agent exporter.",
        "nixName": "exporters.buildkite-agent.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.buildkite-agent.endpoint",
        "desc": "The Buildkite Agent API endpoint.",
        "nixName": "exporters.buildkite-agent.endpoint",
        "type": "string",
        "value": "https://agent.buildkite.com/v3"
      },
      {
        "name": "exporters.buildkite-agent.extraFlags",
        "desc": "Extra commandline options to pass to the buildkite-agent exporter.",
        "nixName": "exporters.buildkite-agent.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.buildkite-agent.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.buildkite-agent.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.buildkite-agent.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.buildkite-agent.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.buildkite-agent.openFirewall is true.",
        "nixName": "exporters.buildkite-agent.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.buildkite-agent.group",
        "desc": "Group under which the buildkite-agent exporter shall be run.",
        "nixName": "exporters.buildkite-agent.group",
        "type": "string",
        "value": "buildkite-agent-exporter"
      },
      {
        "name": "exporters.buildkite-agent.interval",
        "desc": "How often to update metrics.",
        "nixName": "exporters.buildkite-agent.interval",
        "type": "string",
        "value": "30s"
      },
      {
        "name": "exporters.buildkite-agent.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.buildkite-agent.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.buildkite-agent.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.buildkite-agent.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.buildkite-agent.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.buildkite-agent.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9876"
      },
      {
        "name": "exporters.buildkite-agent.queues",
        "desc": "Which specific queues to process.",
        "nixName": "exporters.buildkite-agent.queues",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "exporters.buildkite-agent.tokenPath",
        "desc": "The token from your Buildkite “Agents” page. A run-time path to the token file, which is supposed to be provisioned outside of Nix store.",
        "nixName": "exporters.buildkite-agent.tokenPath",
        "type": "null or path",
        "value": ""
      },
      {
        "name": "exporters.buildkite-agent.user",
        "desc": "User name under which the buildkite-agent exporter shall be run.",
        "nixName": "exporters.buildkite-agent.user",
        "type": "string",
        "value": "buildkite-agent-exporter"
      },
      {
        "name": "exporters.collectd.collectdBinary.authFile",
        "desc": "File mapping user names to pre-shared keys (passwords).",
        "nixName": "exporters.collectd.collectdBinary.authFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.collectd.collectdBinary.enable",
        "desc": "Whether to enable collectd binary protocol receiver.",
        "nixName": "exporters.collectd.collectdBinary.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.collectd.collectdBinary.listenAddress",
        "desc": "Address to listen on for binary network packets.",
        "nixName": "exporters.collectd.collectdBinary.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.collectd.collectdBinary.port",
        "desc": "Network address on which to accept collectd binary network packets.",
        "nixName": "exporters.collectd.collectdBinary.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "25826"
      },
      {
        "name": "exporters.collectd.collectdBinary.securityLevel",
        "desc": "Minimum required security level for accepted packets.",
        "nixName": "exporters.collectd.collectdBinary.securityLevel",
        "type": "one of \"None\", \"Sign\", \"Encrypt\"",
        "value": "\"None\""
      },
      {
        "name": "exporters.collectd.enable",
        "desc": "Whether to enable the prometheus collectd exporter.",
        "nixName": "exporters.collectd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.collectd.extraFlags",
        "desc": "Extra commandline options to pass to the collectd exporter.",
        "nixName": "exporters.collectd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.collectd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.collectd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.collectd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.collectd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.collectd.openFirewall is true.",
        "nixName": "exporters.collectd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.collectd.group",
        "desc": "Group under which the collectd exporter shall be run.",
        "nixName": "exporters.collectd.group",
        "type": "string",
        "value": "collectd-exporter"
      },
      {
        "name": "exporters.collectd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.collectd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.collectd.logFormat",
        "desc": "Set the log format.",
        "nixName": "exporters.collectd.logFormat",
        "type": "one of \"logfmt\", \"json\"",
        "value": "\"logfmt\""
      },
      {
        "name": "exporters.collectd.logLevel",
        "desc": "Only log messages with the given severity or above.",
        "nixName": "exporters.collectd.logLevel",
        "type": "one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
        "value": "\"info\""
      },
      {
        "name": "exporters.collectd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.collectd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.collectd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.collectd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9103"
      },
      {
        "name": "exporters.collectd.user",
        "desc": "User name under which the collectd exporter shall be run.",
        "nixName": "exporters.collectd.user",
        "type": "string",
        "value": "collectd-exporter"
      },
      {
        "name": "exporters.deluge.delugeHost",
        "desc": "Hostname where deluge server is running.",
        "nixName": "exporters.deluge.delugeHost",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "exporters.deluge.delugePassword",
        "desc": "Password to connect to deluge server. This stores the password unencrypted in the nix store and is thus considered unsafe. Prefer using the delugePasswordFile option.",
        "nixName": "exporters.deluge.delugePassword",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.deluge.delugePasswordFile",
        "desc": "File containing the password to connect to deluge server.",
        "nixName": "exporters.deluge.delugePasswordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.deluge.delugePort",
        "desc": "Port where deluge server is listening.",
        "nixName": "exporters.deluge.delugePort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "58846"
      },
      {
        "name": "exporters.deluge.delugeUser",
        "desc": "User to connect to deluge server.",
        "nixName": "exporters.deluge.delugeUser",
        "type": "string",
        "value": "localclient"
      },
      {
        "name": "exporters.deluge.enable",
        "desc": "Whether to enable the prometheus deluge exporter.",
        "nixName": "exporters.deluge.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.deluge.exportPerTorrentMetrics",
        "desc": "Enable per-torrent metrics. This may significantly increase the number of time series depending on the number of torrents in your Deluge instance.",
        "nixName": "exporters.deluge.exportPerTorrentMetrics",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.deluge.extraFlags",
        "desc": "Extra commandline options to pass to the deluge exporter.",
        "nixName": "exporters.deluge.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.deluge.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.deluge.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.deluge.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.deluge.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.deluge.openFirewall is true.",
        "nixName": "exporters.deluge.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.deluge.group",
        "desc": "Group under which the deluge exporter shall be run.",
        "nixName": "exporters.deluge.group",
        "type": "string",
        "value": "deluge-exporter"
      },
      {
        "name": "exporters.deluge.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.deluge.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.deluge.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.deluge.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.deluge.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.deluge.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9354"
      },
      {
        "name": "exporters.deluge.user",
        "desc": "User name under which the deluge exporter shall be run.",
        "nixName": "exporters.deluge.user",
        "type": "string",
        "value": "deluge-exporter"
      },
      {
        "name": "exporters.dmarc.debug",
        "desc": "Whether to declare enable --debug.",
        "nixName": "exporters.dmarc.debug",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dmarc.deduplicationMaxSeconds",
        "desc": "How long individual report IDs will be remembered to avoid counting double delivered reports twice.",
        "nixName": "exporters.dmarc.deduplicationMaxSeconds",
        "type": "unsigned integer, meaning >=0",
        "value": "\"7 days (in seconds)\""
      },
      {
        "name": "exporters.dmarc.enable",
        "desc": "Whether to enable the prometheus dmarc exporter.",
        "nixName": "exporters.dmarc.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dmarc.extraFlags",
        "desc": "Extra commandline options to pass to the dmarc exporter.",
        "nixName": "exporters.dmarc.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.dmarc.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.dmarc.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.dmarc.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dmarc.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.dmarc.openFirewall is true.",
        "nixName": "exporters.dmarc.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.dmarc.folders.done",
        "desc": "IMAP mailbox that successfully processed reports are moved to.",
        "nixName": "exporters.dmarc.folders.done",
        "type": "string",
        "value": "Archive"
      },
      {
        "name": "exporters.dmarc.folders.error",
        "desc": "IMAP mailbox that emails are moved to that could not be processed.",
        "nixName": "exporters.dmarc.folders.error",
        "type": "string",
        "value": "Invalid"
      },
      {
        "name": "exporters.dmarc.folders.inbox",
        "desc": "IMAP mailbox that is checked for incoming DMARC aggregate reports",
        "nixName": "exporters.dmarc.folders.inbox",
        "type": "string",
        "value": "INBOX"
      },
      {
        "name": "exporters.dmarc.group",
        "desc": "Group under which the dmarc exporter shall be run.",
        "nixName": "exporters.dmarc.group",
        "type": "string",
        "value": "dmarc-exporter"
      },
      {
        "name": "exporters.dmarc.imap.host",
        "desc": "Hostname of IMAP server to connect to.",
        "nixName": "exporters.dmarc.imap.host",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "exporters.dmarc.imap.passwordFile",
        "desc": "File containing the login password for the IMAP connection.",
        "nixName": "exporters.dmarc.imap.passwordFile",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.dmarc.imap.port",
        "desc": "Port of the IMAP server to connect to.",
        "nixName": "exporters.dmarc.imap.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "993"
      },
      {
        "name": "exporters.dmarc.imap.username",
        "desc": "Login username for the IMAP connection.",
        "nixName": "exporters.dmarc.imap.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.dmarc.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.dmarc.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.dmarc.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.dmarc.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dmarc.pollIntervalSeconds",
        "desc": "How often to poll the IMAP server in seconds.",
        "nixName": "exporters.dmarc.pollIntervalSeconds",
        "type": "unsigned integer, meaning >=0",
        "value": "60"
      },
      {
        "name": "exporters.dmarc.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.dmarc.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9797"
      },
      {
        "name": "exporters.dmarc.user",
        "desc": "User name under which the dmarc exporter shall be run.",
        "nixName": "exporters.dmarc.user",
        "type": "string",
        "value": "dmarc-exporter"
      },
      {
        "name": "exporters.dnsmasq.dnsmasqListenAddress",
        "desc": "Address on which dnsmasq listens.",
        "nixName": "exporters.dnsmasq.dnsmasqListenAddress",
        "type": "string",
        "value": "localhost:53"
      },
      {
        "name": "exporters.dnsmasq.enable",
        "desc": "Whether to enable the prometheus dnsmasq exporter.",
        "nixName": "exporters.dnsmasq.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dnsmasq.extraFlags",
        "desc": "Extra commandline options to pass to the dnsmasq exporter.",
        "nixName": "exporters.dnsmasq.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.dnsmasq.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.dnsmasq.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.dnsmasq.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dnsmasq.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.dnsmasq.openFirewall is true.",
        "nixName": "exporters.dnsmasq.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.dnsmasq.group",
        "desc": "Group under which the dnsmasq exporter shall be run.",
        "nixName": "exporters.dnsmasq.group",
        "type": "string",
        "value": "dnsmasq-exporter"
      },
      {
        "name": "exporters.dnsmasq.leasesPath",
        "desc": "Path to the dnsmasq.leases file.",
        "nixName": "exporters.dnsmasq.leasesPath",
        "type": "path",
        "value": "\"/var/lib/misc/dnsmasq.leases\""
      },
      {
        "name": "exporters.dnsmasq.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.dnsmasq.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.dnsmasq.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.dnsmasq.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dnsmasq.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.dnsmasq.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9153"
      },
      {
        "name": "exporters.dnsmasq.user",
        "desc": "User name under which the dnsmasq exporter shall be run.",
        "nixName": "exporters.dnsmasq.user",
        "type": "string",
        "value": "dnsmasq-exporter"
      },
      {
        "name": "exporters.dnssec.configuration",
        "desc": "dnssec exporter configuration as nix attribute set. See https://github.com/chrj/prometheus-dnssec-exporter/blob/master/README.md for the description of the configuration file format.",
        "nixName": "exporters.dnssec.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "exporters.dnssec.enable",
        "desc": "Whether to enable the prometheus dnssec exporter.",
        "nixName": "exporters.dnssec.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dnssec.extraFlags",
        "desc": "Extra commandline options when launching Prometheus.",
        "nixName": "exporters.dnssec.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.dnssec.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.dnssec.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.dnssec.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dnssec.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.dnssec.openFirewall is true.",
        "nixName": "exporters.dnssec.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.dnssec.group",
        "desc": "Group under which the dnssec exporter shall be run.",
        "nixName": "exporters.dnssec.group",
        "type": "string",
        "value": "dnssec-exporter"
      },
      {
        "name": "exporters.dnssec.listenAddress",
        "desc": "Listen address as host IP and port definition.",
        "nixName": "exporters.dnssec.listenAddress",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dnssec.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.dnssec.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dnssec.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.dnssec.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9204"
      },
      {
        "name": "exporters.dnssec.resolvers",
        "desc": "DNSSEC capable resolver to be used for the check.",
        "nixName": "exporters.dnssec.resolvers",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.dnssec.timeout",
        "desc": "DNS request timeout duration.",
        "nixName": "exporters.dnssec.timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dnssec.user",
        "desc": "User name under which the dnssec exporter shall be run.",
        "nixName": "exporters.dnssec.user",
        "type": "string",
        "value": "dnssec-exporter"
      },
      {
        "name": "exporters.domain.enable",
        "desc": "Whether to enable the prometheus domain exporter.",
        "nixName": "exporters.domain.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.domain.extraFlags",
        "desc": "Extra commandline options to pass to the domain exporter.",
        "nixName": "exporters.domain.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.domain.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.domain.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.domain.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.domain.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.domain.openFirewall is true.",
        "nixName": "exporters.domain.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.domain.group",
        "desc": "Group under which the domain exporter shall be run.",
        "nixName": "exporters.domain.group",
        "type": "string",
        "value": "domain-exporter"
      },
      {
        "name": "exporters.domain.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.domain.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.domain.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.domain.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.domain.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.domain.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9222"
      },
      {
        "name": "exporters.domain.user",
        "desc": "User name under which the domain exporter shall be run.",
        "nixName": "exporters.domain.user",
        "type": "string",
        "value": "domain-exporter"
      },
      {
        "name": "exporters.dovecot.enable",
        "desc": "Whether to enable the prometheus dovecot exporter.",
        "nixName": "exporters.dovecot.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dovecot.extraFlags",
        "desc": "Extra commandline options to pass to the dovecot exporter.",
        "nixName": "exporters.dovecot.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.dovecot.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.dovecot.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.dovecot.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.dovecot.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.dovecot.openFirewall is true.",
        "nixName": "exporters.dovecot.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.dovecot.group",
        "desc": "Group under which the dovecot exporter shall be run.",
        "nixName": "exporters.dovecot.group",
        "type": "string",
        "value": "dovecot-exporter"
      },
      {
        "name": "exporters.dovecot.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.dovecot.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.dovecot.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.dovecot.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.dovecot.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.dovecot.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9166"
      },
      {
        "name": "exporters.dovecot.scopes",
        "desc": "Stats scopes to query.",
        "nixName": "exporters.dovecot.scopes",
        "type": "list of string",
        "value": "[\n  \"user\"\n]"
      },
      {
        "name": "exporters.dovecot.socketPath",
        "desc": "Path under which the stats socket is placed. The user/group under which the exporter runs, should be able to access the socket in order to scrape the metrics successfully. Please keep in mind that the stats module has changed in Dovecot 2.3+ which is not compatible with this exporter. The following extra config has to be passed to Dovecot to ensure that recent versions work with this exporter: {  services.prometheus.exporters.dovecot.enable = true;  services.prometheus.exporters.dovecot.socketPath = \"/var/run/dovecot2/old-stats\";  services.dovecot2.mailPlugins.globally.enable = [ \"old_stats\" ];  services.dovecot2.extraConfig = ''   service old-stats {    unix_listener old-stats {     user = dovecot-exporter     group = dovecot-exporter     mode = 0660    }    fifo_listener old-stats-mail {     mode = 0660     user = dovecot     group = dovecot    }    fifo_listener old-stats-user {     mode = 0660     user = dovecot     group = dovecot    }   }   plugin {    old_stats_refresh = 30 secs    old_stats_track_cmds = yes   }  ''; }",
        "nixName": "exporters.dovecot.socketPath",
        "type": "path",
        "value": "\"/var/run/dovecot/stats\""
      },
      {
        "name": "exporters.dovecot.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.dovecot.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.dovecot.user",
        "desc": "User name under which the dovecot exporter shall be run.",
        "nixName": "exporters.dovecot.user",
        "type": "string",
        "value": "dovecot-exporter"
      },
      {
        "name": "exporters.exportarr-bazarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-bazarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-bazarr.enable",
        "desc": "Whether to enable the prometheus exportarr-bazarr exporter.",
        "nixName": "exporters.exportarr-bazarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-bazarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-bazarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-bazarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-bazarr exporter.",
        "nixName": "exporters.exportarr-bazarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-bazarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-bazarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-bazarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-bazarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-bazarr.openFirewall is true.",
        "nixName": "exporters.exportarr-bazarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-bazarr.group",
        "desc": "Group under which the exportarr-bazarr exporter shall be run.",
        "nixName": "exporters.exportarr-bazarr.group",
        "type": "string",
        "value": "exportarr-bazarr-exporter"
      },
      {
        "name": "exporters.exportarr-bazarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-bazarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-bazarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-bazarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-bazarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-bazarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-bazarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-bazarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-bazarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-bazarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-bazarr.user",
        "desc": "User name under which the exportarr-bazarr exporter shall be run.",
        "nixName": "exporters.exportarr-bazarr.user",
        "type": "string",
        "value": "exportarr-bazarr-exporter"
      },
      {
        "name": "exporters.exportarr-lidarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-lidarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-lidarr.enable",
        "desc": "Whether to enable the prometheus exportarr-lidarr exporter.",
        "nixName": "exporters.exportarr-lidarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-lidarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-lidarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-lidarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-lidarr exporter.",
        "nixName": "exporters.exportarr-lidarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-lidarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-lidarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-lidarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-lidarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-lidarr.openFirewall is true.",
        "nixName": "exporters.exportarr-lidarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-lidarr.group",
        "desc": "Group under which the exportarr-lidarr exporter shall be run.",
        "nixName": "exporters.exportarr-lidarr.group",
        "type": "string",
        "value": "exportarr-lidarr-exporter"
      },
      {
        "name": "exporters.exportarr-lidarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-lidarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-lidarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-lidarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-lidarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-lidarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-lidarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-lidarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-lidarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-lidarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-lidarr.user",
        "desc": "User name under which the exportarr-lidarr exporter shall be run.",
        "nixName": "exporters.exportarr-lidarr.user",
        "type": "string",
        "value": "exportarr-lidarr-exporter"
      },
      {
        "name": "exporters.exportarr-prowlarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-prowlarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-prowlarr.enable",
        "desc": "Whether to enable the prometheus exportarr-prowlarr exporter.",
        "nixName": "exporters.exportarr-prowlarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-prowlarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-prowlarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-prowlarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-prowlarr exporter.",
        "nixName": "exporters.exportarr-prowlarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-prowlarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-prowlarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-prowlarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-prowlarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-prowlarr.openFirewall is true.",
        "nixName": "exporters.exportarr-prowlarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-prowlarr.group",
        "desc": "Group under which the exportarr-prowlarr exporter shall be run.",
        "nixName": "exporters.exportarr-prowlarr.group",
        "type": "string",
        "value": "exportarr-prowlarr-exporter"
      },
      {
        "name": "exporters.exportarr-prowlarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-prowlarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-prowlarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-prowlarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-prowlarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-prowlarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-prowlarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-prowlarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-prowlarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-prowlarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-prowlarr.user",
        "desc": "User name under which the exportarr-prowlarr exporter shall be run.",
        "nixName": "exporters.exportarr-prowlarr.user",
        "type": "string",
        "value": "exportarr-prowlarr-exporter"
      },
      {
        "name": "exporters.exportarr-radarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-radarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-radarr.enable",
        "desc": "Whether to enable the prometheus exportarr-radarr exporter.",
        "nixName": "exporters.exportarr-radarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-radarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-radarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-radarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-radarr exporter.",
        "nixName": "exporters.exportarr-radarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-radarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-radarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-radarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-radarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-radarr.openFirewall is true.",
        "nixName": "exporters.exportarr-radarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-radarr.group",
        "desc": "Group under which the exportarr-radarr exporter shall be run.",
        "nixName": "exporters.exportarr-radarr.group",
        "type": "string",
        "value": "exportarr-radarr-exporter"
      },
      {
        "name": "exporters.exportarr-radarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-radarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-radarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-radarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-radarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-radarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-radarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-radarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-radarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-radarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-radarr.user",
        "desc": "User name under which the exportarr-radarr exporter shall be run.",
        "nixName": "exporters.exportarr-radarr.user",
        "type": "string",
        "value": "exportarr-radarr-exporter"
      },
      {
        "name": "exporters.exportarr-readarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-readarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-readarr.enable",
        "desc": "Whether to enable the prometheus exportarr-readarr exporter.",
        "nixName": "exporters.exportarr-readarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-readarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-readarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-readarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-readarr exporter.",
        "nixName": "exporters.exportarr-readarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-readarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-readarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-readarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-readarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-readarr.openFirewall is true.",
        "nixName": "exporters.exportarr-readarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-readarr.group",
        "desc": "Group under which the exportarr-readarr exporter shall be run.",
        "nixName": "exporters.exportarr-readarr.group",
        "type": "string",
        "value": "exportarr-readarr-exporter"
      },
      {
        "name": "exporters.exportarr-readarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-readarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-readarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-readarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-readarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-readarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-readarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-readarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-readarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-readarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-readarr.user",
        "desc": "User name under which the exportarr-readarr exporter shall be run.",
        "nixName": "exporters.exportarr-readarr.user",
        "type": "string",
        "value": "exportarr-readarr-exporter"
      },
      {
        "name": "exporters.exportarr-sonarr.apiKeyFile",
        "desc": "File containing the api-key.",
        "nixName": "exporters.exportarr-sonarr.apiKeyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-sonarr.enable",
        "desc": "Whether to enable the prometheus exportarr-sonarr exporter.",
        "nixName": "exporters.exportarr-sonarr.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-sonarr.environment",
        "desc": "See the configuration guide for available options.",
        "nixName": "exporters.exportarr-sonarr.environment",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "exporters.exportarr-sonarr.extraFlags",
        "desc": "Extra commandline options to pass to the exportarr-sonarr exporter.",
        "nixName": "exporters.exportarr-sonarr.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.exportarr-sonarr.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.exportarr-sonarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.exportarr-sonarr.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-sonarr.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.exportarr-sonarr.openFirewall is true.",
        "nixName": "exporters.exportarr-sonarr.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.exportarr-sonarr.group",
        "desc": "Group under which the exportarr-sonarr exporter shall be run.",
        "nixName": "exporters.exportarr-sonarr.group",
        "type": "string",
        "value": "exportarr-sonarr-exporter"
      },
      {
        "name": "exporters.exportarr-sonarr.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.exportarr-sonarr.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.exportarr-sonarr.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.exportarr-sonarr.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.exportarr-sonarr.package",
        "desc": "The exportarr package to use.",
        "nixName": "exporters.exportarr-sonarr.package",
        "type": "package",
        "value": "pkgs.exportarr"
      },
      {
        "name": "exporters.exportarr-sonarr.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.exportarr-sonarr.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9708"
      },
      {
        "name": "exporters.exportarr-sonarr.url",
        "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
        "nixName": "exporters.exportarr-sonarr.url",
        "type": "string",
        "value": "http://127.0.0.1"
      },
      {
        "name": "exporters.exportarr-sonarr.user",
        "desc": "User name under which the exportarr-sonarr exporter shall be run.",
        "nixName": "exporters.exportarr-sonarr.user",
        "type": "string",
        "value": "exportarr-sonarr-exporter"
      },
      {
        "name": "exporters.fastly.configFile",
        "desc": "Path to a fastly-exporter configuration file. Example one can be generated with fastly-exporter --config-file-example.",
        "nixName": "exporters.fastly.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.fastly.enable",
        "desc": "Whether to enable the prometheus fastly exporter.",
        "nixName": "exporters.fastly.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fastly.extraFlags",
        "desc": "Extra commandline options to pass to the fastly exporter.",
        "nixName": "exporters.fastly.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.fastly.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.fastly.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.fastly.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.fastly.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.fastly.openFirewall is true.",
        "nixName": "exporters.fastly.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.fastly.group",
        "desc": "Group under which the fastly exporter shall be run.",
        "nixName": "exporters.fastly.group",
        "type": "string",
        "value": "fastly-exporter"
      },
      {
        "name": "exporters.fastly.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.fastly.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.fastly.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.fastly.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fastly.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.fastly.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9118"
      },
      {
        "name": "exporters.fastly.tokenPath",
        "desc": "A run-time path to the token file, which is supposed to be provisioned outside of Nix store.",
        "nixName": "exporters.fastly.tokenPath",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.fastly.user",
        "desc": "User name under which the fastly exporter shall be run.",
        "nixName": "exporters.fastly.user",
        "type": "string",
        "value": "fastly-exporter"
      },
      {
        "name": "exporters.flow.asn",
        "desc": "The ASN being monitored.",
        "nixName": "exporters.flow.asn",
        "type": "positive integer, meaning >0",
        "value": ""
      },
      {
        "name": "exporters.flow.brokers",
        "desc": "List of Kafka brokers to connect to.",
        "nixName": "exporters.flow.brokers",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "exporters.flow.enable",
        "desc": "Whether to enable the prometheus flow exporter.",
        "nixName": "exporters.flow.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.flow.extraFlags",
        "desc": "Extra commandline options to pass to the flow exporter.",
        "nixName": "exporters.flow.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.flow.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.flow.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.flow.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.flow.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.flow.openFirewall is true.",
        "nixName": "exporters.flow.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.flow.group",
        "desc": "Group under which the flow exporter shall be run.",
        "nixName": "exporters.flow.group",
        "type": "string",
        "value": "flow-exporter"
      },
      {
        "name": "exporters.flow.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.flow.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.flow.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.flow.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.flow.partitions",
        "desc": "The number of the partitions to consume, none means all.",
        "nixName": "exporters.flow.partitions",
        "type": "list of signed integer",
        "value": "[ ]"
      },
      {
        "name": "exporters.flow.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.flow.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9590"
      },
      {
        "name": "exporters.flow.topic",
        "desc": "The Kafka topic to consume from.",
        "nixName": "exporters.flow.topic",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.flow.user",
        "desc": "User name under which the flow exporter shall be run.",
        "nixName": "exporters.flow.user",
        "type": "string",
        "value": "flow-exporter"
      },
      {
        "name": "exporters.fritz.enable",
        "desc": "Whether to enable the prometheus fritz exporter.",
        "nixName": "exporters.fritz.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fritz.extraFlags",
        "desc": "Extra commandline options to pass to the fritz exporter.",
        "nixName": "exporters.fritz.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.fritz.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.fritz.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.fritz.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.fritz.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.fritz.openFirewall is true.",
        "nixName": "exporters.fritz.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.fritz.group",
        "desc": "Group under which the fritz exporter shall be run.",
        "nixName": "exporters.fritz.group",
        "type": "string",
        "value": "fritz-exporter"
      },
      {
        "name": "exporters.fritz.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.fritz.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.fritz.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.fritz.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fritz.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.fritz.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9787"
      },
      {
        "name": "exporters.fritz.settings",
        "desc": "Configuration settings for fritz-exporter.",
        "nixName": "exporters.fritz.settings",
        "type": "YAML value",
        "value": ""
      },
      {
        "name": "exporters.fritz.settings.devices",
        "desc": "Fritz!-devices to monitor using the exporter.",
        "nixName": "exporters.fritz.settings.devices",
        "type": "list of (YAML value)",
        "value": "[ ]"
      },
      {
        "name": "exporters.fritz.settings.devices.*.host_info",
        "desc": "Enable extended host info for this device. Warning: This will heavily increase scrape time.",
        "nixName": "exporters.fritz.settings.devices.*.host_info",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fritz.settings.devices.*.hostname",
        "desc": "Hostname under which the target device is reachable.",
        "nixName": "exporters.fritz.settings.devices.*.hostname",
        "type": "string",
        "value": "fritz.box"
      },
      {
        "name": "exporters.fritz.settings.devices.*.name",
        "desc": "Name to use for the device.",
        "nixName": "exporters.fritz.settings.devices.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.fritz.settings.devices.*.password_file",
        "desc": "Path to a file which contains the password to authenticate with the target device. Needs to be readable by the user the exporter runs under.",
        "nixName": "exporters.fritz.settings.devices.*.password_file",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.fritz.settings.devices.*.username",
        "desc": "Username to authenticate with the target device.",
        "nixName": "exporters.fritz.settings.devices.*.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.fritz.settings.log_level",
        "desc": "Log level to use for the exporter.",
        "nixName": "exporters.fritz.settings.log_level",
        "type": "one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"",
        "value": "\"INFO\""
      },
      {
        "name": "exporters.fritz.user",
        "desc": "User name under which the fritz exporter shall be run.",
        "nixName": "exporters.fritz.user",
        "type": "string",
        "value": "fritz-exporter"
      },
      {
        "name": "exporters.fritzbox.enable",
        "desc": "Whether to enable the prometheus fritzbox exporter.",
        "nixName": "exporters.fritzbox.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fritzbox.extraFlags",
        "desc": "Extra commandline options to pass to the fritzbox exporter.",
        "nixName": "exporters.fritzbox.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.fritzbox.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.fritzbox.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.fritzbox.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.fritzbox.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.fritzbox.openFirewall is true.",
        "nixName": "exporters.fritzbox.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.fritzbox.gatewayAddress",
        "desc": "The hostname or IP of the FRITZ!Box.",
        "nixName": "exporters.fritzbox.gatewayAddress",
        "type": "string",
        "value": "fritz.box"
      },
      {
        "name": "exporters.fritzbox.gatewayPort",
        "desc": "The port of the FRITZ!Box UPnP service.",
        "nixName": "exporters.fritzbox.gatewayPort",
        "type": "signed integer",
        "value": "49000"
      },
      {
        "name": "exporters.fritzbox.group",
        "desc": "Group under which the fritzbox exporter shall be run.",
        "nixName": "exporters.fritzbox.group",
        "type": "string",
        "value": "fritzbox-exporter"
      },
      {
        "name": "exporters.fritzbox.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.fritzbox.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.fritzbox.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.fritzbox.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.fritzbox.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.fritzbox.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9133"
      },
      {
        "name": "exporters.fritzbox.user",
        "desc": "User name under which the fritzbox exporter shall be run.",
        "nixName": "exporters.fritzbox.user",
        "type": "string",
        "value": "fritzbox-exporter"
      },
      {
        "name": "exporters.graphite.enable",
        "desc": "Whether to enable the prometheus graphite exporter.",
        "nixName": "exporters.graphite.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.graphite.extraFlags",
        "desc": "Extra commandline options to pass to the graphite exporter.",
        "nixName": "exporters.graphite.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.graphite.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.graphite.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.graphite.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.graphite.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.graphite.openFirewall is true.",
        "nixName": "exporters.graphite.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.graphite.graphitePort",
        "desc": "Port to use for the graphite server.",
        "nixName": "exporters.graphite.graphitePort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9109"
      },
      {
        "name": "exporters.graphite.group",
        "desc": "Group under which the graphite exporter shall be run.",
        "nixName": "exporters.graphite.group",
        "type": "string",
        "value": "graphite-exporter"
      },
      {
        "name": "exporters.graphite.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.graphite.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.graphite.mappingSettings",
        "desc": "Mapping configuration for the exporter, see https://github.com/prometheus/graphite_exporter#yaml-config for available options.",
        "nixName": "exporters.graphite.mappingSettings",
        "type": "YAML value",
        "value": "{ }"
      },
      {
        "name": "exporters.graphite.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.graphite.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.graphite.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.graphite.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9108"
      },
      {
        "name": "exporters.graphite.user",
        "desc": "User name under which the graphite exporter shall be run.",
        "nixName": "exporters.graphite.user",
        "type": "string",
        "value": "graphite-exporter"
      },
      {
        "name": "exporters.idrac.configuration",
        "desc": "Configuration for iDRAC exporter, as a nix attribute set. Configuration reference: https://github.com/mrlhansen/idrac_exporter/#configuration Mutually exclusive with configurationPath option.",
        "nixName": "exporters.idrac.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "exporters.idrac.configurationPath",
        "desc": "Path to the service’s config file. This path can either be a computed path in /nix/store or a path in the local filesystem. The config file should NOT be stored in /nix/store as it will contain passwords and/or keys in plain text. Mutually exclusive with configuration option. Configuration reference: https://github.com/mrlhansen/idrac_exporter/#configuration",
        "nixName": "exporters.idrac.configurationPath",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.idrac.enable",
        "desc": "Whether to enable the prometheus idrac exporter.",
        "nixName": "exporters.idrac.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.idrac.extraFlags",
        "desc": "Extra commandline options to pass to the idrac exporter.",
        "nixName": "exporters.idrac.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.idrac.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.idrac.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.idrac.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.idrac.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.idrac.openFirewall is true.",
        "nixName": "exporters.idrac.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.idrac.group",
        "desc": "Group under which the idrac exporter shall be run.",
        "nixName": "exporters.idrac.group",
        "type": "string",
        "value": "idrac-exporter"
      },
      {
        "name": "exporters.idrac.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.idrac.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.idrac.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.idrac.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.idrac.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.idrac.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9348"
      },
      {
        "name": "exporters.idrac.user",
        "desc": "User name under which the idrac exporter shall be run.",
        "nixName": "exporters.idrac.user",
        "type": "string",
        "value": "idrac-exporter"
      },
      {
        "name": "exporters.imap-mailstat.accounts",
        "desc": "Accounts to monitor",
        "nixName": "exporters.imap-mailstat.accounts",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.mailaddress",
        "desc": "Your email address (at the moment used as login name)",
        "nixName": "exporters.imap-mailstat.accounts.<name>.mailaddress",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.password",
        "desc": "",
        "nixName": "exporters.imap-mailstat.accounts.<name>.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.serveraddress",
        "desc": "mailserver name or address",
        "nixName": "exporters.imap-mailstat.accounts.<name>.serveraddress",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.serverport",
        "desc": "imap port number (at the moment only tls connection is supported)",
        "nixName": "exporters.imap-mailstat.accounts.<name>.serverport",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.starttls",
        "desc": "set to true for using STARTTLS to start a TLS connection",
        "nixName": "exporters.imap-mailstat.accounts.<name>.starttls",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.accounts.<name>.username",
        "desc": "If empty string mailaddress value is used",
        "nixName": "exporters.imap-mailstat.accounts.<name>.username",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.configurationFile",
        "desc": "File containing the configuration",
        "nixName": "exporters.imap-mailstat.configurationFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.imap-mailstat.enable",
        "desc": "Whether to enable the prometheus imap-mailstat exporter.",
        "nixName": "exporters.imap-mailstat.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.imap-mailstat.extraFlags",
        "desc": "Extra commandline options to pass to the imap-mailstat exporter.",
        "nixName": "exporters.imap-mailstat.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.imap-mailstat.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.imap-mailstat.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.imap-mailstat.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.imap-mailstat.openFirewall is true.",
        "nixName": "exporters.imap-mailstat.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.imap-mailstat.group",
        "desc": "Group under which the imap-mailstat exporter shall be run.",
        "nixName": "exporters.imap-mailstat.group",
        "type": "string",
        "value": "imap-mailstat-exporter"
      },
      {
        "name": "exporters.imap-mailstat.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.imap-mailstat.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.imap-mailstat.oldestUnseenDate",
        "desc": "Enable metric with timestamp of oldest unseen mail",
        "nixName": "exporters.imap-mailstat.oldestUnseenDate",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.imap-mailstat.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.imap-mailstat.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.imap-mailstat.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.imap-mailstat.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8081"
      },
      {
        "name": "exporters.imap-mailstat.user",
        "desc": "User name under which the imap-mailstat exporter shall be run.",
        "nixName": "exporters.imap-mailstat.user",
        "type": "string",
        "value": "imap-mailstat-exporter"
      },
      {
        "name": "exporters.influxdb.enable",
        "desc": "Whether to enable the prometheus influxdb exporter.",
        "nixName": "exporters.influxdb.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.influxdb.extraFlags",
        "desc": "Extra commandline options to pass to the influxdb exporter.",
        "nixName": "exporters.influxdb.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.influxdb.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.influxdb.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.influxdb.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.influxdb.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.influxdb.openFirewall is true.",
        "nixName": "exporters.influxdb.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.influxdb.group",
        "desc": "Group under which the influxdb exporter shall be run.",
        "nixName": "exporters.influxdb.group",
        "type": "string",
        "value": "influxdb-exporter"
      },
      {
        "name": "exporters.influxdb.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.influxdb.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.influxdb.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.influxdb.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.influxdb.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.influxdb.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9122"
      },
      {
        "name": "exporters.influxdb.sampleExpiry",
        "desc": "How long a sample is valid for",
        "nixName": "exporters.influxdb.sampleExpiry",
        "type": "string",
        "value": "5m"
      },
      {
        "name": "exporters.influxdb.udpBindAddress",
        "desc": "Address on which to listen for udp packets",
        "nixName": "exporters.influxdb.udpBindAddress",
        "type": "string",
        "value": ":9122"
      },
      {
        "name": "exporters.influxdb.user",
        "desc": "User name under which the influxdb exporter shall be run.",
        "nixName": "exporters.influxdb.user",
        "type": "string",
        "value": "influxdb-exporter"
      },
      {
        "name": "exporters.ipmi.configFile",
        "desc": "Path to configuration file.",
        "nixName": "exporters.ipmi.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.ipmi.enable",
        "desc": "Whether to enable the prometheus ipmi exporter.",
        "nixName": "exporters.ipmi.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.ipmi.extraFlags",
        "desc": "Extra commandline options to pass to the ipmi exporter.",
        "nixName": "exporters.ipmi.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.ipmi.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.ipmi.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.ipmi.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.ipmi.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.ipmi.openFirewall is true.",
        "nixName": "exporters.ipmi.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.ipmi.group",
        "desc": "Group under which the ipmi exporter shall be run.",
        "nixName": "exporters.ipmi.group",
        "type": "string",
        "value": "ipmi-exporter"
      },
      {
        "name": "exporters.ipmi.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.ipmi.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.ipmi.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.ipmi.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.ipmi.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.ipmi.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9290"
      },
      {
        "name": "exporters.ipmi.user",
        "desc": "User name under which the ipmi exporter shall be run.",
        "nixName": "exporters.ipmi.user",
        "type": "string",
        "value": "ipmi-exporter"
      },
      {
        "name": "exporters.ipmi.webConfigFile",
        "desc": "Path to configuration file that can enable TLS or authentication.",
        "nixName": "exporters.ipmi.webConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.jitsi.enable",
        "desc": "Whether to enable the prometheus jitsi exporter.",
        "nixName": "exporters.jitsi.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.jitsi.extraFlags",
        "desc": "Extra commandline options to pass to the jitsi exporter.",
        "nixName": "exporters.jitsi.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.jitsi.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.jitsi.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.jitsi.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.jitsi.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.jitsi.openFirewall is true.",
        "nixName": "exporters.jitsi.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.jitsi.group",
        "desc": "Group under which the jitsi exporter shall be run.",
        "nixName": "exporters.jitsi.group",
        "type": "string",
        "value": "jitsi-exporter"
      },
      {
        "name": "exporters.jitsi.interval",
        "desc": "How often to scrape new data",
        "nixName": "exporters.jitsi.interval",
        "type": "string",
        "value": "30s"
      },
      {
        "name": "exporters.jitsi.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.jitsi.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.jitsi.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.jitsi.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.jitsi.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.jitsi.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9700"
      },
      {
        "name": "exporters.jitsi.url",
        "desc": "Jitsi Videobridge metrics URL to monitor. This is usually /colibri/stats on port 8080 of the jitsi videobridge host.",
        "nixName": "exporters.jitsi.url",
        "type": "string",
        "value": "http://localhost:8080/colibri/stats"
      },
      {
        "name": "exporters.jitsi.user",
        "desc": "User name under which the jitsi exporter shall be run.",
        "nixName": "exporters.jitsi.user",
        "type": "string",
        "value": "jitsi-exporter"
      },
      {
        "name": "exporters.json.configFile",
        "desc": "Path to configuration file.",
        "nixName": "exporters.json.configFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.json.enable",
        "desc": "Whether to enable the prometheus json exporter.",
        "nixName": "exporters.json.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.json.extraFlags",
        "desc": "Extra commandline options to pass to the json exporter.",
        "nixName": "exporters.json.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.json.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.json.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.json.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.json.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.json.openFirewall is true.",
        "nixName": "exporters.json.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.json.group",
        "desc": "Group under which the json exporter shall be run.",
        "nixName": "exporters.json.group",
        "type": "string",
        "value": "json-exporter"
      },
      {
        "name": "exporters.json.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.json.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.json.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.json.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.json.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.json.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "7979"
      },
      {
        "name": "exporters.json.user",
        "desc": "User name under which the json exporter shall be run.",
        "nixName": "exporters.json.user",
        "type": "string",
        "value": "json-exporter"
      },
      {
        "name": "exporters.junos-czerwonk.configuration",
        "desc": "JunOS exporter configuration as nix attribute set. Mutually exclusive with the configurationFile option.",
        "nixName": "exporters.junos-czerwonk.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "exporters.junos-czerwonk.configurationFile",
        "desc": "Specify the JunOS exporter configuration file to use.",
        "nixName": "exporters.junos-czerwonk.configurationFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.junos-czerwonk.enable",
        "desc": "Whether to enable the prometheus junos-czerwonk exporter.",
        "nixName": "exporters.junos-czerwonk.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.junos-czerwonk.environmentFile",
        "desc": "File containing env-vars to be substituted into the exporter’s config.",
        "nixName": "exporters.junos-czerwonk.environmentFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.junos-czerwonk.extraFlags",
        "desc": "Extra commandline options to pass to the junos-czerwonk exporter.",
        "nixName": "exporters.junos-czerwonk.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.junos-czerwonk.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.junos-czerwonk.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.junos-czerwonk.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.junos-czerwonk.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.junos-czerwonk.openFirewall is true.",
        "nixName": "exporters.junos-czerwonk.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.junos-czerwonk.group",
        "desc": "Group under which the junos-czerwonk exporter shall be run.",
        "nixName": "exporters.junos-czerwonk.group",
        "type": "string",
        "value": "junos-czerwonk-exporter"
      },
      {
        "name": "exporters.junos-czerwonk.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.junos-czerwonk.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.junos-czerwonk.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.junos-czerwonk.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.junos-czerwonk.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.junos-czerwonk.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9326"
      },
      {
        "name": "exporters.junos-czerwonk.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.junos-czerwonk.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.junos-czerwonk.user",
        "desc": "User name under which the junos-czerwonk exporter shall be run.",
        "nixName": "exporters.junos-czerwonk.user",
        "type": "string",
        "value": "junos-czerwonk-exporter"
      },
      {
        "name": "exporters.kea.enable",
        "desc": "Whether to enable the prometheus kea exporter.",
        "nixName": "exporters.kea.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.kea.extraFlags",
        "desc": "Extra commandline options to pass to the kea exporter.",
        "nixName": "exporters.kea.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.kea.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.kea.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.kea.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.kea.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.kea.openFirewall is true.",
        "nixName": "exporters.kea.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.kea.group",
        "desc": "Group under which the kea exporter shall be run.",
        "nixName": "exporters.kea.group",
        "type": "string",
        "value": "kea-exporter"
      },
      {
        "name": "exporters.kea.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.kea.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.kea.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.kea.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.kea.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.kea.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9547"
      },
      {
        "name": "exporters.kea.targets",
        "desc": "Paths or URLs to the Kea control socket.",
        "nixName": "exporters.kea.targets",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "exporters.kea.user",
        "desc": "User name under which the kea exporter shall be run.",
        "nixName": "exporters.kea.user",
        "type": "string",
        "value": "kea-exporter"
      },
      {
        "name": "exporters.keylight.enable",
        "desc": "Whether to enable the prometheus keylight exporter.",
        "nixName": "exporters.keylight.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.keylight.extraFlags",
        "desc": "Extra commandline options to pass to the keylight exporter.",
        "nixName": "exporters.keylight.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.keylight.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.keylight.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.keylight.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.keylight.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.keylight.openFirewall is true.",
        "nixName": "exporters.keylight.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.keylight.group",
        "desc": "Group under which the keylight exporter shall be run.",
        "nixName": "exporters.keylight.group",
        "type": "string",
        "value": "keylight-exporter"
      },
      {
        "name": "exporters.keylight.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.keylight.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.keylight.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.keylight.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.keylight.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.keylight.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9288"
      },
      {
        "name": "exporters.keylight.user",
        "desc": "User name under which the keylight exporter shall be run.",
        "nixName": "exporters.keylight.user",
        "type": "string",
        "value": "keylight-exporter"
      },
      {
        "name": "exporters.knot.enable",
        "desc": "Whether to enable the prometheus knot exporter.",
        "nixName": "exporters.knot.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.knot.extraFlags",
        "desc": "Extra commandline options to pass to the knot exporter.",
        "nixName": "exporters.knot.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.knot.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.knot.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.knot.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.knot.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.knot.openFirewall is true.",
        "nixName": "exporters.knot.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.knot.group",
        "desc": "Group under which the knot exporter shall be run.",
        "nixName": "exporters.knot.group",
        "type": "string",
        "value": "knot-exporter"
      },
      {
        "name": "exporters.knot.knotLibraryPath",
        "desc": "Path to the library of knot-dns.",
        "nixName": "exporters.knot.knotLibraryPath",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.knot.knotSocketPath",
        "desc": "Socket path of knotd(8).",
        "nixName": "exporters.knot.knotSocketPath",
        "type": "string",
        "value": "/run/knot/knot.sock"
      },
      {
        "name": "exporters.knot.knotSocketTimeout",
        "desc": "Timeout in seconds.",
        "nixName": "exporters.knot.knotSocketTimeout",
        "type": "positive integer, meaning >0",
        "value": "2000"
      },
      {
        "name": "exporters.knot.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.knot.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.knot.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.knot.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.knot.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.knot.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9433"
      },
      {
        "name": "exporters.knot.user",
        "desc": "User name under which the knot exporter shall be run.",
        "nixName": "exporters.knot.user",
        "type": "string",
        "value": "knot-exporter"
      },
      {
        "name": "exporters.lnd.enable",
        "desc": "Whether to enable the prometheus lnd exporter.",
        "nixName": "exporters.lnd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.lnd.extraFlags",
        "desc": "Extra commandline options to pass to the lnd exporter.",
        "nixName": "exporters.lnd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.lnd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.lnd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.lnd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.lnd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.lnd.openFirewall is true.",
        "nixName": "exporters.lnd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.lnd.group",
        "desc": "Group under which the lnd exporter shall be run.",
        "nixName": "exporters.lnd.group",
        "type": "string",
        "value": "lnd-exporter"
      },
      {
        "name": "exporters.lnd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.lnd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.lnd.lndHost",
        "desc": "lnd instance gRPC address:port.",
        "nixName": "exporters.lnd.lndHost",
        "type": "string",
        "value": "localhost:10009"
      },
      {
        "name": "exporters.lnd.lndMacaroonDir",
        "desc": "Path to lnd macaroons.",
        "nixName": "exporters.lnd.lndMacaroonDir",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.lnd.lndTlsPath",
        "desc": "Path to lnd TLS certificate.",
        "nixName": "exporters.lnd.lndTlsPath",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.lnd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.lnd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.lnd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.lnd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9092"
      },
      {
        "name": "exporters.lnd.user",
        "desc": "User name under which the lnd exporter shall be run.",
        "nixName": "exporters.lnd.user",
        "type": "string",
        "value": "lnd-exporter"
      },
      {
        "name": "exporters.mail.configFile",
        "desc": "Specify the mailexporter configuration file to use.",
        "nixName": "exporters.mail.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.mail.configuration",
        "desc": "Specify the mailexporter configuration file to use.",
        "nixName": "exporters.mail.configuration",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "exporters.mail.configuration.disableFileDeletion",
        "desc": "Disables the exporter’s function to delete probing mails.",
        "nixName": "exporters.mail.configuration.disableFileDeletion",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mail.configuration.mailCheckTimeout",
        "desc": "Timeout until mails are considered “didn’t make it”.",
        "nixName": "exporters.mail.configuration.mailCheckTimeout",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.monitoringInterval",
        "desc": "Time interval between two probe attempts.",
        "nixName": "exporters.mail.configuration.monitoringInterval",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers",
        "desc": "List of servers that should be probed. Note: if your mailserver has rspamd(8) configured, it can happen that emails from this exporter are marked as spam. It’s possible to work around the issue with a config like this: {  services.rspamd.locals.\"multimap.conf\".text = ''   ALLOWLIST_PROMETHEUS {    filter = \"email:domain:tld\";    type = \"from\";    map = \"${pkgs.writeText \"allowmap\" \"domain.tld\"}\";    score = -100.0;   }  ''; }",
        "nixName": "exporters.mail.configuration.servers",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "exporters.mail.configuration.servers.*.detectionDir",
        "desc": "Directory in which new mails for the exporter user are placed. Note that this needs to exist when the exporter starts.",
        "nixName": "exporters.mail.configuration.servers.*.detectionDir",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers.*.from",
        "desc": "Content of ‘From’ Header for probing mails.",
        "nixName": "exporters.mail.configuration.servers.*.from",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers.*.login",
        "desc": "Username to use for SMTP authentication.",
        "nixName": "exporters.mail.configuration.servers.*.login",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mail.configuration.servers.*.name",
        "desc": "Value for label ‘configname’ which will be added to all metrics.",
        "nixName": "exporters.mail.configuration.servers.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers.*.passphrase",
        "desc": "Password to use for SMTP authentication.",
        "nixName": "exporters.mail.configuration.servers.*.passphrase",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mail.configuration.servers.*.port",
        "desc": "Port to use for SMTP.",
        "nixName": "exporters.mail.configuration.servers.*.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers.*.server",
        "desc": "Hostname of the server that should be probed.",
        "nixName": "exporters.mail.configuration.servers.*.server",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.configuration.servers.*.to",
        "desc": "Content of ‘To’ Header for probing mails.",
        "nixName": "exporters.mail.configuration.servers.*.to",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.mail.enable",
        "desc": "Whether to enable the prometheus mail exporter.",
        "nixName": "exporters.mail.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mail.environmentFile",
        "desc": "File containing env-vars to be substituted into the exporter’s config.",
        "nixName": "exporters.mail.environmentFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mail.extraFlags",
        "desc": "Extra commandline options to pass to the mail exporter.",
        "nixName": "exporters.mail.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mail.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.mail.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.mail.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mail.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.mail.openFirewall is true.",
        "nixName": "exporters.mail.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.mail.group",
        "desc": "Group under which the mail exporter shall be run.",
        "nixName": "exporters.mail.group",
        "type": "string",
        "value": "mail-exporter"
      },
      {
        "name": "exporters.mail.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.mail.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.mail.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.mail.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mail.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.mail.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9225"
      },
      {
        "name": "exporters.mail.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.mail.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.mail.user",
        "desc": "User name under which the mail exporter shall be run.",
        "nixName": "exporters.mail.user",
        "type": "string",
        "value": "mail-exporter"
      },
      {
        "name": "exporters.mikrotik.configFile",
        "desc": "Path to a mikrotik exporter configuration file. Mutually exclusive with configuration option.",
        "nixName": "exporters.mikrotik.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.mikrotik.configuration",
        "desc": "Mikrotik exporter configuration as nix attribute set. Mutually exclusive with configFile option. See https://github.com/nshttpd/mikrotik-exporter/blob/master/README.md for the description of the configuration file format.",
        "nixName": "exporters.mikrotik.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "exporters.mikrotik.enable",
        "desc": "Whether to enable the prometheus mikrotik exporter.",
        "nixName": "exporters.mikrotik.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mikrotik.extraFlags",
        "desc": "Extra commandline options to pass to the mikrotik exporter.",
        "nixName": "exporters.mikrotik.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mikrotik.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.mikrotik.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.mikrotik.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mikrotik.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.mikrotik.openFirewall is true.",
        "nixName": "exporters.mikrotik.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.mikrotik.group",
        "desc": "Group under which the mikrotik exporter shall be run.",
        "nixName": "exporters.mikrotik.group",
        "type": "string",
        "value": "mikrotik-exporter"
      },
      {
        "name": "exporters.mikrotik.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.mikrotik.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.mikrotik.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.mikrotik.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mikrotik.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.mikrotik.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9436"
      },
      {
        "name": "exporters.mikrotik.user",
        "desc": "User name under which the mikrotik exporter shall be run.",
        "nixName": "exporters.mikrotik.user",
        "type": "string",
        "value": "mikrotik-exporter"
      },
      {
        "name": "exporters.modemmanager.enable",
        "desc": "Whether to enable the prometheus modemmanager exporter.",
        "nixName": "exporters.modemmanager.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.modemmanager.extraFlags",
        "desc": "Extra commandline options to pass to the modemmanager exporter.",
        "nixName": "exporters.modemmanager.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.modemmanager.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.modemmanager.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.modemmanager.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.modemmanager.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.modemmanager.openFirewall is true.",
        "nixName": "exporters.modemmanager.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.modemmanager.group",
        "desc": "Group under which the modemmanager exporter shall be run.",
        "nixName": "exporters.modemmanager.group",
        "type": "string",
        "value": "modemmanager-exporter"
      },
      {
        "name": "exporters.modemmanager.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.modemmanager.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.modemmanager.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.modemmanager.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.modemmanager.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.modemmanager.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9539"
      },
      {
        "name": "exporters.modemmanager.refreshRate",
        "desc": "How frequently ModemManager will refresh the extended signal quality information for each modem. The duration should be specified in seconds (“5s”), minutes (“1m”), or hours (“1h”).",
        "nixName": "exporters.modemmanager.refreshRate",
        "type": "string",
        "value": "5s"
      },
      {
        "name": "exporters.modemmanager.user",
        "desc": "User name under which the modemmanager exporter shall be run.",
        "nixName": "exporters.modemmanager.user",
        "type": "string",
        "value": "modemmanager-exporter"
      },
      {
        "name": "exporters.mongodb.collStats",
        "desc": "List of comma separared databases.collections to get $collStats",
        "nixName": "exporters.mongodb.collStats",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mongodb.collectAll",
        "desc": "Enable all collectors. Same as specifying all –collector.",
        "nixName": "exporters.mongodb.collectAll",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mongodb.collector",
        "desc": "Enabled collectors",
        "nixName": "exporters.mongodb.collector",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mongodb.enable",
        "desc": "Whether to enable the prometheus mongodb exporter.",
        "nixName": "exporters.mongodb.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mongodb.extraFlags",
        "desc": "Extra commandline options to pass to the mongodb exporter.",
        "nixName": "exporters.mongodb.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mongodb.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.mongodb.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.mongodb.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mongodb.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.mongodb.openFirewall is true.",
        "nixName": "exporters.mongodb.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.mongodb.group",
        "desc": "Group under which the mongodb exporter shall be run.",
        "nixName": "exporters.mongodb.group",
        "type": "string",
        "value": "mongodb-exporter"
      },
      {
        "name": "exporters.mongodb.indexStats",
        "desc": "List of comma separared databases.collections to get $indexStats",
        "nixName": "exporters.mongodb.indexStats",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mongodb.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.mongodb.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.mongodb.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.mongodb.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mongodb.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.mongodb.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9216"
      },
      {
        "name": "exporters.mongodb.telemetryPath",
        "desc": "Metrics expose path",
        "nixName": "exporters.mongodb.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.mongodb.uri",
        "desc": "MongoDB URI to connect to.",
        "nixName": "exporters.mongodb.uri",
        "type": "string",
        "value": "mongodb://localhost:27017/test"
      },
      {
        "name": "exporters.mongodb.user",
        "desc": "User name under which the mongodb exporter shall be run.",
        "nixName": "exporters.mongodb.user",
        "type": "string",
        "value": "mongodb-exporter"
      },
      {
        "name": "exporters.mysqld.configFile",
        "desc": "Path to the services config file. See https://github.com/prometheus/mysqld_exporter#running for more information about the available options.  Please do not store this file in the nix store if you choose to include any credentials here, as it would be world-readable.",
        "nixName": "exporters.mysqld.configFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.mysqld.enable",
        "desc": "Whether to enable the prometheus mysqld exporter.",
        "nixName": "exporters.mysqld.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mysqld.extraFlags",
        "desc": "Extra commandline options to pass to the mysqld exporter.",
        "nixName": "exporters.mysqld.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.mysqld.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.mysqld.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.mysqld.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.mysqld.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.mysqld.openFirewall is true.",
        "nixName": "exporters.mysqld.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.mysqld.group",
        "desc": "Group under which the mysqld exporter shall be run.",
        "nixName": "exporters.mysqld.group",
        "type": "string",
        "value": "mysqld-exporter"
      },
      {
        "name": "exporters.mysqld.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.mysqld.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.mysqld.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.mysqld.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mysqld.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.mysqld.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9104"
      },
      {
        "name": "exporters.mysqld.runAsLocalSuperUser",
        "desc": "Whether to run the exporter as services.mysql.user.",
        "nixName": "exporters.mysqld.runAsLocalSuperUser",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.mysqld.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.mysqld.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.mysqld.user",
        "desc": "User name under which the mysqld exporter shall be run.",
        "nixName": "exporters.mysqld.user",
        "type": "string",
        "value": "mysqld-exporter"
      },
      {
        "name": "exporters.nats.enable",
        "desc": "Whether to enable the prometheus nats exporter.",
        "nixName": "exporters.nats.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nats.extraFlags",
        "desc": "Extra commandline options to pass to the nats exporter.",
        "nixName": "exporters.nats.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nats.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.nats.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.nats.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.nats.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.nats.openFirewall is true.",
        "nixName": "exporters.nats.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.nats.group",
        "desc": "Group under which the nats exporter shall be run.",
        "nixName": "exporters.nats.group",
        "type": "string",
        "value": "nats-exporter"
      },
      {
        "name": "exporters.nats.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.nats.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.nats.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.nats.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nats.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.nats.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "7777"
      },
      {
        "name": "exporters.nats.url",
        "desc": "NATS monitor endpoint to query.",
        "nixName": "exporters.nats.url",
        "type": "string",
        "value": "http://127.0.0.1:8222"
      },
      {
        "name": "exporters.nats.user",
        "desc": "User name under which the nats exporter shall be run.",
        "nixName": "exporters.nats.user",
        "type": "string",
        "value": "nats-exporter"
      },
      {
        "name": "exporters.nextcloud.enable",
        "desc": "Whether to enable the prometheus nextcloud exporter.",
        "nixName": "exporters.nextcloud.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nextcloud.extraFlags",
        "desc": "Extra commandline options to pass to the nextcloud exporter.",
        "nixName": "exporters.nextcloud.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nextcloud.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.nextcloud.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.nextcloud.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.nextcloud.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.nextcloud.openFirewall is true.",
        "nixName": "exporters.nextcloud.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.nextcloud.group",
        "desc": "Group under which the nextcloud exporter shall be run.",
        "nixName": "exporters.nextcloud.group",
        "type": "string",
        "value": "nextcloud-exporter"
      },
      {
        "name": "exporters.nextcloud.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.nextcloud.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.nextcloud.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.nextcloud.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nextcloud.passwordFile",
        "desc": "File containing the password for connecting to Nextcloud. Make sure that this file is readable by the exporter user.",
        "nixName": "exporters.nextcloud.passwordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.nextcloud.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.nextcloud.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9205"
      },
      {
        "name": "exporters.nextcloud.timeout",
        "desc": "Timeout for getting server info document.",
        "nixName": "exporters.nextcloud.timeout",
        "type": "string",
        "value": "5s"
      },
      {
        "name": "exporters.nextcloud.tokenFile",
        "desc": "File containing the token for connecting to Nextcloud. Make sure that this file is readable by the exporter user.",
        "nixName": "exporters.nextcloud.tokenFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.nextcloud.url",
        "desc": "URL to the Nextcloud serverinfo page. Adding the path to the serverinfo API is optional, it defaults to /ocs/v2.php/apps/serverinfo/api/v1/info.",
        "nixName": "exporters.nextcloud.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.nextcloud.user",
        "desc": "User name under which the nextcloud exporter shall be run.",
        "nixName": "exporters.nextcloud.user",
        "type": "string",
        "value": "nextcloud-exporter"
      },
      {
        "name": "exporters.nextcloud.username",
        "desc": "Username for connecting to Nextcloud. Note that this account needs to have admin privileges in Nextcloud. Unused when using token authentication.",
        "nixName": "exporters.nextcloud.username",
        "type": "string",
        "value": "nextcloud-exporter"
      },
      {
        "name": "exporters.nginx.constLabels",
        "desc": "A list of constant labels that will be used in every metric.",
        "nixName": "exporters.nginx.constLabels",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nginx.enable",
        "desc": "Whether to enable the prometheus nginx exporter.",
        "nixName": "exporters.nginx.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nginx.extraFlags",
        "desc": "Extra commandline options to pass to the nginx exporter.",
        "nixName": "exporters.nginx.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nginx.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.nginx.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.nginx.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.nginx.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.nginx.openFirewall is true.",
        "nixName": "exporters.nginx.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.nginx.group",
        "desc": "Group under which the nginx exporter shall be run.",
        "nixName": "exporters.nginx.group",
        "type": "string",
        "value": "nginx-exporter"
      },
      {
        "name": "exporters.nginx.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.nginx.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.nginx.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.nginx.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nginx.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.nginx.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9113"
      },
      {
        "name": "exporters.nginx.scrapeUri",
        "desc": "Address to access the nginx status page. Can be enabled with services.nginx.statusPage = true.",
        "nixName": "exporters.nginx.scrapeUri",
        "type": "string",
        "value": "http://localhost/nginx_status"
      },
      {
        "name": "exporters.nginx.sslVerify",
        "desc": "Whether to perform certificate verification for https.",
        "nixName": "exporters.nginx.sslVerify",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.nginx.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.nginx.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.nginx.user",
        "desc": "User name under which the nginx exporter shall be run.",
        "nixName": "exporters.nginx.user",
        "type": "string",
        "value": "nginx-exporter"
      },
      {
        "name": "exporters.nginxlog.enable",
        "desc": "Whether to enable the prometheus nginxlog exporter.",
        "nixName": "exporters.nginxlog.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nginxlog.extraFlags",
        "desc": "Extra commandline options to pass to the nginxlog exporter.",
        "nixName": "exporters.nginxlog.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nginxlog.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.nginxlog.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.nginxlog.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.nginxlog.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.nginxlog.openFirewall is true.",
        "nixName": "exporters.nginxlog.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.nginxlog.group",
        "desc": "Group under which the nginxlog exporter shall be run.",
        "nixName": "exporters.nginxlog.group",
        "type": "string",
        "value": "nginxlog-exporter"
      },
      {
        "name": "exporters.nginxlog.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.nginxlog.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.nginxlog.metricsEndpoint",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.nginxlog.metricsEndpoint",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.nginxlog.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.nginxlog.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nginxlog.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.nginxlog.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9117"
      },
      {
        "name": "exporters.nginxlog.settings",
        "desc": "All settings of nginxlog expressed as an Nix attrset. Check the official documentation for the corresponding YAML settings that can all be used here: https://github.com/martin-helmich/prometheus-nginxlog-exporter The listen object is already generated by port, listenAddress and metricsEndpoint and will be merged with the value of settings before writing it as JSON.",
        "nixName": "exporters.nginxlog.settings",
        "type": "submodule",
        "value": "{ }"
      },
      {
        "name": "exporters.nginxlog.settings.consul",
        "desc": "Consul integration options. For more information see the example config. This is disabled by default.",
        "nixName": "exporters.nginxlog.settings.consul",
        "type": "null or (attribute set of anything)",
        "value": "null"
      },
      {
        "name": "exporters.nginxlog.settings.namespaces",
        "desc": "Namespaces to collect the metrics for. For more information see the example config.",
        "nixName": "exporters.nginxlog.settings.namespaces",
        "type": "list of attribute set of anything",
        "value": "[ ]"
      },
      {
        "name": "exporters.nginxlog.user",
        "desc": "User name under which the nginxlog exporter shall be run.",
        "nixName": "exporters.nginxlog.user",
        "type": "string",
        "value": "nginxlog-exporter"
      },
      {
        "name": "exporters.node.disabledCollectors",
        "desc": "Collectors to disable which are enabled by default.",
        "nixName": "exporters.node.disabledCollectors",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.node.enable",
        "desc": "Whether to enable the prometheus node exporter.",
        "nixName": "exporters.node.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.node.enabledCollectors",
        "desc": "Collectors to enable. The collectors listed here are enabled in addition to the default ones.",
        "nixName": "exporters.node.enabledCollectors",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.node.extraFlags",
        "desc": "Extra commandline options to pass to the node exporter.",
        "nixName": "exporters.node.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.node.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.node.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.node.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.node.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.node.openFirewall is true.",
        "nixName": "exporters.node.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.node.group",
        "desc": "Group under which the node exporter shall be run.",
        "nixName": "exporters.node.group",
        "type": "string",
        "value": "node-exporter"
      },
      {
        "name": "exporters.node.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.node.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.node.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.node.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.node.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.node.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9100"
      },
      {
        "name": "exporters.node.user",
        "desc": "User name under which the node exporter shall be run.",
        "nixName": "exporters.node.user",
        "type": "string",
        "value": "node-exporter"
      },
      {
        "name": "exporters.nut.enable",
        "desc": "Whether to enable the prometheus nut exporter.",
        "nixName": "exporters.nut.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nut.extraFlags",
        "desc": "Extra commandline options to pass to the nut exporter.",
        "nixName": "exporters.nut.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nut.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.nut.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.nut.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.nut.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.nut.openFirewall is true.",
        "nixName": "exporters.nut.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.nut.group",
        "desc": "Group under which the nut exporter shall be run.",
        "nixName": "exporters.nut.group",
        "type": "string",
        "value": "nut-exporter"
      },
      {
        "name": "exporters.nut.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.nut.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.nut.nutServer",
        "desc": "Hostname or address of the NUT server",
        "nixName": "exporters.nut.nutServer",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "exporters.nut.nutUser",
        "desc": "The user to log in into NUT server. If set, passwordPath should also be set. Default NUT configs usually permit reading variables without authentication.",
        "nixName": "exporters.nut.nutUser",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.nut.nutVariables",
        "desc": "List of NUT variable names to monitor. If no variables are set, all numeric variables will be exported automatically. See the upstream docs for more information.",
        "nixName": "exporters.nut.nutVariables",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.nut.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.nut.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.nut.passwordPath",
        "desc": "A run-time path to the nutUser password file, which should be provisioned outside of Nix store.",
        "nixName": "exporters.nut.passwordPath",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.nut.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.nut.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9199"
      },
      {
        "name": "exporters.nut.user",
        "desc": "User name under which the nut exporter shall be run.",
        "nixName": "exporters.nut.user",
        "type": "string",
        "value": "nut-exporter"
      },
      {
        "name": "exporters.openldap.enable",
        "desc": "Whether to enable the prometheus openldap exporter.",
        "nixName": "exporters.openldap.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.openldap.extraFlags",
        "desc": "Extra commandline options to pass to the openldap exporter.",
        "nixName": "exporters.openldap.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.openldap.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.openldap.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.openldap.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.openldap.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.openldap.openFirewall is true.",
        "nixName": "exporters.openldap.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.openldap.group",
        "desc": "Group under which the openldap exporter shall be run.",
        "nixName": "exporters.openldap.group",
        "type": "string",
        "value": "openldap-exporter"
      },
      {
        "name": "exporters.openldap.interval",
        "desc": "Scrape interval of the exporter.",
        "nixName": "exporters.openldap.interval",
        "type": "string",
        "value": "30s"
      },
      {
        "name": "exporters.openldap.ldapAddr",
        "desc": "Address of the openldap-instance.",
        "nixName": "exporters.openldap.ldapAddr",
        "type": "string",
        "value": "localhost:389"
      },
      {
        "name": "exporters.openldap.ldapCredentialFile",
        "desc": "Environment file to contain the credentials to authenticate against openldap. The file should look like this: --- ldapUser: \"cn=monitoring,cn=Monitor\" ldapPass: \"secret\"",
        "nixName": "exporters.openldap.ldapCredentialFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.openldap.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.openldap.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.openldap.metricsPath",
        "desc": "URL path where metrics should be exposed.",
        "nixName": "exporters.openldap.metricsPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.openldap.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.openldap.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.openldap.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.openldap.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9330"
      },
      {
        "name": "exporters.openldap.protocol",
        "desc": "Which protocol to use to connect against openldap.",
        "nixName": "exporters.openldap.protocol",
        "type": "string",
        "value": "tcp"
      },
      {
        "name": "exporters.openldap.user",
        "desc": "User name under which the openldap exporter shall be run.",
        "nixName": "exporters.openldap.user",
        "type": "string",
        "value": "openldap-exporter"
      },
      {
        "name": "exporters.pgbouncer.connectionString",
        "desc": "Connection string for accessing pgBouncer. NOTE: You MUST keep pgbouncer as database name (special internal db)!!! NOTE: Admin user (with password or passwordless) MUST exist in the services.pgbouncer.authFile if authType other than any is used. WARNING: this secret is stored in the world-readable Nix store! Use connectionStringFile instead.",
        "nixName": "exporters.pgbouncer.connectionString",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.pgbouncer.connectionStringFile",
        "desc": "File that contains pgBouncer connection string in format: postgres://admin:@localhost:6432/pgbouncer?sslmode=require NOTE: You MUST keep pgbouncer as database name (special internal db)!!! NOTE: Admin user (with password or passwordless) MUST exist in the services.pgbouncer.authFile if authType other than any is used. connectionStringFile takes precedence over connectionString",
        "nixName": "exporters.pgbouncer.connectionStringFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pgbouncer.enable",
        "desc": "Whether to enable the prometheus pgbouncer exporter.",
        "nixName": "exporters.pgbouncer.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pgbouncer.extraFlags",
        "desc": "Extra commandline options when launching Prometheus.",
        "nixName": "exporters.pgbouncer.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.pgbouncer.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.pgbouncer.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.pgbouncer.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.pgbouncer.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.pgbouncer.openFirewall is true.",
        "nixName": "exporters.pgbouncer.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.pgbouncer.group",
        "desc": "Group under which the pgbouncer exporter shall be run.",
        "nixName": "exporters.pgbouncer.group",
        "type": "string",
        "value": "pgbouncer-exporter"
      },
      {
        "name": "exporters.pgbouncer.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.pgbouncer.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.pgbouncer.logFormat",
        "desc": "Output format of log messages. One of: [logfmt, json]",
        "nixName": "exporters.pgbouncer.logFormat",
        "type": "one of \"logfmt\", \"json\"",
        "value": "\"logfmt\""
      },
      {
        "name": "exporters.pgbouncer.logLevel",
        "desc": "Only log messages with the given severity or above.",
        "nixName": "exporters.pgbouncer.logLevel",
        "type": "one of \"debug\", \"info\", \"warn\", \"error\"",
        "value": "\"info\""
      },
      {
        "name": "exporters.pgbouncer.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.pgbouncer.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pgbouncer.pidFile",
        "desc": "Path to PgBouncer pid file. If provided, the standard process metrics get exported for the PgBouncer process, prefixed with ‘pgbouncer_process_…’. The pgbouncer_process exporter needs to have read access to files owned by the PgBouncer process. Depends on the availability of /proc. https://prometheus.io/docs/instrumenting/writing_clientlibs/#process-metrics.",
        "nixName": "exporters.pgbouncer.pidFile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.pgbouncer.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.pgbouncer.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9127"
      },
      {
        "name": "exporters.pgbouncer.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.pgbouncer.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.pgbouncer.user",
        "desc": "User name under which the pgbouncer exporter shall be run.",
        "nixName": "exporters.pgbouncer.user",
        "type": "string",
        "value": "pgbouncer-exporter"
      },
      {
        "name": "exporters.pgbouncer.webConfigFile",
        "desc": "Path to configuration file that can enable TLS or authentication.",
        "nixName": "exporters.pgbouncer.webConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pgbouncer.webSystemdSocket",
        "desc": "Use systemd socket activation listeners instead of port listeners (Linux only).",
        "nixName": "exporters.pgbouncer.webSystemdSocket",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.php-fpm.enable",
        "desc": "Whether to enable the prometheus php-fpm exporter.",
        "nixName": "exporters.php-fpm.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.php-fpm.environmentFile",
        "desc": "Environment file as defined in systemd.exec(5). Secrets may be passed to the service without adding them to the world-readable Nix store, by specifying placeholder variables as the option value in Nix and setting these variables accordingly in the environment file. Environment variables from this file will be interpolated into the config file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE} For variables to use see options and defaults. The main use is to set the PHP_FPM_SCRAPE_URI that indicate how to connect to PHP-FPM process.  # Content of the environment file  PHP_FPM_SCRAPE_URI=\"unix:///tmp/php.sock;/status\" Note that this file needs to be available on the host on which this exporter is running.",
        "nixName": "exporters.php-fpm.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.php-fpm.extraFlags",
        "desc": "Extra commandline options to pass to the php-fpm exporter.",
        "nixName": "exporters.php-fpm.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.php-fpm.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.php-fpm.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.php-fpm.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.php-fpm.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.php-fpm.openFirewall is true.",
        "nixName": "exporters.php-fpm.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.php-fpm.group",
        "desc": "Group under which the php-fpm exporter shall be run.",
        "nixName": "exporters.php-fpm.group",
        "type": "string",
        "value": "php-fpm-exporter"
      },
      {
        "name": "exporters.php-fpm.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.php-fpm.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.php-fpm.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.php-fpm.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.php-fpm.package",
        "desc": "The prometheus-php-fpm-exporter package to use.",
        "nixName": "exporters.php-fpm.package",
        "type": "package",
        "value": "pkgs.prometheus-php-fpm-exporter"
      },
      {
        "name": "exporters.php-fpm.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.php-fpm.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9253"
      },
      {
        "name": "exporters.php-fpm.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.php-fpm.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.php-fpm.user",
        "desc": "User name under which the php-fpm exporter shall be run.",
        "nixName": "exporters.php-fpm.user",
        "type": "string",
        "value": "php-fpm-exporter"
      },
      {
        "name": "exporters.pihole.apiToken",
        "desc": "Pi-Hole API token which can be used instead of a password",
        "nixName": "exporters.pihole.apiToken",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.pihole.enable",
        "desc": "Whether to enable the prometheus pihole exporter.",
        "nixName": "exporters.pihole.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pihole.extraFlags",
        "desc": "Extra commandline options to pass to the pihole exporter.",
        "nixName": "exporters.pihole.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.pihole.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.pihole.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.pihole.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.pihole.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.pihole.openFirewall is true.",
        "nixName": "exporters.pihole.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.pihole.group",
        "desc": "Group under which the pihole exporter shall be run.",
        "nixName": "exporters.pihole.group",
        "type": "string",
        "value": "pihole-exporter"
      },
      {
        "name": "exporters.pihole.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.pihole.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.pihole.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.pihole.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pihole.password",
        "desc": "The password to login into Pi-Hole. An api token can be used instead.",
        "nixName": "exporters.pihole.password",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.pihole.piholeHostname",
        "desc": "Hostname or address where to find the Pi-Hole webinterface",
        "nixName": "exporters.pihole.piholeHostname",
        "type": "string",
        "value": "pihole"
      },
      {
        "name": "exporters.pihole.piholePort",
        "desc": "The port Pi-Hole webinterface is reachable on",
        "nixName": "exporters.pihole.piholePort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "80"
      },
      {
        "name": "exporters.pihole.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.pihole.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9617"
      },
      {
        "name": "exporters.pihole.protocol",
        "desc": "The protocol which is used to connect to Pi-Hole",
        "nixName": "exporters.pihole.protocol",
        "type": "one of \"http\", \"https\"",
        "value": "\"http\""
      },
      {
        "name": "exporters.pihole.timeout",
        "desc": "Controls the timeout to connect to a Pi-Hole instance",
        "nixName": "exporters.pihole.timeout",
        "type": "string",
        "value": "5s"
      },
      {
        "name": "exporters.pihole.user",
        "desc": "User name under which the pihole exporter shall be run.",
        "nixName": "exporters.pihole.user",
        "type": "string",
        "value": "pihole-exporter"
      },
      {
        "name": "exporters.ping.enable",
        "desc": "Whether to enable the prometheus ping exporter.",
        "nixName": "exporters.ping.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.ping.extraFlags",
        "desc": "Extra commandline options to pass to the ping exporter.",
        "nixName": "exporters.ping.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.ping.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.ping.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.ping.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.ping.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.ping.openFirewall is true.",
        "nixName": "exporters.ping.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.ping.group",
        "desc": "Group under which the ping exporter shall be run.",
        "nixName": "exporters.ping.group",
        "type": "string",
        "value": "ping-exporter"
      },
      {
        "name": "exporters.ping.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.ping.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.ping.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.ping.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.ping.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.ping.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9427"
      },
      {
        "name": "exporters.ping.settings",
        "desc": "Configuration for ping_exporter, see https://github.com/czerwonk/ping_exporter for supported values.",
        "nixName": "exporters.ping.settings",
        "type": "YAML value",
        "value": "{ }"
      },
      {
        "name": "exporters.ping.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.ping.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.ping.user",
        "desc": "User name under which the ping exporter shall be run.",
        "nixName": "exporters.ping.user",
        "type": "string",
        "value": "ping-exporter"
      },
      {
        "name": "exporters.postfix.enable",
        "desc": "Whether to enable the prometheus postfix exporter.",
        "nixName": "exporters.postfix.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.postfix.extraFlags",
        "desc": "Extra commandline options to pass to the postfix exporter.",
        "nixName": "exporters.postfix.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.postfix.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.postfix.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.postfix.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.postfix.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.postfix.openFirewall is true.",
        "nixName": "exporters.postfix.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.postfix.group",
        "desc": "Group under which the postfix exporter shall be run. It should match the group that is allowed to access the showq socket in the queue/public/ directory. Defaults to services.postfix.setgidGroup when postfix is enabled.",
        "nixName": "exporters.postfix.group",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.postfix.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.postfix.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.postfix.logfilePath",
        "desc": "Path where Postfix writes log entries. This file will be truncated by this exporter!",
        "nixName": "exporters.postfix.logfilePath",
        "type": "path",
        "value": "\"/var/log/postfix_exporter_input.log\""
      },
      {
        "name": "exporters.postfix.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.postfix.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.postfix.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.postfix.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9154"
      },
      {
        "name": "exporters.postfix.showqPath",
        "desc": "Path where Postfix places its showq socket.",
        "nixName": "exporters.postfix.showqPath",
        "type": "path",
        "value": "\"/var/lib/postfix/queue/public/showq\""
      },
      {
        "name": "exporters.postfix.systemd.enable",
        "desc": "Whether to enable reading metrics from the systemd journal instead of from a logfile",
        "nixName": "exporters.postfix.systemd.enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.postfix.systemd.journalPath",
        "desc": "Path to the systemd journal.",
        "nixName": "exporters.postfix.systemd.journalPath",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.postfix.systemd.slice",
        "desc": "Name of the postfix systemd slice. This overrides the systemd.unit.",
        "nixName": "exporters.postfix.systemd.slice",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.postfix.systemd.unit",
        "desc": "Name of the postfix systemd unit.",
        "nixName": "exporters.postfix.systemd.unit",
        "type": "string",
        "value": "postfix.service"
      },
      {
        "name": "exporters.postfix.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.postfix.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.postfix.user",
        "desc": "User name under which the postfix exporter shall be run.",
        "nixName": "exporters.postfix.user",
        "type": "string",
        "value": "postfix-exporter"
      },
      {
        "name": "exporters.postgres.dataSourceName",
        "desc": "Accepts PostgreSQL URI form and key=value form arguments.",
        "nixName": "exporters.postgres.dataSourceName",
        "type": "string",
        "value": "user=postgres database=postgres host=/run/postgresql sslmode=disable"
      },
      {
        "name": "exporters.postgres.enable",
        "desc": "Whether to enable the prometheus postgres exporter.",
        "nixName": "exporters.postgres.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.postgres.environmentFile",
        "desc": "Environment file as defined in systemd.exec(5). Secrets may be passed to the service without adding them to the world-readable Nix store, by specifying placeholder variables as the option value in Nix and setting these variables accordingly in the environment file. Environment variables from this file will be interpolated into the config file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE} The main use is to set the DATA_SOURCE_NAME that contains the postgres password note that contents from this file will override dataSourceName if you have set it from nix.  # Content of the environment file  DATA_SOURCE_NAME=postgresql://username:password@localhost:5432/postgres?sslmode=disable Note that this file needs to be available on the host on which this exporter is running.",
        "nixName": "exporters.postgres.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.postgres.extraFlags",
        "desc": "Extra commandline options to pass to the postgres exporter.",
        "nixName": "exporters.postgres.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.postgres.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.postgres.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.postgres.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.postgres.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.postgres.openFirewall is true.",
        "nixName": "exporters.postgres.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.postgres.group",
        "desc": "Group under which the postgres exporter shall be run.",
        "nixName": "exporters.postgres.group",
        "type": "string",
        "value": "postgres-exporter"
      },
      {
        "name": "exporters.postgres.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.postgres.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.postgres.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.postgres.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.postgres.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.postgres.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9187"
      },
      {
        "name": "exporters.postgres.runAsLocalSuperUser",
        "desc": "Whether to run the exporter as the local ‘postgres’ super user.",
        "nixName": "exporters.postgres.runAsLocalSuperUser",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.postgres.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.postgres.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.postgres.user",
        "desc": "User name under which the postgres exporter shall be run.",
        "nixName": "exporters.postgres.user",
        "type": "string",
        "value": "postgres-exporter"
      },
      {
        "name": "exporters.process.enable",
        "desc": "Whether to enable the prometheus process exporter.",
        "nixName": "exporters.process.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.process.extraFlags",
        "desc": "Extra commandline options to pass to the process exporter.",
        "nixName": "exporters.process.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.process.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.process.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.process.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.process.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.process.openFirewall is true.",
        "nixName": "exporters.process.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.process.group",
        "desc": "Group under which the process exporter shall be run.",
        "nixName": "exporters.process.group",
        "type": "string",
        "value": "process-exporter"
      },
      {
        "name": "exporters.process.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.process.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.process.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.process.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.process.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.process.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9256"
      },
      {
        "name": "exporters.process.settings.process_names",
        "desc": "All settings expressed as an Nix attrset. Check the official documentation for the corresponding YAML settings that can all be used here: https://github.com/ncabatoff/process-exporter",
        "nixName": "exporters.process.settings.process_names",
        "type": "list of anything",
        "value": "[ ]"
      },
      {
        "name": "exporters.process.user",
        "desc": "User name under which the process exporter shall be run.",
        "nixName": "exporters.process.user",
        "type": "string",
        "value": "process-exporter"
      },
      {
        "name": "exporters.pve.collectors.cluster",
        "desc": "Collect PVE cluster info",
        "nixName": "exporters.pve.collectors.cluster",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.collectors.config",
        "desc": "Collect PVE onboot status",
        "nixName": "exporters.pve.collectors.config",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.collectors.node",
        "desc": "Collect PVE node info",
        "nixName": "exporters.pve.collectors.node",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.collectors.resources",
        "desc": "Collect PVE resources info",
        "nixName": "exporters.pve.collectors.resources",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.collectors.status",
        "desc": "Collect Node/VM/CT status",
        "nixName": "exporters.pve.collectors.status",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.collectors.version",
        "desc": "Collect PVE version info",
        "nixName": "exporters.pve.collectors.version",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.pve.configFile",
        "desc": "Path to the service’s config file. This path can either be a computed path in /nix/store or a path in the local filesystem. The config file should NOT be stored in /nix/store as it will contain passwords and/or keys in plain text. If both configFile and environmentFile are provided, the configFile option will be ignored. Configuration reference: https://github.com/prometheus-pve/prometheus-pve-exporter/#authentication",
        "nixName": "exporters.pve.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pve.enable",
        "desc": "Whether to enable the prometheus pve exporter.",
        "nixName": "exporters.pve.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pve.environmentFile",
        "desc": "Path to the service’s environment file. This path can either be a computed path in /nix/store or a path in the local filesystem. The environment file should NOT be stored in /nix/store as it contains passwords and/or keys in plain text. Environment reference: https://github.com/prometheus-pve/prometheus-pve-exporter#authentication",
        "nixName": "exporters.pve.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pve.extraFlags",
        "desc": "Extra commandline options to pass to the pve exporter.",
        "nixName": "exporters.pve.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.pve.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.pve.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.pve.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.pve.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.pve.openFirewall is true.",
        "nixName": "exporters.pve.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.pve.group",
        "desc": "Group under which the pve exporter shall be run.",
        "nixName": "exporters.pve.group",
        "type": "string",
        "value": "pve-exporter"
      },
      {
        "name": "exporters.pve.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.pve.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.pve.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.pve.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.pve.package",
        "desc": "The prometheus-pve-exporter package to use.",
        "nixName": "exporters.pve.package",
        "type": "package",
        "value": "pkgs.prometheus-pve-exporter"
      },
      {
        "name": "exporters.pve.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.pve.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9221"
      },
      {
        "name": "exporters.pve.server.certFile",
        "desc": "Path to a SSL certificate file for the server",
        "nixName": "exporters.pve.server.certFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pve.server.keyFile",
        "desc": "Path to a SSL private key file for the server",
        "nixName": "exporters.pve.server.keyFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.pve.user",
        "desc": "User name under which the pve exporter shall be run.",
        "nixName": "exporters.pve.user",
        "type": "string",
        "value": "pve-exporter"
      },
      {
        "name": "exporters.py-air-control.deviceHostname",
        "desc": "The hostname of the air purification device from which to scrape the metrics.",
        "nixName": "exporters.py-air-control.deviceHostname",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.py-air-control.enable",
        "desc": "Whether to enable the prometheus py-air-control exporter.",
        "nixName": "exporters.py-air-control.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.py-air-control.extraFlags",
        "desc": "Extra commandline options to pass to the py-air-control exporter.",
        "nixName": "exporters.py-air-control.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.py-air-control.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.py-air-control.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.py-air-control.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.py-air-control.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.py-air-control.openFirewall is true.",
        "nixName": "exporters.py-air-control.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.py-air-control.group",
        "desc": "Group under which the py-air-control exporter shall be run.",
        "nixName": "exporters.py-air-control.group",
        "type": "string",
        "value": "py-air-control-exporter"
      },
      {
        "name": "exporters.py-air-control.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.py-air-control.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.py-air-control.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.py-air-control.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.py-air-control.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.py-air-control.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9896"
      },
      {
        "name": "exporters.py-air-control.protocol",
        "desc": "The protocol to use when communicating with the air purification device. Available: [http, coap, plain_coap]",
        "nixName": "exporters.py-air-control.protocol",
        "type": "string",
        "value": "http"
      },
      {
        "name": "exporters.py-air-control.stateDir",
        "desc": "Directory below /var/lib to store runtime data. This directory will be created automatically using systemd’s StateDirectory mechanism.",
        "nixName": "exporters.py-air-control.stateDir",
        "type": "string",
        "value": "prometheus-py-air-control-exporter"
      },
      {
        "name": "exporters.py-air-control.user",
        "desc": "User name under which the py-air-control exporter shall be run.",
        "nixName": "exporters.py-air-control.user",
        "type": "string",
        "value": "py-air-control-exporter"
      },
      {
        "name": "exporters.redis.enable",
        "desc": "Whether to enable the prometheus redis exporter.",
        "nixName": "exporters.redis.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.redis.extraFlags",
        "desc": "Extra commandline options to pass to the redis exporter.",
        "nixName": "exporters.redis.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.redis.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.redis.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.redis.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.redis.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.redis.openFirewall is true.",
        "nixName": "exporters.redis.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.redis.group",
        "desc": "Group under which the redis exporter shall be run.",
        "nixName": "exporters.redis.group",
        "type": "string",
        "value": "redis-exporter"
      },
      {
        "name": "exporters.redis.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.redis.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.redis.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.redis.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.redis.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.redis.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9121"
      },
      {
        "name": "exporters.redis.user",
        "desc": "User name under which the redis exporter shall be run.",
        "nixName": "exporters.redis.user",
        "type": "string",
        "value": "redis-exporter"
      },
      {
        "name": "exporters.restic.enable",
        "desc": "Whether to enable the prometheus restic exporter.",
        "nixName": "exporters.restic.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.restic.environmentFile",
        "desc": "File containing the credentials to access the repository, in the format of an EnvironmentFile as described by systemd.exec(5)",
        "nixName": "exporters.restic.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.restic.extraFlags",
        "desc": "Extra commandline options to pass to the restic exporter.",
        "nixName": "exporters.restic.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.restic.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.restic.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.restic.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.restic.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.restic.openFirewall is true.",
        "nixName": "exporters.restic.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.restic.group",
        "desc": "Group under which the restic exporter shall be run.",
        "nixName": "exporters.restic.group",
        "type": "string",
        "value": "restic-exporter"
      },
      {
        "name": "exporters.restic.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.restic.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.restic.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.restic.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.restic.passwordFile",
        "desc": "File containing the password to the repository.",
        "nixName": "exporters.restic.passwordFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.restic.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.restic.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9753"
      },
      {
        "name": "exporters.restic.rcloneConfig",
        "desc": "Configuration for the rclone remote being used for backup. See the remote’s specific options under rclone’s docs at https://rclone.org/docs/. When specifying option names, use the “config” name specified in the docs. For example, to set --b2-hard-delete for a B2 remote, use hard_delete = true in the attribute set.  Secrets set in here will be world-readable in the Nix store! Consider using the rcloneConfigFile option instead to specify secret values separately. Note that options set here will override those set in the config file.",
        "nixName": "exporters.restic.rcloneConfig",
        "type": "attribute set of (string or boolean)",
        "value": "{ }"
      },
      {
        "name": "exporters.restic.rcloneConfigFile",
        "desc": "Path to the file containing rclone configuration. This file must contain configuration for the remote specified in this backup set and also must be readable by root.  Options set in rcloneConfig will override those set in this file.",
        "nixName": "exporters.restic.rcloneConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.restic.rcloneOptions",
        "desc": "Options to pass to rclone to control its behavior. See https://rclone.org/docs/#options for available options. When specifying option names, strip the leading --. To set a flag such as --drive-use-trash, which does not take a value, set the value to the Boolean true.",
        "nixName": "exporters.restic.rcloneOptions",
        "type": "attribute set of (string or boolean)",
        "value": "{ }"
      },
      {
        "name": "exporters.restic.refreshInterval",
        "desc": "Refresh interval for the metrics in seconds. Computing the metrics is an expensive task, keep this value as high as possible.",
        "nixName": "exporters.restic.refreshInterval",
        "type": "unsigned integer, meaning >=0",
        "value": "60"
      },
      {
        "name": "exporters.restic.repository",
        "desc": "URI pointing to the repository to monitor.",
        "nixName": "exporters.restic.repository",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.restic.user",
        "desc": "User name under which the restic exporter shall be run.",
        "nixName": "exporters.restic.user",
        "type": "string",
        "value": "restic-exporter"
      },
      {
        "name": "exporters.rspamd.enable",
        "desc": "Whether to enable the prometheus rspamd exporter.",
        "nixName": "exporters.rspamd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.rspamd.extraFlags",
        "desc": "Extra commandline options to pass to the rspamd exporter.",
        "nixName": "exporters.rspamd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.rspamd.extraLabels",
        "desc": "Set of labels added to each metric.",
        "nixName": "exporters.rspamd.extraLabels",
        "type": "attribute set of string",
        "value": "{ host = config.networking.hostName; }"
      },
      {
        "name": "exporters.rspamd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.rspamd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.rspamd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.rspamd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.rspamd.openFirewall is true.",
        "nixName": "exporters.rspamd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.rspamd.group",
        "desc": "Group under which the rspamd exporter shall be run.",
        "nixName": "exporters.rspamd.group",
        "type": "string",
        "value": "rspamd-exporter"
      },
      {
        "name": "exporters.rspamd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.rspamd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.rspamd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.rspamd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.rspamd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.rspamd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "7980"
      },
      {
        "name": "exporters.rspamd.user",
        "desc": "User name under which the rspamd exporter shall be run.",
        "nixName": "exporters.rspamd.user",
        "type": "string",
        "value": "rspamd-exporter"
      },
      {
        "name": "exporters.rtl_433.channels",
        "desc": "List of channel matchers to export.",
        "nixName": "exporters.rtl_433.channels",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "exporters.rtl_433.channels.*.channel",
        "desc": "Channel to match.",
        "nixName": "exporters.rtl_433.channels.*.channel",
        "type": "signed integer",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.channels.*.location",
        "desc": "Location to match.",
        "nixName": "exporters.rtl_433.channels.*.location",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.channels.*.name",
        "desc": "Name to match.",
        "nixName": "exporters.rtl_433.channels.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.enable",
        "desc": "Whether to enable the prometheus rtl_433 exporter.",
        "nixName": "exporters.rtl_433.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.rtl_433.extraFlags",
        "desc": "Extra commandline options to pass to the rtl_433 exporter.",
        "nixName": "exporters.rtl_433.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.rtl_433.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.rtl_433.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.rtl_433.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.rtl_433.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.rtl_433.openFirewall is true.",
        "nixName": "exporters.rtl_433.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.rtl_433.group",
        "desc": "Group under which the rtl_433 exporter shall be run.",
        "nixName": "exporters.rtl_433.group",
        "type": "string",
        "value": "rtl_433-exporter"
      },
      {
        "name": "exporters.rtl_433.ids",
        "desc": "List of ID matchers to export.",
        "nixName": "exporters.rtl_433.ids",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "exporters.rtl_433.ids.*.id",
        "desc": "ID to match.",
        "nixName": "exporters.rtl_433.ids.*.id",
        "type": "signed integer",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.ids.*.location",
        "desc": "Location to match.",
        "nixName": "exporters.rtl_433.ids.*.location",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.ids.*.name",
        "desc": "Name to match.",
        "nixName": "exporters.rtl_433.ids.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.rtl_433.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.rtl_433.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.rtl_433.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.rtl_433.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.rtl_433.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.rtl_433.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9550"
      },
      {
        "name": "exporters.rtl_433.rtl433Flags",
        "desc": "Flags passed verbatim to rtl_433 binary. Having -C si (the default) is recommended since only Celsius temperatures are parsed.",
        "nixName": "exporters.rtl_433.rtl433Flags",
        "type": "string",
        "value": "-C si"
      },
      {
        "name": "exporters.rtl_433.user",
        "desc": "User name under which the rtl_433 exporter shall be run.",
        "nixName": "exporters.rtl_433.user",
        "type": "string",
        "value": "rtl_433-exporter"
      },
      {
        "name": "exporters.sabnzbd.enable",
        "desc": "Whether to enable the prometheus sabnzbd exporter.",
        "nixName": "exporters.sabnzbd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.sabnzbd.extraFlags",
        "desc": "Extra commandline options to pass to the sabnzbd exporter.",
        "nixName": "exporters.sabnzbd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.sabnzbd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.sabnzbd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.sabnzbd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.sabnzbd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.sabnzbd.openFirewall is true.",
        "nixName": "exporters.sabnzbd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.sabnzbd.group",
        "desc": "Group under which the sabnzbd exporter shall be run.",
        "nixName": "exporters.sabnzbd.group",
        "type": "string",
        "value": "sabnzbd-exporter"
      },
      {
        "name": "exporters.sabnzbd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.sabnzbd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.sabnzbd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.sabnzbd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.sabnzbd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.sabnzbd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9387"
      },
      {
        "name": "exporters.sabnzbd.servers",
        "desc": "List of sabnzbd servers to connect to.",
        "nixName": "exporters.sabnzbd.servers",
        "type": "list of (submodule)",
        "value": ""
      },
      {
        "name": "exporters.sabnzbd.servers.*.apiKeyFile",
        "desc": "The path to a file containing the API key. The file is securely passed to the service by leveraging systemd credentials. No special permissions need to be set on this file.",
        "nixName": "exporters.sabnzbd.servers.*.apiKeyFile",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.sabnzbd.servers.*.baseUrl",
        "desc": "Base URL of the sabnzbd server.",
        "nixName": "exporters.sabnzbd.servers.*.baseUrl",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.sabnzbd.user",
        "desc": "User name under which the sabnzbd exporter shall be run.",
        "nixName": "exporters.sabnzbd.user",
        "type": "string",
        "value": "sabnzbd-exporter"
      },
      {
        "name": "exporters.scaphandre.enable",
        "desc": "Whether to enable the prometheus scaphandre exporter.",
        "nixName": "exporters.scaphandre.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.scaphandre.extraFlags",
        "desc": "Extra commandline options to pass to the scaphandre exporter.",
        "nixName": "exporters.scaphandre.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.scaphandre.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.scaphandre.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.scaphandre.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.scaphandre.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.scaphandre.openFirewall is true.",
        "nixName": "exporters.scaphandre.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.scaphandre.group",
        "desc": "Group under which the scaphandre exporter shall be run.",
        "nixName": "exporters.scaphandre.group",
        "type": "string",
        "value": "scaphandre-exporter"
      },
      {
        "name": "exporters.scaphandre.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.scaphandre.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.scaphandre.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.scaphandre.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.scaphandre.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.scaphandre.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "exporters.scaphandre.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.scaphandre.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.scaphandre.user",
        "desc": "User name under which the scaphandre exporter shall be run.",
        "nixName": "exporters.scaphandre.user",
        "type": "string",
        "value": "scaphandre-exporter"
      },
      {
        "name": "exporters.script.enable",
        "desc": "Whether to enable the prometheus script exporter.",
        "nixName": "exporters.script.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.script.extraFlags",
        "desc": "Extra commandline options to pass to the script exporter.",
        "nixName": "exporters.script.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.script.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.script.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.script.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.script.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.script.openFirewall is true.",
        "nixName": "exporters.script.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.script.group",
        "desc": "Group under which the script exporter shall be run.",
        "nixName": "exporters.script.group",
        "type": "string",
        "value": "script-exporter"
      },
      {
        "name": "exporters.script.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.script.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.script.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.script.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.script.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.script.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9172"
      },
      {
        "name": "exporters.script.settings.scripts",
        "desc": "All settings expressed as an Nix attrset. Check the official documentation for the corresponding YAML settings that can all be used here: https://github.com/adhocteam/script_exporter#sample-configuration",
        "nixName": "exporters.script.settings.scripts",
        "type": "list of (submodule)",
        "value": ""
      },
      {
        "name": "exporters.script.settings.scripts.*.name",
        "desc": "Name of the script.",
        "nixName": "exporters.script.settings.scripts.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.script.settings.scripts.*.script",
        "desc": "Shell script to execute when metrics are requested.",
        "nixName": "exporters.script.settings.scripts.*.script",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.script.settings.scripts.*.timeout",
        "desc": "Optional timeout for the script in seconds.",
        "nixName": "exporters.script.settings.scripts.*.timeout",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "exporters.script.user",
        "desc": "User name under which the script exporter shall be run.",
        "nixName": "exporters.script.user",
        "type": "string",
        "value": "script-exporter"
      },
      {
        "name": "exporters.shelly.enable",
        "desc": "Whether to enable the prometheus shelly exporter.",
        "nixName": "exporters.shelly.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.shelly.extraFlags",
        "desc": "Extra commandline options to pass to the shelly exporter.",
        "nixName": "exporters.shelly.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.shelly.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.shelly.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.shelly.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.shelly.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.shelly.openFirewall is true.",
        "nixName": "exporters.shelly.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.shelly.group",
        "desc": "Group under which the shelly exporter shall be run.",
        "nixName": "exporters.shelly.group",
        "type": "string",
        "value": "shelly-exporter"
      },
      {
        "name": "exporters.shelly.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.shelly.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.shelly.metrics-file",
        "desc": "Path to the JSON file with the metric definitions",
        "nixName": "exporters.shelly.metrics-file",
        "type": "path",
        "value": ""
      },
      {
        "name": "exporters.shelly.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.shelly.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.shelly.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.shelly.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9784"
      },
      {
        "name": "exporters.shelly.user",
        "desc": "User name under which the shelly exporter shall be run.",
        "nixName": "exporters.shelly.user",
        "type": "string",
        "value": "shelly-exporter"
      },
      {
        "name": "exporters.smartctl.devices",
        "desc": "Paths to the disks that will be monitored. Will autodiscover all disks if none given.",
        "nixName": "exporters.smartctl.devices",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.smartctl.enable",
        "desc": "Whether to enable the prometheus smartctl exporter.",
        "nixName": "exporters.smartctl.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.smartctl.extraFlags",
        "desc": "Extra commandline options to pass to the smartctl exporter.",
        "nixName": "exporters.smartctl.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.smartctl.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.smartctl.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.smartctl.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.smartctl.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.smartctl.openFirewall is true.",
        "nixName": "exporters.smartctl.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.smartctl.group",
        "desc": "Group under which the smartctl exporter shall be run.",
        "nixName": "exporters.smartctl.group",
        "type": "string",
        "value": "smartctl-exporter"
      },
      {
        "name": "exporters.smartctl.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.smartctl.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.smartctl.maxInterval",
        "desc": "Interval that limits how often a disk can be queried.",
        "nixName": "exporters.smartctl.maxInterval",
        "type": "string",
        "value": "60s"
      },
      {
        "name": "exporters.smartctl.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.smartctl.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.smartctl.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.smartctl.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9633"
      },
      {
        "name": "exporters.smartctl.user",
        "desc": "User name under which the smartctl exporter shall be run.",
        "nixName": "exporters.smartctl.user",
        "type": "string",
        "value": "smartctl-exporter"
      },
      {
        "name": "exporters.smokeping.buckets",
        "desc": "List of buckets to use for the response duration histogram.",
        "nixName": "exporters.smokeping.buckets",
        "type": "strings concatenated with \",\"",
        "value": "\"5e-05,0.0001,0.0002,0.0004,0.0008,0.0016,0.0032,0.0064,0.0128,0.0256,0.0512,0.1024,0.2048,0.4096,0.8192,1.6384,3.2768,6.5536,13.1072,26.2144\""
      },
      {
        "name": "exporters.smokeping.enable",
        "desc": "Whether to enable the prometheus smokeping exporter.",
        "nixName": "exporters.smokeping.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.smokeping.extraFlags",
        "desc": "Extra commandline options to pass to the smokeping exporter.",
        "nixName": "exporters.smokeping.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.smokeping.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.smokeping.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.smokeping.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.smokeping.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.smokeping.openFirewall is true.",
        "nixName": "exporters.smokeping.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.smokeping.group",
        "desc": "Group under which the smokeping exporter shall be run.",
        "nixName": "exporters.smokeping.group",
        "type": "string",
        "value": "smokeping-exporter"
      },
      {
        "name": "exporters.smokeping.hosts",
        "desc": "List of endpoints to probe.",
        "nixName": "exporters.smokeping.hosts",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "exporters.smokeping.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.smokeping.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.smokeping.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.smokeping.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.smokeping.pingInterval",
        "desc": "Interval between pings.",
        "nixName": "exporters.smokeping.pingInterval",
        "type": "Go duration (https://golang.org/pkg/time/#ParseDuration)",
        "value": "\"1s\""
      },
      {
        "name": "exporters.smokeping.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.smokeping.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9374"
      },
      {
        "name": "exporters.smokeping.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.smokeping.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.smokeping.user",
        "desc": "User name under which the smokeping exporter shall be run.",
        "nixName": "exporters.smokeping.user",
        "type": "string",
        "value": "smokeping-exporter"
      },
      {
        "name": "exporters.snmp.configuration",
        "desc": "Snmp exporter configuration as nix attribute set. Mutually exclusive with ‘configurationPath’ option.",
        "nixName": "exporters.snmp.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "exporters.snmp.configurationPath",
        "desc": "Path to a snmp exporter configuration file. Mutually exclusive with ‘configuration’ option.",
        "nixName": "exporters.snmp.configurationPath",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.snmp.enable",
        "desc": "Whether to enable the prometheus snmp exporter.",
        "nixName": "exporters.snmp.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.snmp.enableConfigCheck",
        "desc": "Whether to run a correctness check for the configuration file. This depends on the configuration file residing in the nix-store. Paths passed as string will be copied to the store.",
        "nixName": "exporters.snmp.enableConfigCheck",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.snmp.environmentFile",
        "desc": "EnvironmentFile as defined in systemd.exec(5). Secrets may be passed to the service without adding them to the world-readable Nix store, by specifying placeholder variables as the option value in Nix and setting these variables accordingly in the environment file. Environment variables from this file will be interpolated into the config file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE} For variables to use see Prometheus Configuration. If the file path is set to this option, the parameter --config.expand-environment-variables is implicitly added to ExecStart. Note that this file needs to be available on the host on which this exporter is running.",
        "nixName": "exporters.snmp.environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.snmp.extraFlags",
        "desc": "Extra commandline options to pass to the snmp exporter.",
        "nixName": "exporters.snmp.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.snmp.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.snmp.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.snmp.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.snmp.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.snmp.openFirewall is true.",
        "nixName": "exporters.snmp.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.snmp.group",
        "desc": "Group under which the snmp exporter shall be run.",
        "nixName": "exporters.snmp.group",
        "type": "string",
        "value": "snmp-exporter"
      },
      {
        "name": "exporters.snmp.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.snmp.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.snmp.logFormat",
        "desc": "Output format of log messages.",
        "nixName": "exporters.snmp.logFormat",
        "type": "one of \"logfmt\", \"json\"",
        "value": "\"logfmt\""
      },
      {
        "name": "exporters.snmp.logLevel",
        "desc": "Only log messages with the given severity or above.",
        "nixName": "exporters.snmp.logLevel",
        "type": "one of \"debug\", \"info\", \"warn\", \"error\"",
        "value": "\"info\""
      },
      {
        "name": "exporters.snmp.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.snmp.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.snmp.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.snmp.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9116"
      },
      {
        "name": "exporters.snmp.user",
        "desc": "User name under which the snmp exporter shall be run.",
        "nixName": "exporters.snmp.user",
        "type": "string",
        "value": "snmp-exporter"
      },
      {
        "name": "exporters.sql.configFile",
        "desc": "Path to configuration file.",
        "nixName": "exporters.sql.configFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "exporters.sql.configuration",
        "desc": "Exporter configuration as nix attribute set. Mutually exclusive with ‘configFile’ option.",
        "nixName": "exporters.sql.configuration",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "exporters.sql.configuration.jobs",
        "desc": "An attrset of metrics scraping jobs to run.",
        "nixName": "exporters.sql.configuration.jobs",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.connections",
        "desc": "A list of connection strings of the SQL servers to scrape metrics from",
        "nixName": "exporters.sql.configuration.jobs.<name>.connections",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.interval",
        "desc": "How often to run this job, specified in Go duration format.",
        "nixName": "exporters.sql.configuration.jobs.<name>.interval",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.queries",
        "desc": "SQL queries to run.",
        "nixName": "exporters.sql.configuration.jobs.<name>.queries",
        "type": "attribute set of (submodule)",
        "value": ""
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.help",
        "desc": "A human-readable description of this metric.",
        "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.help",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.labels",
        "desc": "A set of columns that will be used as Prometheus labels.",
        "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.labels",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.query",
        "desc": "The SQL query to run.",
        "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.query",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.values",
        "desc": "A set of columns that will be used as values of this metric.",
        "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.values",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "exporters.sql.configuration.jobs.<name>.startupSql",
        "desc": "A list of SQL statements to execute once after making a connection.",
        "nixName": "exporters.sql.configuration.jobs.<name>.startupSql",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.sql.enable",
        "desc": "Whether to enable the prometheus sql exporter.",
        "nixName": "exporters.sql.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.sql.extraFlags",
        "desc": "Extra commandline options to pass to the sql exporter.",
        "nixName": "exporters.sql.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.sql.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.sql.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.sql.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.sql.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.sql.openFirewall is true.",
        "nixName": "exporters.sql.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.sql.group",
        "desc": "Group under which the sql exporter shall be run.",
        "nixName": "exporters.sql.group",
        "type": "string",
        "value": "sql-exporter"
      },
      {
        "name": "exporters.sql.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.sql.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.sql.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.sql.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.sql.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.sql.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9237"
      },
      {
        "name": "exporters.sql.user",
        "desc": "User name under which the sql exporter shall be run.",
        "nixName": "exporters.sql.user",
        "type": "string",
        "value": "sql-exporter"
      },
      {
        "name": "exporters.statsd.enable",
        "desc": "Whether to enable the prometheus statsd exporter.",
        "nixName": "exporters.statsd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.statsd.extraFlags",
        "desc": "Extra commandline options to pass to the statsd exporter.",
        "nixName": "exporters.statsd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.statsd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.statsd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.statsd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.statsd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.statsd.openFirewall is true.",
        "nixName": "exporters.statsd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.statsd.group",
        "desc": "Group under which the statsd exporter shall be run.",
        "nixName": "exporters.statsd.group",
        "type": "string",
        "value": "statsd-exporter"
      },
      {
        "name": "exporters.statsd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.statsd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.statsd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.statsd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.statsd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.statsd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9102"
      },
      {
        "name": "exporters.statsd.user",
        "desc": "User name under which the statsd exporter shall be run.",
        "nixName": "exporters.statsd.user",
        "type": "string",
        "value": "statsd-exporter"
      },
      {
        "name": "exporters.surfboard.enable",
        "desc": "Whether to enable the prometheus surfboard exporter.",
        "nixName": "exporters.surfboard.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.surfboard.extraFlags",
        "desc": "Extra commandline options to pass to the surfboard exporter.",
        "nixName": "exporters.surfboard.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.surfboard.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.surfboard.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.surfboard.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.surfboard.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.surfboard.openFirewall is true.",
        "nixName": "exporters.surfboard.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.surfboard.group",
        "desc": "Group under which the surfboard exporter shall be run.",
        "nixName": "exporters.surfboard.group",
        "type": "string",
        "value": "surfboard-exporter"
      },
      {
        "name": "exporters.surfboard.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.surfboard.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.surfboard.modemAddress",
        "desc": "The hostname or IP of the cable modem.",
        "nixName": "exporters.surfboard.modemAddress",
        "type": "string",
        "value": "192.168.100.1"
      },
      {
        "name": "exporters.surfboard.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.surfboard.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.surfboard.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.surfboard.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9239"
      },
      {
        "name": "exporters.surfboard.user",
        "desc": "User name under which the surfboard exporter shall be run.",
        "nixName": "exporters.surfboard.user",
        "type": "string",
        "value": "surfboard-exporter"
      },
      {
        "name": "exporters.systemd.enable",
        "desc": "Whether to enable the prometheus systemd exporter.",
        "nixName": "exporters.systemd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.systemd.extraFlags",
        "desc": "Extra commandline options to pass to the systemd exporter.",
        "nixName": "exporters.systemd.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.systemd.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.systemd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.systemd.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.systemd.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.systemd.openFirewall is true.",
        "nixName": "exporters.systemd.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.systemd.group",
        "desc": "Group under which the systemd exporter shall be run.",
        "nixName": "exporters.systemd.group",
        "type": "string",
        "value": "systemd-exporter"
      },
      {
        "name": "exporters.systemd.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.systemd.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.systemd.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.systemd.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.systemd.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.systemd.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9558"
      },
      {
        "name": "exporters.systemd.user",
        "desc": "User name under which the systemd exporter shall be run.",
        "nixName": "exporters.systemd.user",
        "type": "string",
        "value": "systemd-exporter"
      },
      {
        "name": "exporters.tor.enable",
        "desc": "Whether to enable the prometheus tor exporter.",
        "nixName": "exporters.tor.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.tor.extraFlags",
        "desc": "Extra commandline options to pass to the tor exporter.",
        "nixName": "exporters.tor.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.tor.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.tor.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.tor.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.tor.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.tor.openFirewall is true.",
        "nixName": "exporters.tor.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.tor.group",
        "desc": "Group under which the tor exporter shall be run.",
        "nixName": "exporters.tor.group",
        "type": "string",
        "value": "tor-exporter"
      },
      {
        "name": "exporters.tor.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.tor.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.tor.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.tor.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.tor.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.tor.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9130"
      },
      {
        "name": "exporters.tor.torControlAddress",
        "desc": "Tor control IP address or hostname.",
        "nixName": "exporters.tor.torControlAddress",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "exporters.tor.torControlPort",
        "desc": "Tor control port.",
        "nixName": "exporters.tor.torControlPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9051"
      },
      {
        "name": "exporters.tor.user",
        "desc": "User name under which the tor exporter shall be run.",
        "nixName": "exporters.tor.user",
        "type": "string",
        "value": "tor-exporter"
      },
      {
        "name": "exporters.unbound.enable",
        "desc": "Whether to enable the prometheus unbound exporter.",
        "nixName": "exporters.unbound.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unbound.extraFlags",
        "desc": "Extra commandline options to pass to the unbound exporter.",
        "nixName": "exporters.unbound.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.unbound.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.unbound.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.unbound.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.unbound.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.unbound.openFirewall is true.",
        "nixName": "exporters.unbound.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.unbound.group",
        "desc": "Group under which the unbound exporter shall be run.",
        "nixName": "exporters.unbound.group",
        "type": "string",
        "value": "unbound-exporter"
      },
      {
        "name": "exporters.unbound.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.unbound.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.unbound.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.unbound.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unbound.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.unbound.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9167"
      },
      {
        "name": "exporters.unbound.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.unbound.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.unbound.unbound.ca",
        "desc": "Path to the Unbound server certificate authority",
        "nixName": "exporters.unbound.unbound.ca",
        "type": "null or path",
        "value": "\"/var/lib/unbound/unbound_server.pem\""
      },
      {
        "name": "exporters.unbound.unbound.certificate",
        "desc": "Path to the Unbound control socket certificate",
        "nixName": "exporters.unbound.unbound.certificate",
        "type": "null or path",
        "value": "\"/var/lib/unbound/unbound_control.pem\""
      },
      {
        "name": "exporters.unbound.unbound.host",
        "desc": "Path to the unbound control socket. Supports unix domain sockets, as well as the TCP interface.",
        "nixName": "exporters.unbound.unbound.host",
        "type": "string",
        "value": "tcp://127.0.0.1:8953"
      },
      {
        "name": "exporters.unbound.unbound.key",
        "desc": "Path to the Unbound control socket key.",
        "nixName": "exporters.unbound.unbound.key",
        "type": "null or path",
        "value": "\"/var/lib/unbound/unbound_control.key\""
      },
      {
        "name": "exporters.unbound.user",
        "desc": "User name under which the unbound exporter shall be run.",
        "nixName": "exporters.unbound.user",
        "type": "string",
        "value": "unbound-exporter"
      },
      {
        "name": "exporters.unifi.enable",
        "desc": "Whether to enable the prometheus unifi exporter.",
        "nixName": "exporters.unifi.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unifi.extraFlags",
        "desc": "Extra commandline options to pass to the unifi exporter.",
        "nixName": "exporters.unifi.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.unifi.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.unifi.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.unifi.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.unifi.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.unifi.openFirewall is true.",
        "nixName": "exporters.unifi.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.unifi.group",
        "desc": "Group under which the unifi exporter shall be run.",
        "nixName": "exporters.unifi.group",
        "type": "string",
        "value": "unifi-exporter"
      },
      {
        "name": "exporters.unifi.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.unifi.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.unifi.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.unifi.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unifi.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.unifi.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9130"
      },
      {
        "name": "exporters.unifi.unifiAddress",
        "desc": "URL of the UniFi Controller API.",
        "nixName": "exporters.unifi.unifiAddress",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unifi.unifiInsecure",
        "desc": "If enabled skip the verification of the TLS certificate of the UniFi Controller API. Use with caution.",
        "nixName": "exporters.unifi.unifiInsecure",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unifi.unifiPassword",
        "desc": "Password for authentication against UniFi Controller API.",
        "nixName": "exporters.unifi.unifiPassword",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unifi.unifiTimeout",
        "desc": "Timeout including unit for UniFi Controller API requests.",
        "nixName": "exporters.unifi.unifiTimeout",
        "type": "string",
        "value": "5s"
      },
      {
        "name": "exporters.unifi.unifiUsername",
        "desc": "username for authentication against UniFi Controller API.",
        "nixName": "exporters.unifi.unifiUsername",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unifi.user",
        "desc": "User name under which the unifi exporter shall be run.",
        "nixName": "exporters.unifi.user",
        "type": "string",
        "value": "unifi-exporter"
      },
      {
        "name": "exporters.unpoller.controllers",
        "desc": "List of Unifi controllers to poll. Use defaults if empty.",
        "nixName": "exporters.unpoller.controllers",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "exporters.unpoller.controllers.*.hash_pii",
        "desc": "Hash, with md5, client names and MAC addresses. This attempts to protect personally identifiable information.",
        "nixName": "exporters.unpoller.controllers.*.hash_pii",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.pass",
        "desc": "Path of a file containing the password for the unifi service user. This file needs to be readable by the unifi-poller user.",
        "nixName": "exporters.unpoller.controllers.*.pass",
        "type": "path",
        "value": "unpoller-unifi-default.password"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_alarms",
        "desc": "Collect and save data from UniFi alarms to influxdb and Loki.",
        "nixName": "exporters.unpoller.controllers.*.save_alarms",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_anomalies",
        "desc": "Collect and save data from UniFi anomalies to influxdb and Loki.",
        "nixName": "exporters.unpoller.controllers.*.save_anomalies",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_dpi",
        "desc": "Collect and save data from deep packet inspection. Adds around 150 data points and impacts performance.",
        "nixName": "exporters.unpoller.controllers.*.save_dpi",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_events",
        "desc": "Collect and save data from UniFi events to influxdb and Loki.",
        "nixName": "exporters.unpoller.controllers.*.save_events",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_ids",
        "desc": "Collect and save data from the intrusion detection system to influxdb and Loki.",
        "nixName": "exporters.unpoller.controllers.*.save_ids",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.controllers.*.save_sites",
        "desc": "Collect and save site data.",
        "nixName": "exporters.unpoller.controllers.*.save_sites",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.unpoller.controllers.*.sites",
        "desc": "List of site names for which statistics should be exported. Or the string “default” for the default site or the string “all” for all sites.",
        "nixName": "exporters.unpoller.controllers.*.sites",
        "type": "one of \"default\", \"all\" or list of string",
        "value": "\"all\""
      },
      {
        "name": "exporters.unpoller.controllers.*.url",
        "desc": "URL of the Unifi controller.",
        "nixName": "exporters.unpoller.controllers.*.url",
        "type": "string",
        "value": "https://unifi:8443"
      },
      {
        "name": "exporters.unpoller.controllers.*.user",
        "desc": "Unifi service user name.",
        "nixName": "exporters.unpoller.controllers.*.user",
        "type": "string",
        "value": "unifi"
      },
      {
        "name": "exporters.unpoller.controllers.*.verify_ssl",
        "desc": "Verify the Unifi controller’s certificate.",
        "nixName": "exporters.unpoller.controllers.*.verify_ssl",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "exporters.unpoller.enable",
        "desc": "Whether to enable the prometheus unpoller exporter.",
        "nixName": "exporters.unpoller.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.extraFlags",
        "desc": "Extra commandline options to pass to the unpoller exporter.",
        "nixName": "exporters.unpoller.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.unpoller.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.unpoller.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.unpoller.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.unpoller.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.unpoller.openFirewall is true.",
        "nixName": "exporters.unpoller.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.unpoller.group",
        "desc": "Group under which the unpoller exporter shall be run.",
        "nixName": "exporters.unpoller.group",
        "type": "string",
        "value": "unpoller-exporter"
      },
      {
        "name": "exporters.unpoller.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.unpoller.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.unpoller.log.debug",
        "desc": "Whether to enable debug logging including line numbers, high resolution timestamps, per-device logs.",
        "nixName": "exporters.unpoller.log.debug",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.log.prometheusErrors",
        "desc": "Whether to enable emitting errors to prometheus.",
        "nixName": "exporters.unpoller.log.prometheusErrors",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.log.quiet",
        "desc": "Whether to enable startup and error logs only.",
        "nixName": "exporters.unpoller.log.quiet",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.loki.interval",
        "desc": "How often the events are polled and pushed to Loki.",
        "nixName": "exporters.unpoller.loki.interval",
        "type": "string",
        "value": "2m"
      },
      {
        "name": "exporters.unpoller.loki.pass",
        "desc": "Path of a file containing the password for Loki. This file needs to be readable by the unifi-poller user.",
        "nixName": "exporters.unpoller.loki.pass",
        "type": "path",
        "value": "\"unpoller-influxdb-default.password\""
      },
      {
        "name": "exporters.unpoller.loki.tenant_id",
        "desc": "Tenant ID to use in Loki.",
        "nixName": "exporters.unpoller.loki.tenant_id",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unpoller.loki.timeout",
        "desc": "Should be increased in case of timeout errors.",
        "nixName": "exporters.unpoller.loki.timeout",
        "type": "string",
        "value": "10s"
      },
      {
        "name": "exporters.unpoller.loki.url",
        "desc": "URL of the Loki host.",
        "nixName": "exporters.unpoller.loki.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unpoller.loki.user",
        "desc": "Username for Loki.",
        "nixName": "exporters.unpoller.loki.user",
        "type": "string",
        "value": ""
      },
      {
        "name": "exporters.unpoller.loki.verify_ssl",
        "desc": "Verify Loki’s certificate.",
        "nixName": "exporters.unpoller.loki.verify_ssl",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.unpoller.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.unpoller.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.unpoller.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9130"
      },
      {
        "name": "exporters.unpoller.user",
        "desc": "User name under which the unpoller exporter shall be run.",
        "nixName": "exporters.unpoller.user",
        "type": "string",
        "value": "unpoller-exporter"
      },
      {
        "name": "exporters.v2ray.enable",
        "desc": "Whether to enable the prometheus v2ray exporter.",
        "nixName": "exporters.v2ray.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.v2ray.extraFlags",
        "desc": "Extra commandline options to pass to the v2ray exporter.",
        "nixName": "exporters.v2ray.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.v2ray.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.v2ray.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.v2ray.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.v2ray.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.v2ray.openFirewall is true.",
        "nixName": "exporters.v2ray.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.v2ray.group",
        "desc": "Group under which the v2ray exporter shall be run.",
        "nixName": "exporters.v2ray.group",
        "type": "string",
        "value": "v2ray-exporter"
      },
      {
        "name": "exporters.v2ray.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.v2ray.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.v2ray.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.v2ray.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.v2ray.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.v2ray.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9299"
      },
      {
        "name": "exporters.v2ray.user",
        "desc": "User name under which the v2ray exporter shall be run.",
        "nixName": "exporters.v2ray.user",
        "type": "string",
        "value": "v2ray-exporter"
      },
      {
        "name": "exporters.v2ray.v2rayEndpoint",
        "desc": "v2ray grpc api endpoint",
        "nixName": "exporters.v2ray.v2rayEndpoint",
        "type": "string",
        "value": "127.0.0.1:54321"
      },
      {
        "name": "exporters.varnish.enable",
        "desc": "Whether to enable the prometheus varnish exporter.",
        "nixName": "exporters.varnish.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.varnish.extraFlags",
        "desc": "Extra commandline options to pass to the varnish exporter.",
        "nixName": "exporters.varnish.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.varnish.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.varnish.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.varnish.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.varnish.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.varnish.openFirewall is true.",
        "nixName": "exporters.varnish.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.varnish.group",
        "desc": "Group under which the varnish exporter shall be run.",
        "nixName": "exporters.varnish.group",
        "type": "string",
        "value": "varnish-exporter"
      },
      {
        "name": "exporters.varnish.healthPath",
        "desc": "Path under which to expose healthcheck. Disabled unless configured.",
        "nixName": "exporters.varnish.healthPath",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.varnish.instance",
        "desc": "varnishstat -n value.",
        "nixName": "exporters.varnish.instance",
        "type": "null or string",
        "value": "config.services.varnish.stateDir"
      },
      {
        "name": "exporters.varnish.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.varnish.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.varnish.noExit",
        "desc": "Do not exit server on Varnish scrape errors.",
        "nixName": "exporters.varnish.noExit",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.varnish.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.varnish.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.varnish.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.varnish.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9131"
      },
      {
        "name": "exporters.varnish.raw",
        "desc": "Enable raw stdout logging without timestamps.",
        "nixName": "exporters.varnish.raw",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.varnish.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.varnish.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.varnish.user",
        "desc": "User name under which the varnish exporter shall be run.",
        "nixName": "exporters.varnish.user",
        "type": "string",
        "value": "varnish-exporter"
      },
      {
        "name": "exporters.varnish.varnishStatPath",
        "desc": "Path to varnishstat.",
        "nixName": "exporters.varnish.varnishStatPath",
        "type": "string",
        "value": "varnishstat"
      },
      {
        "name": "exporters.varnish.verbose",
        "desc": "Enable verbose logging.",
        "nixName": "exporters.varnish.verbose",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.varnish.withGoMetrics",
        "desc": "Export go runtime and http handler metrics.",
        "nixName": "exporters.varnish.withGoMetrics",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.wireguard.enable",
        "desc": "Whether to enable the prometheus wireguard exporter.",
        "nixName": "exporters.wireguard.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.wireguard.extraFlags",
        "desc": "Extra commandline options to pass to the wireguard exporter.",
        "nixName": "exporters.wireguard.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.wireguard.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.wireguard.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.wireguard.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.wireguard.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.wireguard.openFirewall is true.",
        "nixName": "exporters.wireguard.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.wireguard.group",
        "desc": "Group under which the wireguard exporter shall be run.",
        "nixName": "exporters.wireguard.group",
        "type": "string",
        "value": "wireguard-exporter"
      },
      {
        "name": "exporters.wireguard.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.wireguard.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.wireguard.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.wireguard.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.wireguard.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.wireguard.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9586"
      },
      {
        "name": "exporters.wireguard.singleSubnetPerField",
        "desc": "By default, all allowed IPs and subnets are comma-separated in the allowed_ips field. With this option enabled, a single IP and subnet will be listed in fields like allowed_ip_0, allowed_ip_1 and so on.",
        "nixName": "exporters.wireguard.singleSubnetPerField",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.wireguard.user",
        "desc": "User name under which the wireguard exporter shall be run.",
        "nixName": "exporters.wireguard.user",
        "type": "string",
        "value": "wireguard-exporter"
      },
      {
        "name": "exporters.wireguard.verbose",
        "desc": "Whether to enable verbose logging mode for prometheus-wireguard-exporter.",
        "nixName": "exporters.wireguard.verbose",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.wireguard.wireguardConfig",
        "desc": "Path to the Wireguard Config to add the peer’s name to the stats of a peer. Please note that networking.wg-quick is required for this feature as networking.wireguard uses wg(8) to set the peers up.",
        "nixName": "exporters.wireguard.wireguardConfig",
        "type": "null or path or string",
        "value": "null"
      },
      {
        "name": "exporters.wireguard.withRemoteIp",
        "desc": "Whether or not the remote IP of a WireGuard peer should be exposed via prometheus.",
        "nixName": "exporters.wireguard.withRemoteIp",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.zfs.enable",
        "desc": "Whether to enable the prometheus zfs exporter.",
        "nixName": "exporters.zfs.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.zfs.extraFlags",
        "desc": "Extra commandline options to pass to the zfs exporter.",
        "nixName": "exporters.zfs.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "exporters.zfs.firewallFilter",
        "desc": "Specify a filter for iptables to use when services.prometheus.exporters.zfs.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept.",
        "nixName": "exporters.zfs.firewallFilter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "exporters.zfs.firewallRules",
        "desc": "Specify rules for nftables to add to the input chain when services.prometheus.exporters.zfs.openFirewall is true.",
        "nixName": "exporters.zfs.firewallRules",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "exporters.zfs.group",
        "desc": "Group under which the zfs exporter shall be run.",
        "nixName": "exporters.zfs.group",
        "type": "string",
        "value": "zfs-exporter"
      },
      {
        "name": "exporters.zfs.listenAddress",
        "desc": "Address to listen on.",
        "nixName": "exporters.zfs.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "exporters.zfs.openFirewall",
        "desc": "Open port in firewall for incoming connections.",
        "nixName": "exporters.zfs.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "exporters.zfs.pools",
        "desc": "Name of the pool(s) to collect, repeat for multiple pools (default: all pools).",
        "nixName": "exporters.zfs.pools",
        "type": "null or (list of string)",
        "value": "[ ]"
      },
      {
        "name": "exporters.zfs.port",
        "desc": "Port to listen on.",
        "nixName": "exporters.zfs.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9134"
      },
      {
        "name": "exporters.zfs.telemetryPath",
        "desc": "Path under which to expose metrics.",
        "nixName": "exporters.zfs.telemetryPath",
        "type": "string",
        "value": "/metrics"
      },
      {
        "name": "exporters.zfs.user",
        "desc": "User name under which the zfs exporter shall be run.",
        "nixName": "exporters.zfs.user",
        "type": "string",
        "value": "zfs-exporter"
      },
      {
        "name": "extraFlags",
        "desc": "Extra commandline options when launching Prometheus.",
        "nixName": "extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "globalConfig",
        "desc": "Parameters that are valid in all configuration contexts. They also serve as defaults for other configuration sections",
        "nixName": "globalConfig",
        "type": "submodule",
        "value": "{ }"
      },
      {
        "name": "globalConfig.evaluation_interval",
        "desc": "How frequently to evaluate rules by default. Defaults to 1m in prometheus when set to null.",
        "nixName": "globalConfig.evaluation_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "globalConfig.external_labels",
        "desc": "The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).",
        "nixName": "globalConfig.external_labels",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "globalConfig.query_log_file",
        "desc": "Path to the file prometheus should write its query log to.",
        "nixName": "globalConfig.query_log_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "globalConfig.scrape_interval",
        "desc": "How frequently to scrape targets by default. Defaults to 1m in prometheus when set to null.",
        "nixName": "globalConfig.scrape_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "globalConfig.scrape_timeout",
        "desc": "How long until a scrape request times out. Defaults to 10s in prometheus when set to null.",
        "nixName": "globalConfig.scrape_timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "listenAddress",
        "desc": "Address to listen on for the web interface, API, and telemetry.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "package",
        "desc": "The prometheus package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.prometheus"
      },
      {
        "name": "port",
        "desc": "Port to listen on.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9090"
      },
      {
        "name": "pushgateway.enable",
        "desc": "Whether to enable Prometheus Pushgateway.",
        "nixName": "pushgateway.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "pushgateway.extraFlags",
        "desc": "Extra commandline options when launching the Pushgateway.",
        "nixName": "pushgateway.extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "pushgateway.log.format",
        "desc": "Set the log target and format. null will default to logger:stderr.",
        "nixName": "pushgateway.log.format",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "pushgateway.log.level",
        "desc": "Only log messages with the given severity or above. null will default to info.",
        "nixName": "pushgateway.log.level",
        "type": "null or one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
        "value": "null"
      },
      {
        "name": "pushgateway.package",
        "desc": "The prometheus-pushgateway package to use.",
        "nixName": "pushgateway.package",
        "type": "package",
        "value": "pkgs.prometheus-pushgateway"
      },
      {
        "name": "pushgateway.persistMetrics",
        "desc": "Whether to persist metrics to a file. When enabled metrics will be saved to a file called metrics in the directory /var/lib/pushgateway. The directory below /var/lib can be set using services.prometheus.pushgateway.stateDir.",
        "nixName": "pushgateway.persistMetrics",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "pushgateway.persistence.interval",
        "desc": "The minimum interval at which to write out the persistence file. null will default to 5m.",
        "nixName": "pushgateway.persistence.interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "pushgateway.stateDir",
        "desc": "Directory below /var/lib to store metrics. This directory will be created automatically using systemd’s StateDirectory mechanism when services.prometheus.pushgateway.persistMetrics is enabled.",
        "nixName": "pushgateway.stateDir",
        "type": "string",
        "value": "pushgateway"
      },
      {
        "name": "pushgateway.web.external-url",
        "desc": "The URL under which Pushgateway is externally reachable.",
        "nixName": "pushgateway.web.external-url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "pushgateway.web.listen-address",
        "desc": "Address to listen on for the web interface, API and telemetry. null will default to :9091.",
        "nixName": "pushgateway.web.listen-address",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "pushgateway.web.route-prefix",
        "desc": "Prefix for the internal routes of web endpoints. Defaults to the path of services.prometheus.pushgateway.web.external-url.",
        "nixName": "pushgateway.web.route-prefix",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "pushgateway.web.telemetry-path",
        "desc": "Path under which to expose metrics. null will default to /metrics.",
        "nixName": "pushgateway.web.telemetry-path",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead",
        "desc": "Parameters of the endpoints to query from. See the official documentation for more information.",
        "nixName": "remoteRead",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "remoteRead.*.basic_auth",
        "desc": "Sets the Authorization header on every remote read request with the configured username and password. password and password_file are mutually exclusive.",
        "nixName": "remoteRead.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteRead.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "remoteRead.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "remoteRead.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "remoteRead.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "remoteRead.*.bearer_token",
        "desc": "Sets the Authorization header on every remote read request with the configured bearer token. It is mutually exclusive with bearer_token_file.",
        "nixName": "remoteRead.*.bearer_token",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.bearer_token_file",
        "desc": "Sets the Authorization header on every remote read request with the bearer token read from the configured file. It is mutually exclusive with bearer_token.",
        "nixName": "remoteRead.*.bearer_token_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.headers",
        "desc": "Custom HTTP headers to be sent along with each remote read request. Be aware that headers that are set by Prometheus itself can’t be overwritten.",
        "nixName": "remoteRead.*.headers",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "remoteRead.*.name",
        "desc": "Name of the remote read config, which if specified must be unique among remote read configs. The name will be used in metrics and logging in place of a generated value to help users distinguish between remote read configs.",
        "nixName": "remoteRead.*.name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.proxy_url",
        "desc": "Optional Proxy URL.",
        "nixName": "remoteRead.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.read_recent",
        "desc": "Whether reads should be made for queries for time ranges that the local storage should have complete data for.",
        "nixName": "remoteRead.*.read_recent",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "remoteRead.*.remote_timeout",
        "desc": "Timeout for requests to the remote read endpoint.",
        "nixName": "remoteRead.*.remote_timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.required_matchers",
        "desc": "An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.",
        "nixName": "remoteRead.*.required_matchers",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config",
        "desc": "Configures the remote read request’s TLS settings.",
        "nixName": "remoteRead.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "remoteRead.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "remoteRead.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "remoteRead.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "remoteRead.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "remoteRead.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteRead.*.url",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "remoteRead.*.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "remoteWrite",
        "desc": "Parameters of the endpoints to send samples to. See the official documentation for more information.",
        "nixName": "remoteWrite",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "remoteWrite.*.basic_auth",
        "desc": "Sets the Authorization header on every remote write request with the configured username and password. password and password_file are mutually exclusive.",
        "nixName": "remoteWrite.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "remoteWrite.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "remoteWrite.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "remoteWrite.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "remoteWrite.*.bearer_token",
        "desc": "Sets the Authorization header on every remote write request with the configured bearer token. It is mutually exclusive with bearer_token_file.",
        "nixName": "remoteWrite.*.bearer_token",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.bearer_token_file",
        "desc": "Sets the Authorization header on every remote write request with the bearer token read from the configured file. It is mutually exclusive with bearer_token.",
        "nixName": "remoteWrite.*.bearer_token_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.headers",
        "desc": "Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can’t be overwritten.",
        "nixName": "remoteWrite.*.headers",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.metadata_config",
        "desc": "Configures the sending of series metadata to remote storage. Metadata configuration is subject to change at any point or be removed in future releases.",
        "nixName": "remoteWrite.*.metadata_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.metadata_config.send",
        "desc": "Whether metric metadata is sent to remote storage or not.",
        "nixName": "remoteWrite.*.metadata_config.send",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.metadata_config.send_interval",
        "desc": "How frequently metric metadata is sent to remote storage.",
        "nixName": "remoteWrite.*.metadata_config.send_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.name",
        "desc": "Name of the remote write config, which if specified must be unique among remote write configs. The name will be used in metrics and logging in place of a generated value to help users distinguish between remote write configs.",
        "nixName": "remoteWrite.*.name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.proxy_url",
        "desc": "Optional Proxy URL.",
        "nixName": "remoteWrite.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config",
        "desc": "Configures the queue used to write to remote storage.",
        "nixName": "remoteWrite.*.queue_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.batch_send_deadline",
        "desc": "Maximum time a sample will wait in buffer.",
        "nixName": "remoteWrite.*.queue_config.batch_send_deadline",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.capacity",
        "desc": "Number of samples to buffer per shard before we block reading of more samples from the WAL. It is recommended to have enough capacity in each shard to buffer several requests to keep throughput up while processing occasional slow remote requests.",
        "nixName": "remoteWrite.*.queue_config.capacity",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.max_backoff",
        "desc": "Maximum retry delay.",
        "nixName": "remoteWrite.*.queue_config.max_backoff",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.max_samples_per_send",
        "desc": "Maximum number of samples per send.",
        "nixName": "remoteWrite.*.queue_config.max_samples_per_send",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.max_shards",
        "desc": "Maximum number of shards, i.e. amount of concurrency.",
        "nixName": "remoteWrite.*.queue_config.max_shards",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.min_backoff",
        "desc": "Initial retry delay. Gets doubled for every retry.",
        "nixName": "remoteWrite.*.queue_config.min_backoff",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.queue_config.min_shards",
        "desc": "Minimum number of shards, i.e. amount of concurrency.",
        "nixName": "remoteWrite.*.queue_config.min_shards",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.remote_timeout",
        "desc": "Timeout for requests to the remote write endpoint.",
        "nixName": "remoteWrite.*.remote_timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config",
        "desc": "Configures the remote write request’s TLS settings.",
        "nixName": "remoteWrite.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "remoteWrite.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "remoteWrite.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "remoteWrite.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "remoteWrite.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "remoteWrite.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.url",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "remoteWrite.*.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "remoteWrite.*.write_relabel_configs",
        "desc": "List of remote write relabel configurations.",
        "nixName": "remoteWrite.*.write_relabel_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.action",
        "desc": "Action to perform based on regex matching. Defaults to replace in prometheus when set to null.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.action",
        "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.modulus",
        "desc": "Modulus to take of the hash of the source label values.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.modulus",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.regex",
        "desc": "Regular expression against which the extracted value is matched. Defaults to (.*) in prometheus when set to null.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.regex",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.replacement",
        "desc": "Replacement value against which a regex replace is performed if the regular expression matches. Defaults to $1 in prometheus when set to null.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.replacement",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.separator",
        "desc": "Separator placed between concatenated source label values. Defaults to ; in prometheus when set to null.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.source_labels",
        "desc": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.source_labels",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "remoteWrite.*.write_relabel_configs.*.target_label",
        "desc": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions.",
        "nixName": "remoteWrite.*.write_relabel_configs.*.target_label",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "retentionTime",
        "desc": "How long to retain samples in storage.",
        "nixName": "retentionTime",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "ruleFiles",
        "desc": "Any additional rules files to include in this configuration.",
        "nixName": "ruleFiles",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "rules",
        "desc": "Alerting and/or Recording rules to evaluate at runtime.",
        "nixName": "rules",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "sachet.address",
        "desc": "The address Sachet will listen to.",
        "nixName": "sachet.address",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "sachet.configuration",
        "desc": "Sachet’s configuration as a nix attribute set.",
        "nixName": "sachet.configuration",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "sachet.enable",
        "desc": "Whether to enable Sachet, an SMS alerting tool for the Prometheus Alertmanager.",
        "nixName": "sachet.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sachet.port",
        "desc": "The port Sachet will listen to.",
        "nixName": "sachet.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "9876"
      },
      {
        "name": "scrapeConfigs",
        "desc": "A list of scrape configurations.",
        "nixName": "scrapeConfigs",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "scrapeConfigs.*.authorization",
        "desc": "Sets the Authorization header on every scrape request with the configured credentials.",
        "nixName": "scrapeConfigs.*.authorization",
        "type": "null or (attribute set)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs",
        "desc": "List of Azure service discovery configurations.",
        "nixName": "scrapeConfigs.*.azure_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.authentication_method",
        "desc": "The authentication method, either OAuth or ManagedIdentity. See https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview Defaults to OAuth in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.authentication_method",
        "type": "null or one of \"OAuth\", \"ManagedIdentity\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.client_id",
        "desc": "Optional client ID. Only required with authentication_method OAuth.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.client_secret",
        "desc": "Optional client secret. Only required with authentication_method OAuth.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.environment",
        "desc": "The Azure environment. Defaults to AzurePublicCloud in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.environment",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.port",
        "desc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the instance list. Defaults to 300s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.subscription_id",
        "desc": "The subscription ID.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.subscription_id",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tenant_id",
        "desc": "Optional tenant ID. Only required with authentication_method OAuth.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tenant_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.basic_auth",
        "desc": "Sets the Authorization header on every scrape request with the configured username and password. password and password_file are mutually exclusive.",
        "nixName": "scrapeConfigs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.bearer_token",
        "desc": "Sets the Authorization header on every scrape request with the configured bearer token. It is mutually exclusive with bearer_token_file.",
        "nixName": "scrapeConfigs.*.bearer_token",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.bearer_token_file",
        "desc": "Sets the Authorization header on every scrape request with the bearer token read from the configured file. It is mutually exclusive with bearer_token.",
        "nixName": "scrapeConfigs.*.bearer_token_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.body_size_limit",
        "desc": "An uncompressed response body larger than this many bytes will cause the scrape to fail. 0 means no limit. Example: 100MB. This is an experimental feature, this behaviour could change or be removed in the future. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.body_size_limit",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs",
        "desc": "List of Consul service discovery configurations.",
        "nixName": "scrapeConfigs.*.consul_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.allow_stale",
        "desc": "Allow stale Consul results (see https://www.consul.io/api/index.html#consistency-modes). Will reduce load on Consul.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.allow_stale",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.datacenter",
        "desc": "Consul datacenter",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.datacenter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.node_meta",
        "desc": "Node metadata used to filter nodes for a given service.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.node_meta",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.password",
        "desc": "Consul password",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.refresh_interval",
        "desc": "The time after which the provided names are refreshed. On large setup it might be a good idea to increase this value because the catalog will change all the time. Defaults to 30s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.scheme",
        "desc": "Consul scheme Defaults to http in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.scheme",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.server",
        "desc": "Consul server to query. Defaults to localhost:8500 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.server",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.services",
        "desc": "A list of services for which targets are retrieved.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.services",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tag_separator",
        "desc": "The string by which Consul tags are joined into the tag label. Defaults to , in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tag_separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tags",
        "desc": "An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tags",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config",
        "desc": "Configures the Consul request’s TLS settings.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.token",
        "desc": "Consul token",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.token",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.consul_sd_configs.*.username",
        "desc": "Consul username",
        "nixName": "scrapeConfigs.*.consul_sd_configs.*.username",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs",
        "desc": "List of DigitalOcean service discovery configurations.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.port",
        "desc": "The port to scrape metrics from. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.refresh_interval",
        "desc": "The time after which the droplets are refreshed. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dns_sd_configs",
        "desc": "List of DNS service discovery configurations.",
        "nixName": "scrapeConfigs.*.dns_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dns_sd_configs.*.names",
        "desc": "A list of DNS SRV record names to be queried.",
        "nixName": "scrapeConfigs.*.dns_sd_configs.*.names",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dns_sd_configs.*.port",
        "desc": "The port number used if the query type is not SRV.",
        "nixName": "scrapeConfigs.*.dns_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dns_sd_configs.*.refresh_interval",
        "desc": "The time after which the provided names are refreshed. Defaults to 30s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dns_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dns_sd_configs.*.type",
        "desc": "The type of DNS query to perform. One of SRV, A, or AAAA. Defaults to SRV in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dns_sd_configs.*.type",
        "type": "null or one of \"SRV\", \"A\", \"AAAA\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs",
        "desc": "List of Docker service discovery configurations.",
        "nixName": "scrapeConfigs.*.docker_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.filters",
        "desc": "Optional filters to limit the discovery process to a subset of available resources.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.filters.*.name",
        "desc": "Name of the filter. The available filters are listed in the upstream documentation: Services: https://docs.docker.com/engine/api/v1.40/#operation/ServiceList Tasks: https://docs.docker.com/engine/api/v1.40/#operation/TaskList Nodes: https://docs.docker.com/engine/api/v1.40/#operation/NodeList",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.filters.*.values",
        "desc": "Value for the filter.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters.*.values",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.host",
        "desc": "Address of the Docker daemon.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.host",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.host_networking_host",
        "desc": "The host to use if the container is in host networking mode. Defaults to localhost in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.host_networking_host",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.port",
        "desc": "The port to scrape metrics from, when role is nodes, and for discovered tasks and services that don’t have published ports. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.refresh_interval",
        "desc": "The time after which the containers are refreshed. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs",
        "desc": "List of Docker Swarm service discovery configurations.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters",
        "desc": "Optional filters to limit the discovery process to a subset of available resources.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.name",
        "desc": "Name of the filter. The available filters are listed in the upstream documentation: Services: https://docs.docker.com/engine/api/v1.40/#operation/ServiceList Tasks: https://docs.docker.com/engine/api/v1.40/#operation/TaskList Nodes: https://docs.docker.com/engine/api/v1.40/#operation/NodeList",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.values",
        "desc": "Value for the filter.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.values",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.host",
        "desc": "Address of the Docker daemon.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.host",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.port",
        "desc": "The port to scrape metrics from, when role is nodes, and for discovered tasks and services that don’t have published ports. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.refresh_interval",
        "desc": "The time after which the containers are refreshed. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.role",
        "desc": "Role of the targets to retrieve. Must be services, tasks, or nodes.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.role",
        "type": "one of \"services\", \"tasks\", \"nodes\"",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs",
        "desc": "List of EC2 service discovery configurations.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.access_key",
        "desc": "The AWS API key id. If blank, the environment variable AWS_ACCESS_KEY_ID is used.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.access_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.endpoint",
        "desc": "Custom endpoint to be used.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.endpoint",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.filters",
        "desc": "Filters can be used optionally to filter the instance list by other criteria.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.name",
        "desc": "See this list for the available filters.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.name",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.values",
        "desc": "Value of the filter.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.values",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.port",
        "desc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.profile",
        "desc": "Named AWS profile used to connect to the API.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.profile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the instance list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.region",
        "desc": "The AWS Region. If blank, the region from the instance metadata is used.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.region",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.role_arn",
        "desc": "AWS Role ARN, an alternative to using AWS API keys.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.role_arn",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.ec2_sd_configs.*.secret_key",
        "desc": "The AWS API key secret. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.",
        "nixName": "scrapeConfigs.*.ec2_sd_configs.*.secret_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs",
        "desc": "List of Eureka service discovery configurations.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.server",
        "desc": "The URL to connect to the Eureka server.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.server",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.file_sd_configs",
        "desc": "List of file service discovery configurations.",
        "nixName": "scrapeConfigs.*.file_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.file_sd_configs.*.files",
        "desc": "Patterns for files from which target groups are extracted. Refer to the Prometheus documentation for permitted filename patterns and formats.",
        "nixName": "scrapeConfigs.*.file_sd_configs.*.files",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.file_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the files. Defaults to 5m in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.file_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs",
        "desc": "List of Google Compute Engine service discovery configurations. See the relevant Prometheus configuration docs for more detail.",
        "nixName": "scrapeConfigs.*.gce_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.filter",
        "desc": "Filter can be used optionally to filter the instance list by other criteria Syntax of this filter string is described here in the filter query parameter section: https://cloud.google.com/compute/docs/reference/latest/instances/list.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.filter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.port",
        "desc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.project",
        "desc": "The GCP Project.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.project",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the cloud instance list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.tag_separator",
        "desc": "The tag separator used to separate concatenated GCE instance network tags. See the GCP documentation on network tags for more information: https://cloud.google.com/vpc/docs/add-remove-network-tags Defaults to , in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.tag_separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.gce_sd_configs.*.zone",
        "desc": "The zone of the scrape targets. If you need multiple zones use multiple gce_sd_configs.",
        "nixName": "scrapeConfigs.*.gce_sd_configs.*.zone",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs",
        "desc": "List of Hetzner service discovery configurations.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.port",
        "desc": "The port to scrape metrics from. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.refresh_interval",
        "desc": "The time after which the servers are refreshed. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.role",
        "desc": "The Hetzner role of entities that should be discovered. One of robot or hcloud.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.role",
        "type": "one of \"robot\", \"hcloud\"",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.honor_labels",
        "desc": "Controls how Prometheus handles conflicts between labels that are already present in scraped data and labels that Prometheus would attach server-side (“job” and “instance” labels, manually configured target labels, and labels generated by service discovery implementations). If honor_labels is set to “true”, label conflicts are resolved by keeping label values from the scraped data and ignoring the conflicting server-side labels. If honor_labels is set to “false”, label conflicts are resolved by renaming conflicting labels in the scraped data to “exported_<original-label>” (for example “exported_instance”, “exported_job”) and then attaching server-side labels. This is useful for use cases such as federation, where all labels specified in the target should be preserved. Defaults to false in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.honor_labels",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.honor_timestamps",
        "desc": "honor_timestamps controls whether Prometheus respects the timestamps present in scraped data. If honor_timestamps is set to true, the timestamps of the metrics exposed by the target will be used. If honor_timestamps is set to false, the timestamps of the metrics exposed by the target will be ignored. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.honor_timestamps",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs",
        "desc": "List of HTTP service discovery configurations.",
        "nixName": "scrapeConfigs.*.http_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth",
        "desc": "Authentication information used to authenticate to the API server. password and password_file are mutually exclusive.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-query the endpoint. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config",
        "desc": "Configures the scrape request’s TLS settings.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.http_sd_configs.*.url",
        "desc": "URL from which the targets are fetched.",
        "nixName": "scrapeConfigs.*.http_sd_configs.*.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.job_name",
        "desc": "The job name assigned to scraped metrics by default.",
        "nixName": "scrapeConfigs.*.job_name",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs",
        "desc": "List of Kubernetes service discovery configurations.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.api_server",
        "desc": "The API server addresses. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod’s CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.api_server",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.kubeconfig_file",
        "desc": "Optional path to a kubeconfig file. Note that api_server and kube_config are mutually exclusive.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.kubeconfig_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces",
        "desc": "Optional namespace discovery. If omitted, all namespaces are used.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces.names",
        "desc": "Namespace name.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces.names",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.role",
        "desc": "The Kubernetes role of entities that should be discovered. One of endpoints, service, pod, node, or ingress.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.role",
        "type": "one of \"endpoints\", \"service\", \"pod\", \"node\", \"ingress\"",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors",
        "desc": "Optional label and field selectors to limit the discovery process to a subset of available resources. See https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/ and https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ to learn more about the possible filters that can be used. Endpoints role supports pod, service and endpoints selectors, other roles only support selectors matching the role itself (e.g. node role can only contain node selectors). Note: When making decision about using field/label selector make sure that this is the best approach - it will prevent Prometheus from reusing single list/watch for all scrape configs. This might result in a bigger load on the Kubernetes API, because per each selector combination there will be additional LIST/WATCH. On the other hand, if you just want to monitor small subset of pods in large cluster it’s recommended to use selectors. Decision, if selectors should be used or not depends on the particular situation.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.field",
        "desc": "Selector field",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.field",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.label",
        "desc": "Selector label",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.label",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.role",
        "desc": "Selector role",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.role",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs",
        "desc": "List of Kuma service discovery configurations.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.fetch_timeout",
        "desc": "The time after which the monitoring assignments are refreshed. Defaults to 2m in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.fetch_timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.refresh_interval",
        "desc": "The time to wait between polling update requests. Defaults to 30s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.server",
        "desc": "Address of the Kuma Control Plane’s MADS xDS server.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.server",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.label_limit",
        "desc": "Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.label_limit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.label_name_length_limit",
        "desc": "Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.label_name_length_limit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.label_value_length_limit",
        "desc": "Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.label_value_length_limit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs",
        "desc": "List of Lightsail service discovery configurations.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.access_key",
        "desc": "The AWS API keys. If blank, the environment variable AWS_ACCESS_KEY_ID is used.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.access_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.endpoint",
        "desc": "Custom endpoint to be used.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.endpoint",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.port",
        "desc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.profile",
        "desc": "Named AWS profile used to connect to the API.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.profile",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the instance list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.region",
        "desc": "The AWS region. If blank, the region from the instance metadata is used.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.region",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.role_arn",
        "desc": "AWS Role ARN, an alternative to using AWS API keys.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.role_arn",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.lightsail_sd_configs.*.secret_key",
        "desc": "The AWS API keys. If blank, the environment variable AWS_SECRET_ACCESS_KEY is used.",
        "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.secret_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs",
        "desc": "List of Linode service discovery configurations.",
        "nixName": "scrapeConfigs.*.linode_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.port",
        "desc": "The port to scrape metrics from. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.refresh_interval",
        "desc": "The time after which the linode instances are refreshed. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tag_separator",
        "desc": "The string by which Linode Instance tags are joined into the tag label. Defaults to , in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tag_separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs",
        "desc": "List of Marathon service discovery configurations.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.auth_token",
        "desc": "Optional authentication information for token-based authentication: https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token It is mutually exclusive with auth_token_file and other authentication mechanisms.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.auth_token",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.auth_token_file",
        "desc": "Optional authentication information for token-based authentication: https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token It is mutually exclusive with auth_token and other authentication mechanisms.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.auth_token_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.refresh_interval",
        "desc": "Polling interval. Defaults to 30s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.servers",
        "desc": "List of URLs to be used to contact Marathon servers. You need to provide at least one server URL.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.servers",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs",
        "desc": "List of metric relabel configurations.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.action",
        "desc": "Action to perform based on regex matching. Defaults to replace in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.action",
        "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.modulus",
        "desc": "Modulus to take of the hash of the source label values.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.modulus",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.regex",
        "desc": "Regular expression against which the extracted value is matched. Defaults to (.*) in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.regex",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.replacement",
        "desc": "Replacement value against which a regex replace is performed if the regular expression matches. Defaults to $1 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.replacement",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.separator",
        "desc": "Separator placed between concatenated source label values. Defaults to ; in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.source_labels",
        "desc": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.source_labels",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metric_relabel_configs.*.target_label",
        "desc": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions.",
        "nixName": "scrapeConfigs.*.metric_relabel_configs.*.target_label",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.metrics_path",
        "desc": "The HTTP resource path on which to fetch metrics from targets. Defaults to /metrics in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.metrics_path",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.nerve_sd_configs",
        "desc": "List of AirBnB’s Nerve service discovery configurations.",
        "nixName": "scrapeConfigs.*.nerve_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.nerve_sd_configs.*.paths",
        "desc": "Paths can point to a single service, or the root of a tree of services.",
        "nixName": "scrapeConfigs.*.nerve_sd_configs.*.paths",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.nerve_sd_configs.*.servers",
        "desc": "The Zookeeper servers.",
        "nixName": "scrapeConfigs.*.nerve_sd_configs.*.servers",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.nerve_sd_configs.*.timeout",
        "desc": "Timeout value. Defaults to 10s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.nerve_sd_configs.*.timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs",
        "desc": "List of OpenStack service discovery configurations.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.all_tenants",
        "desc": "Whether the service discovery should list all instances for all projects. It is only relevant for the ‘instance’ role and usually requires admin permissions. Defaults to false in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.all_tenants",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_id",
        "desc": "The application_credential_id or application_credential_name fields are required if using an application credential to authenticate. Some providers allow you to create an application credential to authenticate rather than a password.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_name",
        "desc": "The application_credential_id or application_credential_name fields are required if using an application credential to authenticate. Some providers allow you to create an application credential to authenticate rather than a password.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_secret",
        "desc": "The application_credential_secret field is required if using an application credential to authenticate.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.availability",
        "desc": "The availability of the endpoint to connect to. Must be one of public, admin or internal. Defaults to public in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.availability",
        "type": "null or one of \"public\", \"admin\", \"internal\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.domain_id",
        "desc": "At most one of domain_id and domain_name must be provided if using username with Identity V3. Otherwise, either are optional.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.domain_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.domain_name",
        "desc": "At most one of domain_id and domain_name must be provided if using username with Identity V3. Otherwise, either are optional.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.domain_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.identity_endpoint",
        "desc": "identity_endpoint specifies the HTTP endpoint that is required to work with the Identity API of the appropriate version. While it’s ultimately needed by all of the identity services, it will often be populated by a provider-level function.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.identity_endpoint",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.password",
        "desc": "password for the Identity V2 and V3 APIs. Consult with your provider’s control panel to discover your account’s preferred method of authentication.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.port",
        "desc": "The port to scrape metrics from. If using the public IP address, this must instead be specified in the relabeling rule. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.project_id",
        "desc": "The project_id and project_name fields are optional for the Identity V2 API. Some providers allow you to specify a project_name instead of the project_id. Some require both. Your provider’s authentication policies will determine how these fields influence authentication.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.project_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.project_name",
        "desc": "The project_id and project_name fields are optional for the Identity V2 API. Some providers allow you to specify a project_name instead of the project_id. Some require both. Your provider’s authentication policies will determine how these fields influence authentication.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.project_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the instance list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.region",
        "desc": "The OpenStack Region.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.region",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.role",
        "desc": "The OpenStack role of entities that should be discovered.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.role",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.userid",
        "desc": "username is required if using Identity V2 API. Consult with your provider’s control panel to discover your account’s username. In Identity V3, either userid or a combination of username and domain_id or domain_name are needed.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.userid",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.openstack_sd_configs.*.username",
        "desc": "username is required if using Identity V2 API. Consult with your provider’s control panel to discover your account’s username. In Identity V3, either userid or a combination of username and domain_id or domain_name are needed.",
        "nixName": "scrapeConfigs.*.openstack_sd_configs.*.username",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.params",
        "desc": "Optional HTTP URL parameters.",
        "nixName": "scrapeConfigs.*.params",
        "type": "null or (attribute set of list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs",
        "desc": "List of PuppetDB service discovery configurations.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.include_parameters",
        "desc": "Whether to include the parameters as meta labels. Due to the differences between parameter types and Prometheus labels, some parameters might not be rendered. The format of the parameters might also change in future releases. Note: Enabling this exposes parameters in the Prometheus UI and API. Make sure that you don’t have secrets exposed as parameters if you enable this. Defaults to false in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.include_parameters",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.port",
        "desc": "The port to scrape metrics from. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.query",
        "desc": "Puppet Query Language (PQL) query. Only resources are supported. https://puppet.com/docs/puppetdb/latest/api/query/v4/pql.html",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.query",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the resources list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.puppetdb_sd_configs.*.url",
        "desc": "The URL of the PuppetDB root query endpoint.",
        "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.url",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.relabel_configs",
        "desc": "List of relabel configurations.",
        "nixName": "scrapeConfigs.*.relabel_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.action",
        "desc": "Action to perform based on regex matching. Defaults to replace in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.action",
        "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.modulus",
        "desc": "Modulus to take of the hash of the source label values.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.modulus",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.regex",
        "desc": "Regular expression against which the extracted value is matched. Defaults to (.*) in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.regex",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.replacement",
        "desc": "Replacement value against which a regex replace is performed if the regular expression matches. Defaults to $1 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.replacement",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.separator",
        "desc": "Separator placed between concatenated source label values. Defaults to ; in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.source_labels",
        "desc": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.source_labels",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.relabel_configs.*.target_label",
        "desc": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions.",
        "nixName": "scrapeConfigs.*.relabel_configs.*.target_label",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.sample_limit",
        "desc": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabelling the entire scrape will be treated as failed. 0 means no limit. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.sample_limit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs",
        "desc": "List of Scaleway service discovery configurations.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.access_key",
        "desc": "Access key to use. https://console.scaleway.com/project/credentials",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.access_key",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.api_url",
        "desc": "API URL to use when doing the server listing requests. Defaults to https://api.scaleway.com in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.api_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.name_filter",
        "desc": "Specify a name filter (works as a LIKE) to apply on the server listing request.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.name_filter",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.port",
        "desc": "The port to scrape metrics from. Defaults to 80 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.project_id",
        "desc": "Project ID of the targets.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.project_id",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the managed targets list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.role",
        "desc": "Role of the targets to retrieve. Must be instance or baremetal.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.role",
        "type": "one of \"instance\", \"baremetal\"",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key",
        "desc": "Secret key to use when listing targets. https://console.scaleway.com/project/credentials It is mutually exclusive with secret_key_file.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key_file",
        "desc": "Sets the secret key with the credentials read from the configured file. It is mutually exclusive with secret_key.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tags_filter",
        "desc": "Specify a tag filter (a server needs to have all defined tags to be listed) to apply on the server listing request.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tags_filter",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scaleway_sd_configs.*.zone",
        "desc": "Zone is the availability zone of your targets (e.g. fr-par-1). Defaults to fr-par-1 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.zone",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scheme",
        "desc": "The URL scheme with which to fetch metrics from targets. Defaults to http in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.scheme",
        "type": "null or one of \"http\", \"https\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scrape_interval",
        "desc": "How frequently to scrape targets from this job. Defaults to the globally configured default.",
        "nixName": "scrapeConfigs.*.scrape_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.scrape_timeout",
        "desc": "Per-target timeout when scraping this job. Defaults to the globally configured default.",
        "nixName": "scrapeConfigs.*.scrape_timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.serverset_sd_configs",
        "desc": "List of Zookeeper Serverset service discovery configurations.",
        "nixName": "scrapeConfigs.*.serverset_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.serverset_sd_configs.*.paths",
        "desc": "Paths can point to a single service, or the root of a tree of services.",
        "nixName": "scrapeConfigs.*.serverset_sd_configs.*.paths",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.serverset_sd_configs.*.servers",
        "desc": "The Zookeeper servers.",
        "nixName": "scrapeConfigs.*.serverset_sd_configs.*.servers",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.serverset_sd_configs.*.timeout",
        "desc": "Timeout value. Defaults to 10s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.serverset_sd_configs.*.timeout",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.static_configs",
        "desc": "List of labeled target groups for this job.",
        "nixName": "scrapeConfigs.*.static_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.static_configs.*.labels",
        "desc": "Labels assigned to all metrics scraped from the targets.",
        "nixName": "scrapeConfigs.*.static_configs.*.labels",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "scrapeConfigs.*.static_configs.*.targets",
        "desc": "The targets specified by the target group.",
        "nixName": "scrapeConfigs.*.static_configs.*.targets",
        "type": "list of string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.target_limit",
        "desc": "Per-scrape config limit on number of unique targets that will be accepted. If more than this number of targets are present after target relabeling, Prometheus will mark the targets as failed without scraping them. 0 means no limit. This is an experimental feature, this behaviour could change in the future. Defaults to 0 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.target_limit",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config",
        "desc": "Configures the scrape request’s TLS settings.",
        "nixName": "scrapeConfigs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs",
        "desc": "List of Triton Serverset service discovery configurations.",
        "nixName": "scrapeConfigs.*.triton_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.account",
        "desc": "The account to use for discovering new targets.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.account",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.dns_suffix",
        "desc": "The DNS suffix which should be applied to target.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.dns_suffix",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.endpoint",
        "desc": "The Triton discovery endpoint (e.g. cmon.us-east-3b.triton.zone). This is often the same value as dns_suffix.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.endpoint",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.groups",
        "desc": "A list of groups for which targets are retrieved, only supported when targeting the container role. If omitted all containers owned by the requesting account are scraped.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.groups",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.port",
        "desc": "The port to use for discovery and metric scraping. Defaults to 9163 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.refresh_interval",
        "desc": "The interval which should be used for refreshing targets. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.role",
        "desc": "The type of targets to discover, can be set to:  “container” to discover virtual machines (SmartOS zones, lx/KVM/bhyve branded zones) running on Triton “cn” to discover compute nodes (servers/global zones) making up the Triton infrastructure  Defaults to container in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.role",
        "type": "null or one of \"container\", \"cn\"",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.triton_sd_configs.*.version",
        "desc": "The Triton discovery API version. Defaults to 1 in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.triton_sd_configs.*.version",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs",
        "desc": "List of Uyuni Serverset service discovery configurations.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs",
        "type": "null or (list of (submodule))",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization",
        "desc": "Optional Authorization header configuration.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials",
        "desc": "Sets the credentials. It is mutually exclusive with credentials_file.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials_file",
        "desc": "Sets the credentials to the credentials read from the configured file. It is mutually exclusive with credentials.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.type",
        "desc": "Sets the authentication type. Defaults to Bearer in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.type",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth",
        "desc": "Optional HTTP basic authentication information.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password",
        "desc": "HTTP password",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password_file",
        "desc": "HTTP password file",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.username",
        "desc": "HTTP username",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.entitlement",
        "desc": "The entitlement string to filter eligible systems. Defaults to monitoring_entitled in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.entitlement",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.follow_redirects",
        "desc": "Configure whether HTTP requests follow HTTP 3xx redirects. Defaults to true in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.follow_redirects",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2",
        "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time as basic_auth or authorization.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_id",
        "desc": "OAuth client ID.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_id",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret",
        "desc": "OAuth client secret.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret_file",
        "desc": "Read the client secret from a file. It is mutually exclusive with client_secret.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.endpoint_params",
        "desc": "Optional parameters to append to the token URL.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.endpoint_params",
        "type": "null or (attribute set of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.scopes",
        "desc": "Scopes for the token request.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.scopes",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.token_url",
        "desc": "The URL to fetch the token from.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.token_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.password",
        "desc": "Credentials are used to authenticate the requests to Uyuni API.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.password",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.proxy_url",
        "desc": "Optional proxy URL.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.proxy_url",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.refresh_interval",
        "desc": "Refresh interval to re-read the managed targets list. Defaults to 60s in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.refresh_interval",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.separator",
        "desc": "The string by which Uyuni group names are joined into the groups label Defaults to , in prometheus when set to null.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.separator",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.server",
        "desc": "The URL to connect to the Uyuni server.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.server",
        "type": "string",
        "value": ""
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config",
        "desc": "TLS configuration.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.ca_file",
        "desc": "CA certificate to validate API server certificate with.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.ca_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.cert_file",
        "desc": "Certificate file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.cert_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.insecure_skip_verify",
        "desc": "Disable validation of the server certificate.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.insecure_skip_verify",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.key_file",
        "desc": "Key file for client cert authentication to the server.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.key_file",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.server_name",
        "desc": "ServerName extension to indicate the name of the server. http://tools.ietf.org/html/rfc4366#section-3.1",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.server_name",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "scrapeConfigs.*.uyuni_sd_configs.*.username",
        "desc": "Credentials are used to authenticate the requests to Uyuni API.",
        "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.username",
        "type": "string",
        "value": ""
      },
      {
        "name": "stateDir",
        "desc": "Directory below /var/lib to store Prometheus metrics data. This directory will be created automatically using systemd’s StateDirectory mechanism.",
        "nixName": "stateDir",
        "type": "string",
        "value": "prometheus2"
      },
      {
        "name": "webConfigFile",
        "desc": "Specifies which file should be used as web.config.file and be passed on startup. See https://prometheus.io/docs/prometheus/latest/configuration/https/ for valid options.",
        "nixName": "webConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "webExternalUrl",
        "desc": "The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse proxy).",
        "nixName": "webExternalUrl",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "xmpp-alerts.enable",
        "desc": "Whether to enable XMPP Web hook service for Alertmanager.",
        "nixName": "xmpp-alerts.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "xmpp-alerts.settings",
        "desc": "Configuration for prometheus xmpp-alerts, see https://github.com/jelmer/prometheus-xmpp-alerts/blob/master/xmpp-alerts.yml.example for supported values.",
        "nixName": "xmpp-alerts.settings",
        "type": "YAML value",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "python3.11-pyloadapi",
    "desc": "Deploy python3.11-pyloadapi to enable interaction with the PyLoad download manager through a Python-based API. This setup allows users to automate and manage their downloads easily and effectively.",
    "longDesc": "The python3.11-pyloadapi is a Python client library designed to interact with the PyLoad download manager's API. It provides developers with tools to programmatically control download tasks, manage files, and integrate with various applications.\n\n**Key Features:**\n- **One-Click Deployment:** Set up the library using Docker or Python package managers for quick installation and easy access to PyLoad functionalities.\n- **Scalability:** Supports automation for individual users or larger setups, making it suitable for both personal and commercial use.\n- **Privacy and Security:** Operates locally, allowing users to keep their data secure while managing downloads through the API.\n- **API Compatibility:** Full compatibility with the PyLoad API, enabling comprehensive management of download tasks and file handling.\n- **Ease of Use:** Simplifies interaction with the PyLoad API, allowing developers to implement custom solutions without extensive API knowledge.",
    "useCases": "- **Home Users:** Automate the management of downloads, making it easier to schedule and control file retrieval.\n- **Developers:** Integrate the PyLoad API into applications to provide users with enhanced download management features.\n- **Businesses:** Use python3.11-pyloadapi to streamline download processes for large files or media content in an organizational setting.",
    "support": "- **Community Forums:** Engage with the PyLoad community for support and discussions through the [PyLoad GitHub Repository](https://github.com/tr4nt0r/PyLoadAPI).\n- **Documentation:** Comprehensive guides and user manuals are available at the [PyLoad API Documentation](https://docs.python.org/3/whatsnew/3.11.html) for detailed reference on setup and usage.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of python3.11-pyloadapi’s functionalities and practical applications, emphasizing its role in automating and managing download tasks. For more detailed information, visit the [official PyLoadAPI GitHub page](https://github.com/tr4nt0r/PyLoadAPI).",
    "nixName": "pyload",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://github.com/tr4nt0r/pyloadapi",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "credentialsFile",
        "desc": "File containing PYLOAD_DEFAULT_USERNAME and PYLOAD_DEFAULT_PASSWORD in the format of an EnvironmentFile=, as described by systemd.exec(5). If not given, they default to the username/password combo of pyload/pyload.",
        "nixName": "credentialsFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "downloadDirectory",
        "desc": "Directory to store downloads.",
        "nixName": "downloadDirectory",
        "type": "path",
        "value": "\"/var/lib/pyload/downloads\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable pyLoad download manager.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group under which pyLoad runs, and which owns the download directory.",
        "nixName": "group",
        "type": "string",
        "value": "pyload"
      },
      {
        "name": "listenAddress",
        "desc": "Address to listen on for the web UI.",
        "nixName": "listenAddress",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "package",
        "desc": "The pyLoad package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.pyload-ng"
      },
      {
        "name": "port",
        "desc": "Port to listen on for the web UI.",
        "nixName": "port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8000"
      },
      {
        "name": "user",
        "desc": "User under which pyLoad runs, and which owns the download directory.",
        "nixName": "user",
        "type": "string",
        "value": "pyload"
      }
    ]
  },
  {
    "name": "Radarr",
    "desc": "Deploy Radarr to automate the management and downloading of movies. Radarr provides users with a streamlined way to track and acquire their desired films, ensuring their media library stays updated efficiently.",
    "longDesc": "Radarr is an open-source application designed to manage and automate the downloading of movies from various sources, similar to how Sonarr manages TV shows. It integrates with multiple download clients and uses APIs to facilitate easy access to film content.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Radarr using Docker or other container technologies for efficient installation.\n- **Scalability:** Capable of handling a large number of movies and users, making it suitable for both personal and community use.\n- **Privacy and Security:** Operates locally, allowing users to maintain control over their media without relying on third-party services.\n- **API Compatibility:** Offers extensive integration options with various download clients and media servers, enhancing automation and functionality.\n- **Custom Notifications:** Provides alerts and notifications for newly available movies, ensuring users never miss a release.",
    "useCases": "- **Home Users:** Automatically manage and download movies, keeping their media library organized and up-to-date.\n- **Media Centers:** Use Radarr as part of a home media server setup to streamline movie acquisition and viewing experiences.\n- **Educators:** Teach students about media management and automation technologies through practical applications.",
    "support": "- **Community Forums:** Engage with the Radarr community for support and discussions through the [Radarr GitHub Repository](https://github.com/Radarr/Radarr) and the [Radarr Forum](https://forums.radarr.video/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Radarr Wiki](https://wiki.servarr.com/radarr) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Radarr’s functionalities and practical applications, emphasizing its importance in automating movie management. For more detailed information, visit the [official Radarr website](https://wiki.servarr.com/radarr).",
    "nixName": "radarr",
    "specs": {
      "ram": 2048,
      "storage": 0
    },
    "tags": [
      "Automation"
    ],
    "website": "https://radarr.video/",
    "implemented": false,
    "logo": "https://radarr.video/img/favicon.ico",
    "options": [
      {
        "name": "dataDir",
        "desc": "The directory where Radarr stores its data files.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/radarr/.config/Radarr"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Radarr, a UsetNet/BitTorrent movie downloader.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group under which Radarr runs.",
        "nixName": "group",
        "type": "string",
        "value": "radarr"
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for the Radarr web interface.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The radarr package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.radarr"
      },
      {
        "name": "user",
        "desc": "User account under which Radarr runs.",
        "nixName": "user",
        "type": "string",
        "value": "radarr"
      }
    ]
  },
  {
    "name": "radicale",
    "desc": "Deploy Radicale to create a secure and flexible calendar and contact management server. Radicale allows users to host their own personal or collaborative calendar and contacts service using the CalDAV and CardDAV protocols.",
    "longDesc": "Radicale is an open-source server that provides a simple and efficient implementation of CalDAV and CardDAV for managing calendars and contacts. It allows users to synchronize their calendars and contacts with various clients in a decentralized manner, ensuring data privacy and control.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Radicale using Docker or similar container technologies for quick and efficient installation.\n- **Scalability:** Supports multiple users and large datasets, making it suitable for both personal and enterprise environments.\n- **Privacy and Security:** Stores data locally, allowing users to maintain control over their information without relying on third-party services.\n- **API Compatibility:** Offers RESTful API endpoints, allowing integration with other applications and services.\n- **User-Friendly Interface:** Provides a straightforward configuration and management interface, simplifying the setup process.",
    "useCases": "- **Individuals:** Use Radicale to manage personal calendars and contacts securely without external dependencies.\n- **Teams:** Facilitate collaboration by sharing calendars and contacts among team members in a controlled environment.\n- **Developers:** Integrate Radicale with other applications, leveraging its API to enhance functionality in custom projects.",
    "support": "- **Community Forums:** Engage with the Radicale community for support and discussions through the [Radicale GitHub Repository](https://github.com/Kozea/Radicale).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Radicale Documentation](https://radicale.org/v3.html) for detailed reference.\n- **Troubleshooting Help:** Access the Issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides an overview of Radicale’s functionalities and practical applications, emphasizing its role in managing calendars and contacts securely. For more detailed information, visit the [official Radicale website](https://radicale.org/v3.html).",
    "nixName": "radicale",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://radicale.org/v3.html",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "config",
        "desc": "Radicale configuration, this will set the service configuration file. This option is mutually exclusive with settings. This option is deprecated. Use settings instead.",
        "nixName": "config",
        "type": "string",
        "value": ""
      },
      {
        "name": "enable",
        "desc": "Whether to enable Radicale CalDAV and CardDAV server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraArgs",
        "desc": "Extra arguments passed to the Radicale daemon.",
        "nixName": "extraArgs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "package",
        "desc": "Radicale package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.radicale"
      },
      {
        "name": "rights",
        "desc": "Configuration for Radicale’s rights file. See https://radicale.org/3.0.html#documentation/authentication-and-rights. This option only works in conjunction with settings. Setting this will also set settings.rights.type and settings.rights.file to appropriate values.",
        "nixName": "rights",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)",
        "value": "{ }"
      },
      {
        "name": "settings",
        "desc": "Configuration for Radicale. See https://radicale.org/3.0.html#documentation/configuration. This option is mutually exclusive with config.",
        "nixName": "settings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "radicle-httpd",
    "desc": "Deploy Radicle HTTPD to facilitate decentralized code collaboration through a peer-to-peer network. This service allows users to host their projects, issues, and patches in a decentralized manner, ensuring control and security over their codebase.",
    "longDesc": "Radicle HTTPD is a component of the Radicle ecosystem, providing a HTTP API for interacting with a decentralized collaboration network built on Git. It allows users to create and manage their projects, facilitating seamless peer-to-peer collaboration without centralized control.\n\n**Key Features:**\n- **One-Click Deployment:** Simplifies installation using Docker or similar container technologies for quick setup.\n- **Scalability:** Supports numerous users and projects simultaneously, making it ideal for both individual developers and large teams.\n- **Privacy and Security:** Ensures user data remains private and secure through cryptographic identities and decentralized hosting.\n- **API Compatibility:** Offers a robust HTTP API, allowing integration with other tools and services, enhancing overall functionality.\n- **Decentralized Governance:** Enables users to own and manage their projects without reliance on third-party services, promoting autonomy.",
    "useCases": "- **Developers:** Use Radicle HTTPD to host and manage their open-source projects in a decentralized environment, fostering collaboration without central authority.\n- **Enterprises:** Implement the service for internal projects, allowing secure and efficient code management among teams.\n- **Educators:** Teach students about decentralized version control and collaborative coding practices using real-world applications.",
    "support": "- **Community Forums:** Engage with the Radicle community for support and discussions through the [Radicle Community](https://docs.radicle.xyz/) and [Radicle GitHub Repository](https://github.com/radicle-dev/radicle-httpd).\n- **Documentation:** Comprehensive user guides and installation instructions are available at the [Radicle Documentation](https://docs.radicle.xyz/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides an overview of Radicle HTTPD’s functionalities and practical applications, emphasizing its role in decentralized code collaboration. For more detailed information, visit the [Radicle documentation](https://docs.radicle.xyz/).",
    "nixName": "radicle",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://radicle.xyz",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "checkConfig",
        "desc": "Whether to enable checking the config.json file resulting from services.radicle.settings.",
        "nixName": "checkConfig",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Radicle Seed Node.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "httpd.enable",
        "desc": "Whether to enable Radicle HTTP gateway to radicle-node.",
        "nixName": "httpd.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.extraArgs",
        "desc": "Extra arguments for radicle-httpd",
        "nixName": "httpd.extraArgs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "httpd.listenAddress",
        "desc": "The IP address on which radicle-httpd listens.",
        "nixName": "httpd.listenAddress",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "httpd.listenPort",
        "desc": "The port on which radicle-httpd listens.",
        "nixName": "httpd.listenPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8080"
      },
      {
        "name": "httpd.nginx",
        "desc": "With this option, you can customize an nginx virtual host which already has sensible defaults for radicle-httpd. Set to {} if you do not need any customization to the virtual host. If enabled, then by default, the serverName is radicle-${config.networking.hostName}.${config.networking.domain}, TLS is active, and certificates are acquired via ACME. If this is set to null (the default), no nginx virtual host will be configured.",
        "nixName": "httpd.nginx",
        "type": "null or (submodule)",
        "value": "null"
      },
      {
        "name": "httpd.nginx.acmeFallbackHost",
        "desc": "Host which to proxy requests to if ACME challenge is not found. Useful if you want multiple hosts to be able to verify the same domain name. With this option, you could request certificates for the present domain with an ACME client that is running on another host, which you would specify here.",
        "nixName": "httpd.nginx.acmeFallbackHost",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.nginx.acmeRoot",
        "desc": "Directory for the ACME challenge, which is public. Don’t put certs or keys in here. Set to null to inherit from config.security.acme.",
        "nixName": "httpd.nginx.acmeRoot",
        "type": "null or string",
        "value": "\"/var/lib/acme/acme-challenge\""
      },
      {
        "name": "httpd.nginx.addSSL",
        "desc": "Whether to enable HTTPS in addition to plain HTTP. This will set defaults for listen to listen on all interfaces on the respective default ports (80, 443).",
        "nixName": "httpd.nginx.addSSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.basicAuth",
        "desc": "Basic Auth protection for a vhost. WARNING: This is implemented to store the password in plain text in the Nix store.",
        "nixName": "httpd.nginx.basicAuth",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "httpd.nginx.basicAuthFile",
        "desc": "Basic Auth password file for a vhost. Can be created via: htpasswd -c <filename> <username>. WARNING: The generate file contains the users’ passwords in a non-cryptographically-securely hashed way.",
        "nixName": "httpd.nginx.basicAuthFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.default",
        "desc": "Makes this vhost the default.",
        "nixName": "httpd.nginx.default",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.enableACME",
        "desc": "Whether to ask Let’s Encrypt to sign a certificate for this vhost. Alternately, you can use an existing certificate through useACMEHost.",
        "nixName": "httpd.nginx.enableACME",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.extraConfig",
        "desc": "These lines go to the end of the vhost verbatim.",
        "nixName": "httpd.nginx.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "httpd.nginx.forceSSL",
        "desc": "Whether to add a separate nginx server block that redirects (defaults to 301, configurable with redirectCode) all plain HTTP traffic to HTTPS. This will set defaults for listen to listen on all interfaces on the respective default ports (80, 443), where the non-SSL listens are used for the redirect vhosts.",
        "nixName": "httpd.nginx.forceSSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.globalRedirect",
        "desc": "If set, all requests for this host are redirected (defaults to 301, configurable with redirectCode) to the given hostname.",
        "nixName": "httpd.nginx.globalRedirect",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.nginx.http2",
        "desc": "Whether to enable the HTTP/2 protocol. Note that (as of writing) due to nginx’s implementation, to disable HTTP/2 you have to disable it on all vhosts that use a given IP address / port. If there is one server block configured to enable http2, then it is enabled for all server blocks on this IP. See https://stackoverflow.com/a/39466948/263061.",
        "nixName": "httpd.nginx.http2",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "httpd.nginx.http3",
        "desc": "Whether to enable the HTTP/3 protocol. This requires using pkgs.nginxQuic package which can be achieved by setting services.nginx.package = pkgs.nginxQuic; and activate the QUIC transport protocol services.nginx.virtualHosts.<name>.quic = true;. Note that HTTP/3 support is experimental and not yet recommended for production. Read more at https://quic.nginx.org/ HTTP/3 availability must be manually advertised, preferably in each location block.",
        "nixName": "httpd.nginx.http3",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "httpd.nginx.http3_hq",
        "desc": "Whether to enable the HTTP/0.9 protocol negotiation used in QUIC interoperability tests. This requires using pkgs.nginxQuic package which can be achieved by setting services.nginx.package = pkgs.nginxQuic; and activate the QUIC transport protocol services.nginx.virtualHosts.<name>.quic = true;. Note that special application protocol support is experimental and not yet recommended for production. Read more at https://quic.nginx.org/",
        "nixName": "httpd.nginx.http3_hq",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.kTLS",
        "desc": "Whether to enable kTLS support. Implementing TLS in the kernel (kTLS) improves performance by significantly reducing the need for copying operations between user space and the kernel. Required Nginx version 1.21.4 or later.",
        "nixName": "httpd.nginx.kTLS",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.listen",
        "desc": "Listen addresses and ports for this virtual host. IPv6 addresses must be enclosed in square brackets. Note: this option overrides addSSL and onlySSL. If you only want to set the addresses manually and not the ports, take a look at listenAddresses.",
        "nixName": "httpd.nginx.listen",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "httpd.nginx.listen.*.addr",
        "desc": "Listen address.",
        "nixName": "httpd.nginx.listen.*.addr",
        "type": "string",
        "value": ""
      },
      {
        "name": "httpd.nginx.listen.*.extraParameters",
        "desc": "Extra parameters of this listen directive.",
        "nixName": "httpd.nginx.listen.*.extraParameters",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "httpd.nginx.listen.*.port",
        "desc": "Port number to listen on. If unset and the listen address is not a socket then nginx defaults to 80.",
        "nixName": "httpd.nginx.listen.*.port",
        "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "null"
      },
      {
        "name": "httpd.nginx.listen.*.proxyProtocol",
        "desc": "Enable PROXY protocol.",
        "nixName": "httpd.nginx.listen.*.proxyProtocol",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.listen.*.ssl",
        "desc": "Enable SSL.",
        "nixName": "httpd.nginx.listen.*.ssl",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.listenAddresses",
        "desc": "Listen addresses for this virtual host. Compared to listen this only sets the addresses and the ports are chosen automatically. Note: This option overrides enableIPv6",
        "nixName": "httpd.nginx.listenAddresses",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "httpd.nginx.locations",
        "desc": "Declarative location config",
        "nixName": "httpd.nginx.locations",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "httpd.nginx.locations.<name>.alias",
        "desc": "Alias directory for requests.",
        "nixName": "httpd.nginx.locations.<name>.alias",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.basicAuth",
        "desc": "Basic Auth protection for a vhost. WARNING: This is implemented to store the password in plain text in the Nix store.",
        "nixName": "httpd.nginx.locations.<name>.basicAuth",
        "type": "attribute set of string",
        "value": "{ }"
      },
      {
        "name": "httpd.nginx.locations.<name>.basicAuthFile",
        "desc": "Basic Auth password file for a vhost. Can be created via: htpasswd -c <filename> <username>. WARNING: The generate file contains the users’ passwords in a non-cryptographically-securely hashed way.",
        "nixName": "httpd.nginx.locations.<name>.basicAuthFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.extraConfig",
        "desc": "These lines go to the end of the location verbatim.",
        "nixName": "httpd.nginx.locations.<name>.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "httpd.nginx.locations.<name>.fastcgiParams",
        "desc": "FastCGI parameters to override. Unlike in the Nginx configuration file, overriding only some default parameters won’t unset the default values for other parameters.",
        "nixName": "httpd.nginx.locations.<name>.fastcgiParams",
        "type": "attribute set of (string or path)",
        "value": "{ }"
      },
      {
        "name": "httpd.nginx.locations.<name>.index",
        "desc": "Adds index directive.",
        "nixName": "httpd.nginx.locations.<name>.index",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.priority",
        "desc": "Order of this location block in relation to the others in the vhost. The semantics are the same as with lib.mkOrder. Smaller values have a greater priority.",
        "nixName": "httpd.nginx.locations.<name>.priority",
        "type": "signed integer",
        "value": "1000"
      },
      {
        "name": "httpd.nginx.locations.<name>.proxyPass",
        "desc": "Adds proxy_pass directive and sets recommended proxy headers if recommendedProxySettings is enabled.",
        "nixName": "httpd.nginx.locations.<name>.proxyPass",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.proxyWebsockets",
        "desc": "Whether to support proxying websocket connections with HTTP/1.1.",
        "nixName": "httpd.nginx.locations.<name>.proxyWebsockets",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.locations.<name>.recommendedProxySettings",
        "desc": "Enable recommended proxy settings.",
        "nixName": "httpd.nginx.locations.<name>.recommendedProxySettings",
        "type": "boolean",
        "value": "config.services.nginx.recommendedProxySettings"
      },
      {
        "name": "httpd.nginx.locations.<name>.return",
        "desc": "Adds a return directive, for e.g. redirections.",
        "nixName": "httpd.nginx.locations.<name>.return",
        "type": "null or string or signed integer",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.root",
        "desc": "Root directory for requests.",
        "nixName": "httpd.nginx.locations.<name>.root",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.locations.<name>.tryFiles",
        "desc": "Adds try_files directive.",
        "nixName": "httpd.nginx.locations.<name>.tryFiles",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.nginx.onlySSL",
        "desc": "Whether to enable HTTPS and reject plain HTTP connections. This will set defaults for listen to listen on all interfaces on port 443.",
        "nixName": "httpd.nginx.onlySSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.quic",
        "desc": "Whether to enable the QUIC transport protocol. This requires using pkgs.nginxQuic package which can be achieved by setting services.nginx.package = pkgs.nginxQuic;. Note that QUIC support is experimental and not yet recommended for production. Read more at https://quic.nginx.org/",
        "nixName": "httpd.nginx.quic",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.redirectCode",
        "desc": "HTTP status used by globalRedirect and forceSSL. Possible usecases include temporary (302, 307) redirects, keeping the request method and body (307, 308), or explicitly resetting the method to GET (303). See https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections.",
        "nixName": "httpd.nginx.redirectCode",
        "type": "integer between 300 and 399 (both inclusive)",
        "value": "301"
      },
      {
        "name": "httpd.nginx.rejectSSL",
        "desc": "Whether to listen for and reject all HTTPS connections to this vhost. Useful in default server blocks to avoid serving the certificate for another vhost. Uses the ssl_reject_handshake directive available in nginx versions 1.19.4 and above.",
        "nixName": "httpd.nginx.rejectSSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.reuseport",
        "desc": "Create an individual listening socket . It is required to specify only once on one of the hosts.",
        "nixName": "httpd.nginx.reuseport",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "httpd.nginx.root",
        "desc": "The path of the web root directory.",
        "nixName": "httpd.nginx.root",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.serverAliases",
        "desc": "Additional names of virtual hosts served by this virtual host configuration.",
        "nixName": "httpd.nginx.serverAliases",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "httpd.nginx.serverName",
        "desc": "Name of this virtual host. Defaults to attribute name in virtualHosts.",
        "nixName": "httpd.nginx.serverName",
        "type": "null or string",
        "value": "\"radicle-\\${config.networking.hostName}.\\${config.networking.domain}\""
      },
      {
        "name": "httpd.nginx.sslCertificate",
        "desc": "Path to server SSL certificate.",
        "nixName": "httpd.nginx.sslCertificate",
        "type": "path",
        "value": ""
      },
      {
        "name": "httpd.nginx.sslCertificateKey",
        "desc": "Path to server SSL certificate key.",
        "nixName": "httpd.nginx.sslCertificateKey",
        "type": "path",
        "value": ""
      },
      {
        "name": "httpd.nginx.sslTrustedCertificate",
        "desc": "Path to root SSL certificate for stapling and client certificates.",
        "nixName": "httpd.nginx.sslTrustedCertificate",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "httpd.nginx.useACMEHost",
        "desc": "A host of an existing Let’s Encrypt certificate to use. This is useful if you have many subdomains and want to avoid hitting the rate limit. Alternately, you can generate a certificate through enableACME. Note that this option does not create any certificates, nor it does add subdomains to existing ones – you will need to create them manually using security.acme.certs.",
        "nixName": "httpd.nginx.useACMEHost",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "httpd.package",
        "desc": "The radicle-httpd package to use.",
        "nixName": "httpd.package",
        "type": "package",
        "value": "pkgs.radicle-httpd"
      },
      {
        "name": "node.extraArgs",
        "desc": "Extra arguments for radicle-node",
        "nixName": "node.extraArgs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "node.listenAddress",
        "desc": "The IP address on which radicle-node listens.",
        "nixName": "node.listenAddress",
        "type": "string",
        "value": "0.0.0.0"
      },
      {
        "name": "node.listenPort",
        "desc": "The port on which radicle-node listens.",
        "nixName": "node.listenPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8776"
      },
      {
        "name": "node.openFirewall",
        "desc": "Whether to enable opening the firewall for radicle-node.",
        "nixName": "node.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The radicle-node package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.radicle-node"
      },
      {
        "name": "privateKeyFile",
        "desc": "SSH private key generated by rad auth. If it contains a colon (:) the string before the colon is taken as the credential name and the string after as a path encrypted with systemd-creds.",
        "nixName": "privateKeyFile",
        "type": "path or string",
        "value": ""
      },
      {
        "name": "publicKeyFile",
        "desc": "SSH public key generated by rad auth.",
        "nixName": "publicKeyFile",
        "type": "path or string",
        "value": ""
      },
      {
        "name": "settings",
        "desc": "See https://app.radicle.xyz/nodes/seed.radicle.garden/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5/tree/radicle/src/node/config.rs#L275",
        "nixName": "settings",
        "type": "JSON value",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "rclone",
    "desc": "Deploy Rclone to facilitate efficient data management across various cloud storage services. Rclone acts as a command-line tool that allows users to sync files and directories to and from multiple cloud providers seamlessly.",
    "longDesc": "Rclone is an open-source command-line program designed for managing files on cloud storage. It supports over 40 different cloud storage services, enabling users to perform operations like syncing, moving, and copying files across platforms.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Rclone using Docker for easy installation and management.\n- **Scalability:** Handles large datasets and supports multiple cloud storage providers, making it suitable for both personal use and enterprise environments.\n- **Privacy and Security:** Offers encryption options for files both in transit and at rest, ensuring data security.\n- **API Compatibility:** Integrates with various cloud storage services using their APIs, allowing for flexible and automated file management.\n- **Multi-Platform Support:** Runs on Windows, macOS, and Linux, providing cross-platform compatibility for users.",
    "useCases": "- **Developers:** Use Rclone for automating file uploads and backups to cloud storage services as part of their development workflow.\n- **Enterprises:** Manage and synchronize large amounts of data across multiple cloud providers, facilitating easy data access and redundancy.\n- **Educators:** Teach students about cloud storage management and data synchronization using real-world tools.",
    "support": "- **Community Forums:** Engage with the Rclone community for support and discussions through the [Rclone GitHub Repository](https://github.com/rclone/rclone) and the [Rclone Forum](https://forum.rclone.org/.\n- **Documentation:** Comprehensive guides and user manuals are available at the [Rclone Documentation](https://rclone.org/docs/) for detailed user reference.\n- **Troubleshooting Help:** Access the Issues section on GitHub to report bugs or feature requests.\n\nThis template provides an overview of Rclone’s functionalities and practical applications, emphasizing its importance in managing and synchronizing files across cloud storage services. For more detailed information, visit the [official Rclone website](https://rclone.org/).",
    "tags": [
      "Backup"
    ],
    "website": "https://rclone.org",
    "implemented": false,
    "logo": "https://rclone.org/img/rclone-32x32.png",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "rclone",
    "options": [
      {
        "name": "backup/restic.nix",
        "desc": "Path to the file containing rclone configuration. This file mustcontain configuration for the remote specified in this backup set andalso must be readable by root. Options set in rcloneConfigwill override those set in this file.",
        "nixName": "relatedOption.restic.backups.<name>.rcloneConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "backup/restic.nix",
        "desc": "Configuration for the rclone remote being used for backup. See theremote’s specific options under rclone’s docs at https://rclone.org/docs/. Whenspecifying option names, use the “config” name specified in the docs.For example, to set --b2-hard-delete for a B2 remote, usehard_delete = true in the attribute set. Warning: Secretsset in here will be world-readable in the Nix store! Consider using thercloneConfigFile option instead to specify secret valuesseparately. Note that options set here will override those set in theconfig file.",
        "nixName": "relatedOption.restic.backups.<name>.rcloneConfig",
        "type": "null or (attribute set of (string or boolean))",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Path to the file containing rclone configuration. This file mustcontain configuration for the remote specified in this backup set andalso must be readable by root.Options set in rcloneConfig will override those set inthis file.",
        "nixName": "relatedOption.prometheus.exporters.restic.rcloneConfigFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Configuration for the rclone remote being used for backup. See theremote’s specific options under rclone’s docs at https://rclone.org/docs/. Whenspecifying option names, use the “config” name specified in the docs.For example, to set --b2-hard-delete for a B2 remote, usehard_delete = true in the attribute set.Secrets set in here will be world-readable in the Nix store! Considerusing the rcloneConfigFile option instead to specify secretvalues separately. Note that options set here will override those set inthe config file.",
        "nixName": "relatedOption.prometheus.exporters.restic.rcloneConfig",
        "type": "attribute set of (string or boolean)",
        "value": "{ }"
      },
      {
        "name": "backup/restic.nix",
        "desc": "Options to pass to rclone to control its behavior. See https://rclone.org/docs/#optionsfor available options. When specifying option names, strip the leading--. To set a flag such as --drive-use-trash,which does not take a value, set the value to the Booleantrue.",
        "nixName": "relatedOption.restic.backups.<name>.rcloneOptions",
        "type": "null or (attribute set of (string or boolean))",
        "value": "null"
      },
      {
        "name": "monitoring/prometheus/exporters.nix",
        "desc": "Options to pass to rclone to control its behavior. See https://rclone.org/docs/#optionsfor available options. When specifying option names, strip the leading--. To set a flag such as --drive-use-trash,which does not take a value, set the value to the Booleantrue.",
        "nixName": "relatedOption.prometheus.exporters.restic.rcloneOptions",
        "type": "attribute set of (string or boolean)",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "RStudio Server",
    "desc": "Deploy RStudio to create a powerful integrated development environment (IDE) for R programming, facilitating data analysis, statistical computing, and visualization in a user-friendly interface.",
    "longDesc": "RStudio is an open-source IDE that provides tools for R programming, including a code editor, debugging tools, and integration with version control systems. It is widely used in data science and statistical analysis.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up RStudio using Docker or cloud platforms for efficient installation and configuration.\n- **Scalability:** Supports various project sizes, making it suitable for individual analysts as well as large teams.\n- **Privacy and Security:** Allows users to work in a secure environment, particularly when deployed on private servers or cloud instances.\n- **API Compatibility:** Integrates with numerous R packages and external APIs, enhancing data manipulation and visualization capabilities.\n- **Rich User Interface:** Offers an intuitive layout with features like syntax highlighting, code completion, and integrated plotting tools.",
    "useCases": "- **Data Analysts:** Utilize RStudio for exploratory data analysis, creating visualizations, and generating reports.\n- **Researchers:** Implement RStudio for statistical modeling and analysis in academic and industry research projects.\n- **Educators:** Use RStudio as a teaching tool to introduce students to data science concepts and R programming.",
    "support": "- **Community Forums:** Engage with the RStudio community for support and discussions through the [RStudio Community Forum](https://community.rstudio.com/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [RStudio Documentation](https://docs.posit.co/ide/user/) for detailed reference.\n- **Troubleshooting Help:** Access the [RStudio GitHub Repository](https://github.com/rstudio/rstudio) to report bugs and find community-contributed solutions.\n\nThis template provides an overview of RStudio’s functionalities and practical applications, emphasizing its role in data analysis and statistical computing. For more detailed information, visit the [official RStudio documentation](https://docs.posit.co/ide/user/).",
    "nixName": "rstudio-server",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Software Development - IDE & Tools"
    ],
    "website": "https://www.rstudio.com/",
    "implemented": false,
    "logo": "https://posit.co/wp-content/themes/Posit/dist/images/favicon/favicon-32x32.png",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable RStudio server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "listenAddr",
        "desc": "Address to listen on (www-address in rserver.conf).",
        "nixName": "listenAddr",
        "type": "string",
        "value": "\"127.0.0.1\""
      },
      {
        "name": "package",
        "desc": "The rstudio-server package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.rstudio-server"
      },
      {
        "name": "rserverExtraConfig",
        "desc": "Extra contents for rserver.conf.",
        "nixName": "rserverExtraConfig",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "rsessionExtraConfig",
        "desc": "Extra contents for resssion.conf.",
        "nixName": "rsessionExtraConfig",
        "type": "string",
        "value": "\"\""
      },
      {
        "name": "serverWorkingDir",
        "desc": "Default working directory for server (server-working-dir inrserver.conf).",
        "nixName": "serverWorkingDir",
        "type": "string",
        "value": "\"/var/lib/rstudio-server\""
      }
    ]
  },
  {
    "name": "RustDesk",
    "desc": "Deploy RustDesk to create a secure and user-friendly remote desktop solution. RustDesk enables users to access and control computers remotely, making it ideal for technical support, collaborative work, and remote access.",
    "longDesc": "RustDesk is an open-source remote desktop software that allows users to connect to and control remote computers over the internet. Built with Rust, it emphasizes performance and security, providing a reliable alternative to existing remote desktop solutions.\n\n**Key Features:**\n- **One-Click Deployment:** Simplifies setup using Docker or similar container technologies for easy installation and management.\n- **Scalability:** Designed to support a large number of concurrent connections, suitable for personal use or enterprise environments.\n- **Privacy and Security:** Offers end-to-end encryption for remote sessions, ensuring data safety and user privacy.\n- **Self-Hosted Option:** Users can deploy their own server for complete control over their data and connections.\n- **Cross-Platform Support:** Compatible with Windows, macOS, and Linux, allowing access from various devices.",
    "useCases": "- **IT Support:** Provide remote assistance and troubleshooting for users or clients without needing physical access to their devices.\n- **Collaborative Work:** Facilitate teamwork by allowing multiple users to access and work on shared projects remotely.\n- **Personal Use:** Enable users to access their home computers from anywhere, ensuring they can retrieve files or run applications remotely.",
    "support": "- **Community Forums:** Engage with other RustDesk users and developers through the [RustDesk GitHub Repository](https://github.com/rustdesk/rustdesk) for discussions and support.\n- **Documentation:** Comprehensive guides and user manuals are available at the [RustDesk Documentation](https://rustdesk.com/docs/) for detailed user reference.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of RustDesk’s functionalities and practical applications, emphasizing its importance in remote access and support. For more detailed information, visit the [official RustDesk website](https://rustdesk.com/).",
    "tags": [
      "Remote Access"
    ],
    "website": "https://rustdesk.com",
    "implemented": false,
    "logo": "",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "rustdesk",
    "options": [
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "The rustdesk-server package to use.",
        "nixName": "relatedOption.rustdesk-server.package",
        "type": "package",
        "value": "pkgs.rustdesk-server"
      },
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "The public facing IP of the RustDesk relay.",
        "nixName": "relatedOption.rustdesk-server.relayIP",
        "type": "string",
        "value": null
      },
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "Whether to enable RustDesk, a remote access and remote controlsoftware, allowing maintenance of computers and other devices..",
        "nixName": "relatedOption.rustdesk-server.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "Open the connection ports. TCP (21115, 21116, 21117, 21118, 21119)UDP (21116)",
        "nixName": "relatedOption.rustdesk-server.openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "A list of extra command line arguments to pass to thehbbs process.",
        "nixName": "relatedOption.rustdesk-server.extraSignalArgs",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "monitoring/rustdesk-server.nix",
        "desc": "A list of extra command line arguments to pass to thehbbr process.",
        "nixName": "relatedOption.rustdesk-server.extraRelayArgs",
        "type": "list of string",
        "value": "[ ]"
      }
    ]
  },
  {
    "name": "samba",
    "desc": "Deploy Samba to create an open-source software suite that provides seamless file and print services for SMB/CIFS clients, allowing interoperability between Linux/Unix servers and Windows clients.",
    "longDesc": "Samba is an implementation of the SMB/CIFS networking protocol that allows for file and print sharing between computers on a network. It enables Linux and Unix systems to communicate with Windows systems, allowing for cross-platform file sharing and printer access.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Samba using package managers or Docker for quick and straightforward installation.\n- **Scalability:** Suitable for small networks as well as large enterprise environments, capable of managing numerous users and resources.\n- **Privacy and Security:** Supports various authentication methods and encryption options to secure shared data.\n- **API Compatibility:** Allows for integration with various applications and services, enhancing functionality in mixed-OS environments.\n- **Extensive Configuration Options:** Offers a wide range of settings to customize file sharing, permissions, and access control.",
    "useCases": "- **Home Networks:** Use Samba to share files between Linux and Windows devices in a home environment.\n- **Small Businesses:** Implement Samba for shared access to files and printers across mixed-OS workgroups.\n- **Enterprise Solutions:** Leverage Samba for large-scale file sharing and collaboration in corporate environments, facilitating cross-platform operations.",
    "support": "- **Community Forums:** Engage with the Samba community for support and discussions through the [Samba Mailing Lists](https://lists.samba.org/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Samba Documentation](https://www.samba.org/samba/docs/) and the [Samba Wiki](https://wiki.samba.org/index.php/User_Documentation) for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on the [Samba GitHub Repository](https://github.com/samba-team/samba) to report bugs and find community-contributed solutions.\n\nThis template highlights the functionalities and practical applications of Samba, emphasizing its role in enabling file sharing across different operating systems. For more detailed information, visit the [official Samba website](https://www.samba.org/samba/docs/).",
    "nixName": "samba",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://www.samba.org",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "configText",
        "desc": "Verbatim contents of smb.conf. If null (default), use the autogenerated file from NixOS instead.",
        "nixName": "configText",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Samba, which provides file and print services to Windows clients through the SMB/CIFS protocol.  If you use the firewall consider adding the following: services.samba.openFirewall = true;",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableNmbd",
        "desc": "Whether to enable Samba’s nmbd, which replies to NetBIOS over IP name service requests. It also participates in the browsing protocols which make up the Windows “Network Neighborhood” view.",
        "nixName": "enableNmbd",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "enableWinbindd",
        "desc": "Whether to enable Samba’s winbindd, which provides a number of services to the Name Service Switch capability found in most modern C libraries, to arbitrary applications via PAM and ntlm_auth and to Samba itself.",
        "nixName": "enableWinbindd",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraConfig",
        "desc": "Additional global section and extra section lines go in here.",
        "nixName": "extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "invalidUsers",
        "desc": "List of users who are denied to login via Samba.",
        "nixName": "invalidUsers",
        "type": "list of string",
        "value": "[\n  \"root\"\n]"
      },
      {
        "name": "nsswins",
        "desc": "Whether to enable the WINS NSS (Name Service Switch) plug-in. Enabling it allows applications to resolve WINS/NetBIOS names (a.k.a. Windows machine names) by transparently querying the winbindd daemon.",
        "nixName": "nsswins",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to automatically open the necessary ports in the firewall.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The samba package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.samba"
      },
      {
        "name": "securityType",
        "desc": "Samba security type",
        "nixName": "securityType",
        "type": "one of \"auto\", \"user\", \"domain\", \"ads\"",
        "value": "\"user\""
      },
      {
        "name": "shares",
        "desc": "A set describing shared resources. See man smb.conf for options.",
        "nixName": "shares",
        "type": "attribute set of attribute set of unspecified value",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "Seafile",
    "desc": "Deploy Seafile to create a secure and efficient file synchronization and sharing platform. Seafile allows users to store, manage, and share files across devices seamlessly, making it ideal for collaborative work environments.",
    "longDesc": "Seafile is an open-source cloud storage solution that provides file synchronization and sharing features. It is designed for high performance, scalability, and data security, enabling users to manage their files effectively.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Seafile using Docker for a quick and streamlined installation process.\n- **Scalability:** Supports large file storage and many users, making it suitable for both individual users and enterprises.\n- **Privacy and Security:** Offers strong encryption for file transfers and storage, ensuring that user data is secure and private.\n- **API Compatibility:** Provides a REST API for integration with other applications, allowing for enhanced functionality and automation.\n- **Version Control:** Supports file versioning, enabling users to keep track of changes and restore previous versions if necessary.",
    "useCases": "- **Developers:** Manage project files and collaborate with team members through shared folders.\n- **Enterprises:** Implement Seafile for secure file sharing and synchronization within the organization, improving workflow and communication.\n- **Educational Institutions:** Use Seafile to share resources and materials among students and faculty, facilitating collaboration and access to information.",
    "support": "- **Community Forums:** Engage with other Seafile users for support and discussions through the [Seafile Community Forum](https://forum.seafile.com/).\n- **Documentation:** Comprehensive guides and installation instructions are available at the [Seafile Documentation](https://www.seafile.com/en/doc/) for detailed user reference.\n- **Troubleshooting Help:** Access the issues section on [Seafile GitHub Repository](https://github.com/haiwen/seafile) to report bugs and find community-contributed solutions.\n\nThis template provides a clear overview of Seafile’s functionalities and practical applications, emphasizing its importance in file management and collaboration. For more detailed information, visit the [official Seafile website](https://www.seafile.com/en/home/).",
    "nixName": "seafile",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://github.com/haiwen/seahub",
    "implemented": false,
    "logo": "https://www.seafile.com/media/img/seafile-logo.png",
    "options": [
      {
        "name": "adminEmail",
        "desc": "Seafile Seahub Admin Account Email.",
        "nixName": "adminEmail",
        "type": "string",
        "value": null
      },
      {
        "name": "ccnetSettings",
        "desc": "Configuration for ccnet, see  https://manual.seafile.com/config/ccnet-conf/ for supported values.",
        "nixName": "ccnetSettings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
        "value": "{ }"
      },
      {
        "name": "ccnetSettings.General.SERVICE_URL",
        "desc": "Seahub public URL.",
        "nixName": "ccnetSettings.General.SERVICE_URL",
        "type": "string",
        "value": null
      },
      {
        "name": "enable",
        "desc": "Whether to enable Seafile server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "initialAdminPassword",
        "desc": "Seafile Seahub Admin Account initial password. Should be change viaSeahub web front-end.",
        "nixName": "initialAdminPassword",
        "type": "string",
        "value": "xnode"
      },
      {
        "name": "seafileSettings",
        "desc": "Configuration for seafile-server, see  https://manual.seafile.com/config/seafile-conf/ for supported values.",
        "nixName": "seafileSettings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
        "value": "{ }"
      },
      {
        "name": "seafileSettings.fileserver.host",
        "desc": "The binding address used by seafile fileserver.",
        "nixName": "seafileSettings.fileserver.host",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "seafileSettings.fileserver.port",
        "desc": "The tcp port used by seafile fileserver.",
        "nixName": "seafileSettings.fileserver.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8082"
      },
      {
        "name": "seahubExtraConf",
        "desc": "Extra config to append to  seahub_settings.py  file. Referto  https://manual.seafile.com/config/seahub_settings_py/ for all available options.",
        "nixName": "seahubExtraConf",
        "type": "strings concatenated with \"\\n\"",
        "value": ""
      },
      {
        "name": "workers",
        "desc": "The number of gunicorn worker processes for handling requests.",
        "nixName": "workers",
        "type": "signed integer",
        "value": "4"
      }
    ]
  },
  {
    "name": "searxng",
    "desc": "Deploy Seaxng to create a self-hosted metasearch engine that aggregates results from various search engines while respecting user privacy. Seaxng allows users to search the web without being tracked or monitored.",
    "longDesc": "Seaxng is an open-source metasearch engine designed to provide users with a comprehensive search experience by pulling results from multiple sources. It emphasizes privacy by not storing user data or tracking search histories.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Seaxng using Docker or other installation methods for easy configuration.\n- **Scalability:** Supports multiple instances and configurations, making it suitable for both personal use and larger networks.\n- **Privacy and Security:** Does not track users or store personal data, providing a secure search environment.\n- **API Compatibility:** Offers an API for integration with other applications, allowing for customized search experiences.\n- **Customizable Interface:** Users can modify the appearance and functionalities of their search engine to meet specific needs.",
    "useCases": "- **Privacy-Conscious Users:** Use Seaxng to search the web without compromising personal data or privacy.\n- **Developers:** Integrate Seaxng into applications to provide users with secure and private search capabilities.\n- **Organizations:** Implement Seaxng for internal use to allow employees to conduct searches without exposing sensitive information to third-party search engines.",
    "support": "- **Community Forums:** Engage with the Seaxng community for support and discussions through the [Seaxng GitHub Repository](https://github.com/searxng/searxng).\n- **Documentation:** Comprehensive guides and user manuals are available at the repository for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Seaxng’s functionalities and practical applications, emphasizing its role in promoting privacy in web searches. For more detailed information, visit the [official Seaxng GitHub page](https://github.com/searxng/searxng).",
    "nixName": "searx",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://github.com/searxng/searxng",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable Searx, the meta search engine.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environmentFile",
        "desc": "Environment file (see systemd.exec(5) “EnvironmentFile=” section for the syntax) to define variables for Searx. This option can be used to safely include secret keys into the Searx configuration.",
        "nixName": "environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "limiterSettings",
        "desc": "Limiter settings for SearXNG.  For available settings, see the SearXNG schema file.",
        "nixName": "limiterSettings",
        "type": "attribute set of (JSON value)",
        "value": "{ }"
      },
      {
        "name": "package",
        "desc": "The searxng package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.searxng"
      },
      {
        "name": "redisCreateLocally",
        "desc": "Configure a local Redis server for SearXNG. This is required if you want to enable the rate limiter and bot protection of SearXNG.",
        "nixName": "redisCreateLocally",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "runInUwsgi",
        "desc": "Whether to run searx in uWSGI as a “vassal”, instead of using its built-in HTTP server. This is the recommended mode for public or large instances, but is unnecessary for LAN or local-only use.  The built-in HTTP server logs all queries by default.",
        "nixName": "runInUwsgi",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "settings",
        "desc": "Searx settings. These will be merged with (taking precedence over) the default configuration. It’s also possible to refer to environment variables (defined in services.searx.environmentFile) using the syntax @VARIABLE_NAME@.  For available settings, see the Searx docs.",
        "nixName": "settings",
        "type": "attribute set of (JSON value)",
        "value": "{ }"
      },
      {
        "name": "settingsFile",
        "desc": "The path of the Searx server settings.yml file. If no file is specified, a default file is used (default config file has debug mode enabled). Note: setting this options overrides services.searx.settings.  This file, along with any secret key it contains, will be copied into the world-readable Nix store.",
        "nixName": "settingsFile",
        "type": "path",
        "value": "\"/run/searx/settings.yml\""
      },
      {
        "name": "uwsgiConfig",
        "desc": "Additional configuration of the uWSGI vassal running searx. It should notably specify on which interfaces and ports the vassal should listen.",
        "nixName": "uwsgiConfig",
        "type": "Json value or lambda",
        "value": "{\n  http = \":8080\";\n}"
      }
    ]
  },
  {
    "name": "SearXNG",
    "desc": "Deploy Seaxng to create a self-hosted metasearch engine that aggregates results from various search engines while respecting user privacy. Seaxng allows users to search the web without being tracked or monitored.",
    "longDesc": "Seaxng is an open-source metasearch engine designed to provide users with a comprehensive search experience by pulling results from multiple sources. It emphasizes privacy by not storing user data or tracking search histories.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up Seaxng using Docker or other installation methods for easy configuration.\n- **Scalability:** Supports multiple instances and configurations, making it suitable for both personal use and larger networks.\n- **Privacy and Security:** Does not track users or store personal data, providing a secure search environment.\n- **API Compatibility:** Offers an API for integration with other applications, allowing for customized search experiences.\n- **Customizable Interface:** Users can modify the appearance and functionalities of their search engine to meet specific needs.",
    "useCases": "- **Privacy-Conscious Users:** Use Seaxng to search the web without compromising personal data or privacy.\n- **Developers:** Integrate Seaxng into applications to provide users with secure and private search capabilities.\n- **Organizations:** Implement Seaxng for internal use to allow employees to conduct searches without exposing sensitive information to third-party search engines.",
    "support": "- **Community Forums:** Engage with the Seaxng community for support and discussions through the [Seaxng GitHub Repository](https://github.com/searxng/searxng).\n- **Documentation:** Comprehensive guides and user manuals are available at the repository for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.",
    "tags": [
      "Search Engines"
    ],
    "website": "https://github.com/searxng/searxng",
    "implemented": false,
    "logo": "",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "searxng",
    "options": [
      {
        "name": "networking/searx.nix",
        "desc": "Limiter settings for SearXNG.For available settings, see the SearXNG schemafile.",
        "nixName": "relatedOption.searx.limiterSettings",
        "type": "attribute set of (JSON value)",
        "value": "{ }"
      },
      {
        "name": "networking/searx.nix",
        "desc": "Configure a local Redis server for SearXNG. This is required if youwant to enable the rate limiter and bot protection of SearXNG.",
        "nixName": "relatedOption.searx.redisCreateLocally",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "networking/searx.nix",
        "desc": "The searxng package to use.",
        "nixName": "relatedOption.searx.package",
        "type": "package",
        "value": "pkgs.searxng"
      }
    ]
  },
  {
    "name": "ShellHub",
    "desc": "Deploy ShellHub to create a centralized SSH gateway for secure and manageable remote access to devices, servers, and containers. ShellHub simplifies the process of connecting to remote systems without the need for complex VPN setups.",
    "longDesc": "ShellHub is an open-source platform designed to streamline and secure remote shell access. By installing a lightweight agent on devices, users can manage connections remotely through a web interface or standard SSH tools. This system facilitates centralized access while enhancing security and usability.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation through Docker or other methods for quick access to remote management capabilities.\n- **Scalability:** Supports a growing number of devices and users, making it suitable for both small teams and large enterprises.\n- **Privacy and Security:** Uses public key authentication and encrypted connections to protect user data and access.\n- **Firewall Rules:** Provides flexible firewall management for controlling SSH connections, ensuring only trusted connections can reach devices.\n- **Session Recording:** Allows for monitoring and auditing of SSH sessions, which can be beneficial for compliance and security oversight.",
    "useCases": "- **Businesses:** Manage and secure access to multiple servers and devices from a single interface, streamlining operations and reducing the risk of unauthorized access.\n- **Developers:** Utilize ShellHub to easily connect to development environments or production servers without exposing them to the public internet.\n- **Educational Institutions:** Teach students about secure remote access and SSH concepts through practical, hands-on experience.",
    "support": "- **Community Forums:** Engage with the ShellHub community for assistance through the [ShellHub GitHub Repository](https://github.com/shellhub-io/shellhub).\n- **Documentation:** Comprehensive guides and setup instructions are available at the [ShellHub Documentation](https://docs.shellhub.io/) for user reference.\n- **Troubleshooting Help:** Access the troubleshooting section on the documentation site to find solutions to common issues and report bugs in the GitHub Issues section.\n\nThis template highlights the functionalities and practical applications of ShellHub, emphasizing its importance in managing and securing remote access. For more detailed information, visit the [official ShellHub website](https://docs.shellhub.io/).",
    "nixName": "shellhub-agent",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Remote Access"
    ],
    "website": "https://shellhub.io/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable ShellHub Agent daemon.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "keepAliveInterval",
        "desc": "Determine the interval to send the keep alive message to the server. This has a direct impact of the bandwidth used by the device.",
        "nixName": "keepAliveInterval",
        "type": "signed integer",
        "value": "30"
      },
      {
        "name": "package",
        "desc": "The shellhub-agent package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.shellhub-agent"
      },
      {
        "name": "preferredHostname",
        "desc": "Set the device preferred hostname. This provides a hint to the server to use this as hostname if it is available.",
        "nixName": "preferredHostname",
        "type": "string",
        "value": ""
      },
      {
        "name": "privateKey",
        "desc": "Location where to store the ShellHub Agent private key.",
        "nixName": "privateKey",
        "type": "path",
        "value": "\"/var/lib/shellhub-agent/private.key\""
      },
      {
        "name": "server",
        "desc": "Server address of ShellHub Gateway to connect.",
        "nixName": "server",
        "type": "string",
        "value": "https://cloud.shellhub.io"
      },
      {
        "name": "tenantId",
        "desc": "The tenant ID to use when connecting to the ShellHub Gateway.",
        "nixName": "tenantId",
        "type": "string",
        "value": ""
      }
    ]
  },
  {
    "name": "Sonarr ",
    "desc": "Deploy Sonarr to manage and automate the downloading of TV shows. Sonarr is designed to simplify the process of obtaining episodes from various sources while maintaining a clean and organized library.",
    "longDesc": "Sonarr is an open-source application that acts as a PVR (personal video recorder) for TV series. It allows users to track their favorite shows, automatically download new episodes, and organize their media library.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Sonarr using Docker or similar technologies for quick installation and access.\n- **Scalability:** Capable of handling multiple shows and seasons, suitable for personal use or larger media libraries.\n- **Privacy and Security:** Operates on the user's local network, giving them control over their media without relying on third-party services.\n- **API Compatibility:** Integrates with various download clients and media servers via a robust API, enhancing automation and workflow.\n- **Notification System:** Provides alerts and notifications for new episodes, ensuring users never miss an update.",
    "useCases": "- **Media Enthusiasts:** Automate the downloading and organization of TV shows, ensuring a seamless viewing experience.\n- **Families:** Set up a family media server that automatically updates with the latest episodes of favorite shows.\n- **Developers:** Utilize the API to integrate Sonarr with other applications or services, creating a personalized media management solution.",
    "support": "- **Community Forums:** Engage with other Sonarr users through the [Sonarr GitHub Repository](https://github.com/Sonarr/Sonarr) for support and discussions.\n- **Documentation:** Comprehensive guides and setup instructions are available at the [Sonarr Documentation](https://sonarr.tv/) for detailed user reference.\n- **Troubleshooting Help:** Access the Issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides an overview of Sonarr’s functionalities and practical applications, emphasizing its importance in managing and automating TV show downloads. For more detailed information, visit the [official Sonarr website](https://sonarr.tv/).",
    "nixName": "sonarr",
    "specs": {
      "ram": 2048,
      "storage": 0
    },
    "tags": [
      "Automation"
    ],
    "website": "https://sonarr.tv",
    "implemented": false,
    "logo": "https://sonarr.tv/img/favicon.ico",
    "options": [
      {
        "name": "dataDir",
        "desc": "The directory where Sonarr stores its data files.",
        "nixName": "dataDir",
        "type": "string",
        "value": "/var/lib/sonarr/.config/NzbDrone"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Sonarr.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "group",
        "desc": "Group under which Sonaar runs.",
        "nixName": "group",
        "type": "string",
        "value": "sonarr"
      },
      {
        "name": "openFirewall",
        "desc": "Open ports in the firewall for the Sonarr web interface",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The sonarr package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.sonarr"
      },
      {
        "name": "user",
        "desc": "User account under which Sonaar runs.",
        "nixName": "user",
        "type": "string",
        "value": "sonarr"
      }
    ]
  },
  {
    "name": "Squid",
    "desc": "Deploy Squid as a powerful caching proxy server for web clients, enabling enhanced performance, reduced bandwidth usage, and improved security for web traffic. Squid acts as an intermediary between users and the internet, caching content to speed up repeated requests.",
    "longDesc": "Squid is an open-source caching proxy server that supports HTTP, HTTPS, and FTP protocols. It is widely used to cache web content and control access to the internet, improving speed and reducing bandwidth consumption.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Squid using Docker or other containerization technologies for rapid deployment.\n- **Scalability:** Efficiently handles thousands of simultaneous connections, making it suitable for both small businesses and large enterprises.\n- **Privacy and Security:** Offers various authentication methods and access controls, enhancing security for web access.\n- **Caching Mechanism:** Reduces latency and bandwidth usage by storing frequently accessed content locally, leading to faster load times for users.\n- **API Compatibility:** Integrates with other applications and services through its flexible configuration options, allowing for custom setups.",
    "useCases": "- **Businesses:** Implement Squid to manage internet usage, restrict access to certain sites, and optimize bandwidth for essential applications.\n- **Educational Institutions:** Use Squid to control and monitor student internet access while providing faster access to educational resources.\n- **Developers:** Leverage Squid to test web applications and improve performance by simulating different network conditions.",
    "support": "- **Community Forums:** Engage with the Squid user community for support and discussions through the [Squid Mailing Lists](http://www.squid-cache.org/Mail/).\n- **Documentation:** Comprehensive configuration guides and usage instructions are available at the [Squid Official Documentation](https://www.squid-cache.org/Doc/config/) for detailed reference.\n- **Troubleshooting Help:** Access the Issues section on [Squid GitHub Repository](https://github.com/lferrarotti74/SquidProxy) for community-contributed solutions and to report any bugs or feature requests.\n\nThis template highlights the functionalities and practical applications of Squid, emphasizing its importance in managing web traffic and enhancing performance. For more detailed information, visit the [official Squid website](https://www.squid-cache.org/).",
    "nixName": "squid",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Proxy"
    ],
    "website": "http://www.squid-cache.org",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "configText",
        "desc": "Verbatim contents of squid.conf. If null (default), use the autogenerated file from NixOS instead.",
        "nixName": "configText",
        "type": "null or strings concatenated with \"\\n\"",
        "value": "null"
      },
      {
        "name": "enable",
        "desc": "Whether to run squid web proxy.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraConfig",
        "desc": "Squid configuration. Contents will be added verbatim to the configuration file.",
        "nixName": "extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "package",
        "desc": "The squid package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.squid"
      },
      {
        "name": "proxyAddress",
        "desc": "IP address on which squid will listen.",
        "nixName": "proxyAddress",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "proxyPort",
        "desc": "TCP port on which squid will listen.",
        "nixName": "proxyPort",
        "type": "signed integer",
        "value": "3128"
      }
    ]
  },
  {
    "name": "Stalwart JMAP",
    "desc": "Deploy Stalwart JMAP to create a robust mail server solution that uses the JMAP (JavaScript Messaging Protocol) standard for email access. This deployment enables efficient management of email communication with modern features and enhanced performance.",
    "longDesc": "Stalwart JMAP is an open-source mail server implementation that leverages the JMAP protocol to provide a more streamlined and efficient way of accessing and managing email. By using JMAP, it allows for real-time synchronization of emails and other related resources.\n\n**Key Features:**\n- **One-Click Deployment:** Simplified installation process using Docker, facilitating quick and efficient setup.\n- **Scalability:** Designed to handle multiple users and large volumes of emails, making it suitable for both personal and enterprise-level use.\n- **Privacy and Security:** Offers enhanced privacy features and secure email access, ensuring user data is protected.\n- **API Compatibility:** Provides a well-defined API for integration with other applications and services, enhancing functionality.\n- **Real-Time Synchronization:** Supports real-time updates for emails and folders, improving user experience and responsiveness.",
    "useCases": "- **Developers:** Integrate email functionality into applications using the JMAP protocol for seamless email management.\n- **Enterprises:** Implement a scalable email solution that can support a large user base with robust performance.\n- **Educators:** Use Stalwart JMAP in teaching environments to demonstrate modern email protocols and server management.",
    "support": "- **Community Forums:** Engage with the Stalwart community for support and discussions through the [Stalwart GitHub Repository](https://github.com/stalwartlabs/mail-server).\n- **Documentation:** Comprehensive user guides and setup instructions are available at the [Stalwart JMAP Documentation](https://stalw.art/docs/jmap/overview/) for detailed reference.\n- **Troubleshooting Help:** Access the Issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides an overview of Stalwart JMAP’s functionalities and practical applications, emphasizing its significance in modern email management. For more detailed information, visit the [official Stalwart JMAP documentation](https://stalw.art/docs/jmap/overview/).",
    "nixName": "stalwart-mail",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Server",
      "Communication - Email - Mail Delivery Agents"
    ],
    "website": "https://github.com/stalwartlabs/mail-server",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable the Stalwart all-in-one email server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open TCP firewall ports, which are specified in services.stalwart-mail.settings.listener on all interfaces.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "package",
        "desc": "The stalwart-mail package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.stalwart-mail"
      },
      {
        "name": "settings",
        "desc": "Configuration options for the Stalwart email server. See https://stalw.art/docs/category/configuration for available options. By default, the module is configured to store everything locally.",
        "nixName": "settings",
        "type": "TOML value",
        "value": "{ }"
      }
    ]
  },
  {
    "name": "Static Web Server",
    "desc": "Deploy a Static Web Server to serve static files efficiently over the web. This lightweight server is designed for hosting HTML, CSS, JavaScript, and image files, making it ideal for websites and applications that do not require server-side processing.",
    "longDesc": "A Static Web Server is a type of web server that delivers static content directly to the client without any server-side processing. It is optimized for serving fixed files, which makes it faster and less resource-intensive compared to dynamic servers.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up using Docker or other container orchestration tools for rapid installation and accessibility.\n- **Scalability:** Capable of handling high volumes of traffic, making it suitable for small personal projects as well as large-scale applications.\n- **Privacy and Security:** Offers basic security features and does not process user data, enhancing privacy for hosted content.\n- **Lightweight and Fast:** Minimal resource usage ensures quick response times and efficient content delivery.\n- **Customizable Configuration:** Allows users to configure settings such as caching, compression, and directory listings to optimize performance.",
    "useCases": "- **Developers:** Host personal projects or documentation sites without the overhead of a full web server.\n- **Enterprises:** Serve marketing landing pages or static content as part of a larger web application architecture.\n- **Educators:** Use for teaching web development fundamentals by providing students with a platform to deploy static websites.",
    "support": "- **Community Forums:** Engage with users and developers through forums or discussion boards related to static web serving.\n- **Documentation:** Comprehensive guides and setup instructions are available on the [Static Web Server GitHub Repository](https://github.com/static-web-server/static-web-server) for detailed user reference.\n- **Troubleshooting Help:** Access the Issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides a clear overview of the Static Web Server’s functionalities and practical applications, emphasizing its importance for hosting static content. For more detailed information, visit the [official Static Web Server GitHub page](https://github.com/static-web-server/static-web-server).",
    "nixName": "static-web-server",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Web Servers"
    ],
    "website": "https://static-web-server.net/",
    "implemented": false,
    "logo": "https://static-web-server.net/assets/sws.svg",
    "options": [
      {
        "name": "configuration",
        "desc": "Configuration for Static Web Server. See https://static-web-server.net/configuration/config-file/. NOTE: Don’t set “host”, “port”, or “root” here. They will be ignored. Use the top-level “listen” and “root” options instead.",
        "nixName": "configuration",
        "type": "TOML value",
        "value": "{ }"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Static Web Server.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "listen",
        "desc": "The “ListenStream” used in static-web-server.socket. This is equivalent to SWS’s “host” and “port” options. See here for specific syntax: https://www.freedesktop.org/software/systemd/man/systemd.socket.html#ListenStream=",
        "nixName": "listen",
        "type": "string",
        "value": "[::]:8787"
      },
      {
        "name": "root",
        "desc": "The location of files for SWS to serve. Equivalent to SWS’s “root” config value. NOTE: This folder must exist before starting SWS.",
        "nixName": "root",
        "type": "path",
        "value": ""
      }
    ]
  },
  {
    "name": "Syncthing",
    "desc": "Deploy Syncthing with a one-click setup to synchronize files across multiple devices securely and efficiently. Syncthing ensures data privacy by running on user-managed infrastructure without requiring third-party cloud services.",
    "longDesc": "**What is Syncthing?**\n\nSyncthing is an open-source file synchronization tool that allows users to sync data between devices seamlessly. It ensures your files are available across computers, smartphones, or servers by directly synchronizing them over the internet or local networks without relying on external cloud services. All data is encrypted during transit, prioritizing privacy and security.\n\n**Key Features:**\n\n- **One-Click Deployment:** Instantly deploy Syncthing using Docker for a hassle-free setup.\n- **Cross-Platform Support:** Works on Linux, Windows, macOS, and Android.\n- **Data Privacy:** Synchronization is managed directly by users, with no data sent to third-party servers.\n- **Version Control:** Offers file versioning to archive older versions of files.\n- **Web-based Admin Interface:** Manage and monitor your synchronization tasks via an intuitive browser-based UI.\n- **Device Discovery & Relay Services:** Automatically finds devices on local and remote networks, with support for relayed connections to handle NAT restrictions.",
    "support": "- **Community Forums:** Connect with other users via the [Syncthing Forum](https://forum.syncthing.net) for troubleshooting and advice.\n- **Documentation:** Access detailed setup guides and best practices in the [official Syncthing documentation](https://docs.syncthing.net).\n- **Development & Issues:** Report bugs or contribute through the [GitHub repository](https://github.com/syncthing).\n- **Help & Troubleshooting:** Explore advanced settings, including relay services and file versioning, through the documentation.\n\n This template highlights Syncthing’s focus on data privacy, direct synchronization, and ease of deployment through Xnode. It’s an ideal solution for users and organizations looking to retain full control over their data without relying on external cloud services.",
    "nixName": "syncthing",
    "specs": {
      "ram": 500,
      "storage": 10000
    },
    "tags": [
      "Files",
      "NAS",
      "Drive"
    ],
    "website": "https://syncthing.net/",
    "implemented": true,
    "logo": "https://syncthing.net/img/favicon.png",
    "options": [
      {
        "name": "all_proxy",
        "desc": "Overwrites the all_proxy environment variable for the Syncthing process to the given value. This is normally used to let Syncthing connect through a SOCKS5 proxy server. See https://docs.syncthing.net/users/proxying.html.",
        "nixName": "all_proxy",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "cert",
        "desc": "Path to the cert.pem file, which will be copied into Syncthing’s configDir.",
        "nixName": "cert",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "configDir",
        "desc": "The path where the settings and keys will exist.",
        "nixName": "configDir",
        "type": "path",
        "value": "config.services.syncthing.dataDir + \"/.config/syncthing\""
      },
      {
        "name": "dataDir",
        "desc": "The path where synchronised directories will exist.",
        "nixName": "dataDir",
        "type": "path",
        "value": "\"/var/lib/syncthing\""
      },
      {
        "name": "databaseDir",
        "desc": "The directory containing the database and logs.",
        "nixName": "databaseDir",
        "type": "path",
        "value": "config.services.syncthing.configDir"
      },
      {
        "name": "enable",
        "desc": "Whether to enable Syncthing, a self-hosted open-source alternative to Dropbox and Bittorrent Sync.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "extraFlags",
        "desc": "Extra flags passed to the syncthing command in the service definition.",
        "nixName": "extraFlags",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "group",
        "desc": "The group to run Syncthing under. By default, a group named syncthing will be created.",
        "nixName": "group",
        "type": "string",
        "value": "syncthing"
      },
      {
        "name": "guiAddress",
        "desc": "The address to serve the web interface at.",
        "nixName": "guiAddress",
        "type": "string",
        "value": "0.0.0.0:8384"
      },
      {
        "name": "key",
        "desc": "Path to the key.pem file, which will be copied into Syncthing’s configDir.",
        "nixName": "key",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "openDefaultPorts",
        "desc": "Whether to open the default ports in the firewall: TCP/UDP 22000 for transfers and UDP 21027 for discovery. If multiple users are running Syncthing on this machine, you will need to manually open a set of ports for each instance and leave this disabled. Alternatively, if you are running only a single instance on this machine using the default ports, enable this.",
        "nixName": "openDefaultPorts",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "overrideDevices",
        "desc": "Whether to delete the devices which are not configured via the devices option. If set to false, devices added via the web interface will persist and will have to be deleted manually.",
        "nixName": "overrideDevices",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "overrideFolders",
        "desc": "Whether to delete the folders which are not configured via the folders option. If set to false, folders added via the web interface will persist and will have to be deleted manually.",
        "nixName": "overrideFolders",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "relay.enable",
        "desc": "Whether to enable Syncthing relay service.",
        "nixName": "relay.enable",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "relay.extraOptions",
        "desc": "Extra command line arguments to pass to strelaysrv.",
        "nixName": "relay.extraOptions",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "relay.globalRateBps",
        "desc": "Global bandwidth rate limit in bytes per second.",
        "nixName": "relay.globalRateBps",
        "type": "null or (positive integer, meaning >0)",
        "value": "null"
      },
      {
        "name": "relay.listenAddress",
        "desc": "Address to listen on for relay traffic.",
        "nixName": "relay.listenAddress",
        "type": "string",
        "value": ""
      },
      {
        "name": "relay.perSessionRateBps",
        "desc": "Per session bandwidth rate limit in bytes per second.",
        "nixName": "relay.perSessionRateBps",
        "type": "null or (positive integer, meaning >0)",
        "value": "null"
      },
      {
        "name": "relay.pools",
        "desc": "Relay pools to join. If null, uses the default global pool.",
        "nixName": "relay.pools",
        "type": "null or (list of string)",
        "value": "null"
      },
      {
        "name": "relay.port",
        "desc": "Port to listen on for relay traffic. This port should be added to networking.firewall.allowedTCPPorts.",
        "nixName": "relay.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "22067"
      },
      {
        "name": "relay.providedBy",
        "desc": "Human-readable description of the provider of the relay (you).",
        "nixName": "relay.providedBy",
        "type": "string",
        "value": ""
      },
      {
        "name": "relay.statusListenAddress",
        "desc": "Address to listen on for serving the relay status API.",
        "nixName": "relay.statusListenAddress",
        "type": "string",
        "value": ""
      },
      {
        "name": "relay.statusPort",
        "desc": "Port to listen on for serving the relay status API. This port should be added to networking.firewall.allowedTCPPorts.",
        "nixName": "relay.statusPort",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "22070"
      },
      {
        "name": "settings.options.limitBandwidthInLan",
        "desc": "Whether to apply bandwidth limits to devices in the same broadcast domain as the local device.",
        "nixName": "settings.options.limitBandwidthInLan",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "settings.options.localAnnounceEnabled",
        "desc": "Whether to send announcements to the local LAN, also use such announcements to find other devices.",
        "nixName": "settings.options.localAnnounceEnabled",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "settings.options.localAnnouncePort",
        "desc": "The port on which to listen and send IPv4 broadcast announcements to.",
        "nixName": "settings.options.localAnnouncePort",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "settings.options.maxFolderConcurrency",
        "desc": "This option controls how many folders may concurrently be in I/O-intensive operations such as syncing or scanning. The mechanism is described in detail in a separate chapter.",
        "nixName": "settings.options.maxFolderConcurrency",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "settings.options.relaysEnabled",
        "desc": "When true, relays will be connected to and potentially used for device to device connections.",
        "nixName": "settings.options.relaysEnabled",
        "type": "null or boolean",
        "value": "null"
      },
      {
        "name": "settings.options.urAccepted",
        "desc": "Whether the user has accepted to submit anonymous usage data. The default, 0, mean the user has not made a choice, and Syncthing will ask at some point in the future. “-1” means no, a number above zero means that that version of usage reporting has been accepted.",
        "nixName": "settings.options.urAccepted",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "systemService",
        "desc": "Whether to auto-launch Syncthing as a system service.",
        "nixName": "systemService",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "user",
        "desc": "The user to run Syncthing as. By default, a user named syncthing will be created whose home directory is dataDir.",
        "nixName": "user",
        "type": "string",
        "value": "syncthing"
      },
      {
        "name": "openFirewall",
        "desc": "Whether to open ports in the firewall for this application.",
        "nixName": "openFirewall",
        "type": "boolean",
        "value": "true"
      }
    ]
  },
  {
    "name": "tarsnap",
    "desc": "Deploy Tarsnap to create a secure and efficient online backup solution. Tarsnap offers an encrypted backup service designed for users who prioritize privacy and data security.",
    "longDesc": "Tarsnap is an online backup service specifically tailored for UNIX-like operating systems (including Linux, BSD, and macOS). It employs strong encryption to ensure that only users with the correct keys can access their backed-up data.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Tarsnap using Docker or similar tools for a quick installation process.\n- **Scalability:** Efficiently handles backups for multiple machines and large datasets, making it suitable for both personal and enterprise use.\n- **Privacy and Security:** All data is encrypted before it leaves the user’s system, ensuring that Tarsnap itself cannot access users' data.\n- **Cost-Effective Storage:** Tarsnap charges based on actual storage and bandwidth usage, allowing users to pay only for what they consume.\n- **Data Deduplication:** Only unique data is uploaded and stored, minimizing bandwidth and storage costs.",
    "useCases": "- **Individuals:** Securely back up personal files and ensure data recovery in case of system failure or data loss.\n- **Businesses:** Use Tarsnap for enterprise-level data protection, ensuring compliance with data security regulations.\n- **Developers:** Automate backups of code repositories and project files to safeguard against data loss.",
    "support": "- **Community Forums:** Engage with the Tarsnap community for support through the [Tarsnap GitHub Repository](https://github.com/erikdejonge/tarsnap).\n- **Documentation:** Comprehensive guides and setup instructions are available at the [Tarsnap Documentation](https://www.tarsnap.com/).\n- **Troubleshooting Help:** Access the [Tarsnap FAQs](https://www.tarsnap.com/faq.html) and GitHub Issues for community-contributed solutions and to report any bugs.\n\nThis template provides a clear overview of Tarsnap’s functionalities and practical applications, emphasizing its importance in data security and backup. For more detailed information, visit the [official Tarsnap website](https://www.tarsnap.com/).",
    "nixName": "tarsnap",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "http://www.tarsnap.com/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "archives",
        "desc": "Tarsnap archive configurations. Each attribute names an archive to be created at a given time interval, according to the options associated with it. When uploading to the tarsnap server, archive names are suffixed by a 1 second resolution timestamp, with the format %Y%m%d%H%M%S. For each member of the set is created a timer which triggers the instanced tarsnap-archive-name service unit. You may use systemctl start tarsnap-archive-name to manually trigger creation of archive-name at any time.",
        "nixName": "archives",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "archives.<name>.aggressiveNetworking",
        "desc": "Upload data over multiple TCP connections, potentially increasing tarsnap’s bandwidth utilisation at the cost of slowing down all other network traffic. Not recommended unless TCP congestion is the dominant limiting factor.",
        "nixName": "archives.<name>.aggressiveNetworking",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "archives.<name>.cachedir",
        "desc": "The cache allows tarsnap to identify previously stored data blocks, reducing archival time and bandwidth usage. Should the cache become desynchronized or corrupted, tarsnap will refuse to run until you manually rebuild the cache with tarsnap --fsck. Set to null to disable caching.",
        "nixName": "archives.<name>.cachedir",
        "type": "null or path",
        "value": "\"/var/cache/tarsnap/${utils.escapeSystemdPath config.services.tarsnap.archives.<name>.keyfile}\"\n"
      },
      {
        "name": "archives.<name>.checkpointBytes",
        "desc": "Create a checkpoint every checkpointBytes of uploaded data (optionally specified using an SI prefix). 1GB is the minimum value. A higher value is recommended, as checkpointing is expensive. Set to null to disable checkpointing.",
        "nixName": "archives.<name>.checkpointBytes",
        "type": "null or string",
        "value": "\"1GB\""
      },
      {
        "name": "archives.<name>.directories",
        "desc": "List of filesystem paths to archive.",
        "nixName": "archives.<name>.directories",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "archives.<name>.excludes",
        "desc": "Exclude files and directories matching these patterns.",
        "nixName": "archives.<name>.excludes",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "archives.<name>.explicitSymlinks",
        "desc": "Whether to follow symlinks specified as archives.",
        "nixName": "archives.<name>.explicitSymlinks",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "archives.<name>.followSymlinks",
        "desc": "Whether to follow all symlinks in archive trees.",
        "nixName": "archives.<name>.followSymlinks",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "archives.<name>.includes",
        "desc": "Include only files and directories matching these patterns (the empty list includes everything). Exclusions have precedence over inclusions.",
        "nixName": "archives.<name>.includes",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "archives.<name>.keyfile",
        "desc": "Set a specific keyfile for this archive. This defaults to /root/tarsnap.key if left unspecified. Use this option if you want to run multiple backups concurrently - each archive must have a unique key. You can generate a write-only key derived from your master key (which is recommended) using tarsnap-keymgmt(1). Note: every archive must have an individual master key. You must generate multiple keys with tarsnap-keygen(1), and then generate write only keys from those. The keyfile name should be given as a string and not a path, to avoid the key being copied into the Nix store.",
        "nixName": "archives.<name>.keyfile",
        "type": "string",
        "value": "config.services.tarsnap.keyfile"
      },
      {
        "name": "archives.<name>.lowmem",
        "desc": "Reduce memory consumption by not caching small files. Possibly beneficial if the average file size is smaller than 1 MB and the number of files is lower than the total amount of RAM in KB.",
        "nixName": "archives.<name>.lowmem",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "archives.<name>.maxbw",
        "desc": "Abort archival if upstream bandwidth usage in bytes exceeds this threshold.",
        "nixName": "archives.<name>.maxbw",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "archives.<name>.maxbwRateDown",
        "desc": "Download bandwidth rate limit in bytes.",
        "nixName": "archives.<name>.maxbwRateDown",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "archives.<name>.maxbwRateUp",
        "desc": "Upload bandwidth rate limit in bytes.",
        "nixName": "archives.<name>.maxbwRateUp",
        "type": "null or signed integer",
        "value": "null"
      },
      {
        "name": "archives.<name>.nodump",
        "desc": "Exclude files with the nodump flag.",
        "nixName": "archives.<name>.nodump",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "archives.<name>.period",
        "desc": "Create archive at this interval. The format is described in systemd.time(7).",
        "nixName": "archives.<name>.period",
        "type": "string",
        "value": "01:15"
      },
      {
        "name": "archives.<name>.printStats",
        "desc": "Print global archive statistics upon completion. The output is available via systemctl status tarsnap-archive-name.",
        "nixName": "archives.<name>.printStats",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "archives.<name>.verbose",
        "desc": "Whether to produce verbose logging output.",
        "nixName": "archives.<name>.verbose",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "archives.<name>.verylowmem",
        "desc": "Reduce memory consumption by a factor of 2 beyond what lowmem does, at the cost of significantly slowing down the archiving process.",
        "nixName": "archives.<name>.verylowmem",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "enable",
        "desc": "Whether to enable periodic tarsnap backups.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "keyfile",
        "desc": "The keyfile which associates this machine with your tarsnap account. Create the keyfile with tarsnap-keygen. Note that each individual archive (specified below) may also have its own individual keyfile specified. Tarsnap does not allow multiple concurrent backups with the same cache directory and key (starting a new backup will cause another one to fail). If you have multiple archives specified, you should either spread out your backups to be far apart, or specify a separate key for each archive. By default every archive defaults to using /root/tarsnap.key. It’s recommended for backups that you generate a key for every archive using tarsnap-keygen(1), and then generate a write-only tarsnap key using tarsnap-keymgmt(1), and keep your master key(s) for a particular machine off-site. The keyfile name should be given as a string and not a path, to avoid the key being copied into the Nix store.",
        "nixName": "keyfile",
        "type": "string",
        "value": "/root/tarsnap.key"
      },
      {
        "name": "package",
        "desc": "The tarsnap package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.tarsnap"
      }
    ]
  },
  {
    "name": "Taskwarrior",
    "desc": "Deploy Taskwarrior with a straightforward setup to manage tasks and projects efficiently. Taskwarrior is an open-source task management software that enables users to track their tasks and organize their workflow effectively.",
    "longDesc": "Taskwarrior is a command-line task management application designed for tracking and managing tasks in a highly flexible manner. It allows users to create, modify, and categorize tasks, helping them stay organized and productive.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Taskwarrior using Docker or other containerization tools for quick setup.\n- **Scalability:** Designed to handle a large number of tasks and projects, making it suitable for both personal and professional use.\n- **Privacy:** Data is stored locally, allowing users to maintain control over their task information.\n- **API Compatibility:** Provides a JSON API for integrating with other applications, enhancing functionality and automation.\n- **Customizable Task Management:** Supports tags, priorities, due dates, and dependencies, allowing for personalized task organization.",
    "useCases": "- **Developers:** Track development tasks and manage project timelines efficiently.\n- **Enterprises:** Implement Taskwarrior to streamline project management and improve team productivity.\n- **Educators:** Use Taskwarrior to teach students about time management and task prioritization.",
    "support": "- **Community Forums:** Engage with the Taskwarrior community for support and discussions through the [Taskwarrior GitHub Repository](https://github.com/GothenburgBitFactory/taskwarrior).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Taskwarrior Documentation](https://taskwarrior.org/docs/) for in-depth reference.\n- **Troubleshooting Help:** Access the issues section on GitHub for reporting bugs and seeking community-contributed solutions.\n\nThis template provides an overview of Taskwarrior’s functionalities and practical applications, highlighting its importance for effective task management. For more detailed information, visit the [official Taskwarrior GitHub page](https://github.com/GothenburgBitFactory/taskwarrior).",
    "tags": [
      "Task Management & To-do Lists"
    ],
    "website": "https://taskwarrior.org",
    "implemented": false,
    "logo": "https://taskwarrior.org/images/favicon.ico",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "nixName": "taskwarrior",
    "options": [
      {
        "name": "misc/taskserver",
        "desc": "Whether to enable the Taskwarrior server.More instructions about NixOS in conjunction with Taskserver can befound inthe NixOS manual.",
        "nixName": "relatedOption.taskserver.enable",
        "type": "boolean",
        "value": "false"
      }
    ]
  },
  {
    "name": "Tinyproxy",
    "desc": "Deploy Tinyproxy with a streamlined setup to create a lightweight HTTP/HTTPS proxy server. Tinyproxy allows users to route their internet traffic through a proxy, providing privacy, filtering capabilities, and access to restricted content.",
    "longDesc": "Tinyproxy is an open-source, lightweight proxy server designed to be simple and fast. It enables users to bypass internet restrictions, improve privacy, and control web traffic. Tinyproxy supports both HTTP and HTTPS protocols.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Tinyproxy using Docker or other container orchestration tools for quick setup.\n- **Scalability:** Suitable for small to medium-sized environments, supporting multiple concurrent connections.\n- **Privacy and Security:** Masks users' IP addresses, enhancing privacy while browsing the internet.\n- **Customizable Configuration:** Offers extensive configuration options for fine-tuning proxy settings and behavior.\n- **Access Control:** Provides features for managing which clients can use the proxy, improving security.",
    "useCases": "- **Individuals:** Route internet traffic through Tinyproxy for enhanced privacy and access to geo-restricted content.\n- **Businesses:** Implement Tinyproxy to manage and filter employee internet usage and protect sensitive data.\n- **Educators:** Teach network concepts and the workings of proxy servers in computer networking courses.",
    "support": "- **Community Forums:** Connect with the Tinyproxy community for assistance and discussions through the [Tinyproxy GitHub Repository](https://github.com/tinyproxy/tinyproxy).\n- **Documentation:** Comprehensive guides and configuration instructions are available in the [Tinyproxy Documentation](https://tinyproxy.github.io/) for user reference.\n- **Troubleshooting Help:** Access the issues section on GitHub for community-contributed solutions and to report any bugs or feature requests.\n\nThis template provides a clear overview of Tinyproxy’s functionalities and practical applications, emphasizing its importance in managing internet traffic securely. For more detailed information, visit the [official Tinyproxy GitHub page](https://github.com/tinyproxy/tinyproxy).",
    "nixName": "tinyproxy",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Proxy"
    ],
    "website": "https://tinyproxy.github.io/",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "enable",
        "desc": "Whether to enable Tinyproxy daemon.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "The tinyproxy package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.tinyproxy"
      },
      {
        "name": "settings",
        "desc": "Configuration for tinyproxy.",
        "nixName": "settings",
        "type": "attribute set of (atom (null, bool, int, float or string) or a list of them for duplicate keys)",
        "value": "{ }"
      },
      {
        "name": "settings.Anonymous",
        "desc": "If an Anonymous keyword is present, then anonymous proxying is enabled. The headers listed with Anonymous are allowed through, while all others are denied. If no Anonymous keyword is present, then all headers are allowed through. You must include quotes around the headers.",
        "nixName": "settings.Anonymous",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "settings.Filter",
        "desc": "Tinyproxy supports filtering of web sites based on URLs or domains. This option specifies the location of the file containing the filter rules, one rule per line.",
        "nixName": "settings.Filter",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "settings.Listen",
        "desc": "Specify which address to listen to.",
        "nixName": "settings.Listen",
        "type": "string",
        "value": "127.0.0.1"
      },
      {
        "name": "settings.Port",
        "desc": "Specify which port to listen to.",
        "nixName": "settings.Port",
        "type": "signed integer",
        "value": "8888"
      }
    ]
  },
  {
    "name": "Typesense",
    "desc": "Deploy Typesense to create a fast, open-source search engine designed for instant and relevant results. Typesense is optimized for speed and ease of use, making it ideal for applications that require search functionality.",
    "longDesc": "Typesense is a modern, open-source search engine that focuses on delivering an easy-to-use API for creating powerful search experiences. It is designed to provide relevant search results quickly, with a strong emphasis on performance and developer-friendliness.\n\n**Key Features:**\n- **One-Click Deployment:** Easily set up Typesense using Docker or other containerization methods for straightforward installation.\n- **Scalability:** Capable of handling large datasets and high query volumes, making it suitable for applications ranging from small websites to large enterprise platforms.\n- **Privacy and Security:** Operates locally or on private servers, ensuring that data remains secure and user privacy is protected.\n- **API Compatibility:** Offers a simple RESTful API that allows easy integration into various applications and services.\n- **Faceted Search:** Supports advanced features like faceted search, typo tolerance, and synonyms, enhancing user search experiences.",
    "useCases": "- **Developers:** Integrate Typesense into web applications to provide fast and relevant search results, improving user experience.\n- **E-commerce Platforms:** Use Typesense to power product search and filtering features, enabling customers to find products quickly.\n- **Content Management Systems:** Implement Typesense to enhance search functionality in blogs, documentation sites, or knowledge bases.",
    "support": "- **Community Forums:** Engage with the Typesense community for support and discussions through the [Typesense GitHub Repository](https://github.com/typesense/typesense).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Typesense Documentation](https://typesense.org/) for detailed reference on setup and usage.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Typesense’s functionalities and practical applications, emphasizing its role in creating efficient search experiences. For more detailed information, visit the [official Typesense website](https://typesense.org/).",
    "nixName": "typesense",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [
      "Search Engines"
    ],
    "website": "https://typesense.org",
    "implemented": false,
    "logo": "https://typesense.org/favicon.png",
    "options": [
      {
        "name": "apiKeyFile",
        "desc": "Sets the admin api key for typesense. Always use this option instead of settings.server.api-key to prevent the key from being written to the world-readable nix store.",
        "nixName": "apiKeyFile",
        "type": "path",
        "value": ""
      },
      {
        "name": "enable",
        "desc": "Whether to enable typesense.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "package",
        "desc": "The typesense package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.typesense"
      },
      {
        "name": "settings",
        "desc": "Typesense configuration. Refer to the documentation for supported values.",
        "nixName": "settings",
        "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)",
        "value": "{ }"
      },
      {
        "name": "settings.server.api-address",
        "desc": "Address to which Typesense API service binds.",
        "nixName": "settings.server.api-address",
        "type": "string",
        "value": ""
      },
      {
        "name": "settings.server.api-port",
        "desc": "Port on which the Typesense API service listens.",
        "nixName": "settings.server.api-port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "8108"
      },
      {
        "name": "settings.server.data-dir",
        "desc": "Path to the directory where data will be stored on disk.",
        "nixName": "settings.server.data-dir",
        "type": "string",
        "value": "/var/lib/typesense"
      }
    ]
  },
  {
    "name": "vaultwarden",
    "desc": "Deploy Vaultwarden to create a self-hosted password manager that securely stores and manages user credentials. Vaultwarden is an efficient alternative to Bitwarden, designed for users who want to maintain control over their password data.",
    "longDesc": "Vaultwarden is an open-source implementation of the Bitwarden API, providing a lightweight server to host your own password manager. It allows users to store, share, and manage passwords and sensitive information securely.\n\n**Key Features:**\n- **One-Click Deployment:** Easily deploy Vaultwarden using Docker, which simplifies the installation and setup process.\n- **Scalability:** Suitable for personal use or larger teams, handling numerous users and passwords efficiently.\n- **Privacy and Security:** Users retain complete control over their data, with end-to-end encryption ensuring that sensitive information remains secure.\n- **API Compatibility:** Fully compatible with the official Bitwarden client apps, allowing for seamless integration and use across various devices.\n- **Web Vault and Extensions:** Offers a web-based interface and browser extensions for easy access to stored passwords.",
    "useCases": "- **Individuals:** Manage personal passwords securely without relying on third-party services.\n- **Small Businesses:** Implement Vaultwarden for team members to share credentials safely and effectively.\n- **Developers:** Integrate Vaultwarden into applications that require secure credential management and access control.",
    "support": "- **Community Forums:** Engage with the Vaultwarden community for support and discussions through the [Vaultwarden GitHub Repository](https://github.com/dani-garcia/vaultwarden) and [Guerzon’s Vaultwarden](https://github.com/guerzon/vaultwarden).\n- **Documentation:** Comprehensive guides and user manuals are available at the [Vaultwarden Documentation](https://github.com/dani-garcia/vaultwarden) for detailed reference on setup and configuration.\n- **Troubleshooting Help:** Access the issues section on GitHub to report bugs and find community-contributed solutions.\n\nThis template provides an overview of Vaultwarden’s functionalities and practical applications, emphasizing its role in secure password management. For more detailed information, visit the [official Vaultwarden GitHub page](https://github.com/dani-garcia/vaultwarden).",
    "nixName": "vaultwarden",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://github.com/dani-garcia/vaultwarden",
    "implemented": false,
    "logo": "",
    "options": [
      {
        "name": "backupDir",
        "desc": "The directory under which vaultwarden will backup its persistent data.",
        "nixName": "backupDir",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "config",
        "desc": "The configuration of vaultwarden is done through environment variables, therefore it is recommended to use upper snake case (e.g. DISABLE_2FA_REMEMBER). However, camel case (e.g. disable2FARemember) is also supported: The NixOS module will convert it automatically to upper case snake case (e.g. DISABLE_2FA_REMEMBER). In this conversion digits (0-9) are handled just like upper case characters, so foo2 would be converted to FOO_2. Names already in this format remain unchanged, so FOO2 remains FOO2 if passed as such, even though foo2 would have been converted to FOO_2. This allows working around any potential future conflicting naming conventions. Based on the attributes passed to this config option an environment file will be generated that is passed to vaultwarden’s systemd service. The available configuration options can be found in the environment template file. See services.vaultwarden.environmentFile for how to set up access to the Admin UI to invite initial users.",
        "nixName": "config",
        "type": "attribute set of (null or boolean or signed integer or string)",
        "value": "{\n  ROCKET_ADDRESS = \"::1\";\n  ROCKET_PORT = 8222;\n}"
      },
      {
        "name": "dbBackend",
        "desc": "Which database backend vaultwarden will be using.",
        "nixName": "dbBackend",
        "type": "one of \"sqlite\", \"mysql\", \"postgresql\"",
        "value": "\"sqlite\""
      },
      {
        "name": "enable",
        "desc": "Whether to enable vaultwarden.",
        "nixName": "enable",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "environmentFile",
        "desc": "Additional environment file as defined in systemd.exec(5). Secrets like ADMIN_TOKEN and SMTP_PASSWORD should be passed to the service without adding them to the world-readable Nix store. Note that this file needs to be available on the host on which vaultwarden is running. As a concrete example, to make the Admin UI available (from which new users can be invited initially), the secret ADMIN_TOKEN needs to be defined as described here: # Admin secret token, see # https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page ADMIN_TOKEN=...copy-paste a unique generated secret token here...",
        "nixName": "environmentFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "package",
        "desc": "The vaultwarden package to use.",
        "nixName": "package",
        "type": "package",
        "value": "pkgs.vaultwarden"
      },
      {
        "name": "webVaultPackage",
        "desc": "Web vault package to use.",
        "nixName": "webVaultPackage",
        "type": "package",
        "value": "pkgs.vaultwarden.webvault"
      }
    ]
  },
  {
    "name": "wordpress",
    "desc": "Deploy WordPress to create a powerful and flexible content management system (CMS) that allows users to build and manage websites with ease. WordPress is widely used for blogging, e-commerce, portfolios, and more, thanks to its extensive themes and plugins.",
    "longDesc": "WordPress is an open-source CMS that enables users to create and manage websites without needing extensive technical knowledge. It is highly customizable and supports a wide range of functionalities through themes and plugins.\n\n**Key Features:**\n- **One-Click Deployment:** Quickly set up WordPress using various hosting providers that offer one-click installation options, or deploy using Docker for a more customized setup.\n- **Scalability:** Suitable for small personal blogs as well as large enterprise websites, handling high traffic and extensive content management needs.\n- **Privacy and Security:** Provides built-in security features, and users can enhance security further with plugins and best practices.\n- **API Compatibility:** Supports REST API, enabling developers to integrate with other applications and create custom solutions.\n- **Extensive Customization:** Offers thousands of themes and plugins, allowing users to create unique websites tailored to their needs.",
    "useCases": "- **Bloggers:** Use WordPress to create and manage personal or professional blogs with ease.\n- **Businesses:** Implement WordPress for corporate websites, showcasing services and products, and enhancing online presence.\n- **Educators:** Create educational platforms or e-learning sites, providing resources and materials in an organized manner.",
    "support": "- **Community Forums:** Engage with the WordPress community for support and discussions through the [WordPress Support Forums](https://wordpress.org/support/forums/).\n- **Documentation:** Comprehensive guides and user manuals are available at the [WordPress Codex](https://codex.wordpress.org/) and the [WordPress Developer Documentation](https://developer.wordpress.org/) for detailed reference.\n- **Troubleshooting Help:** Access the issues section on the [WordPress GitHub Repository](https://github.com/WordPress/WordPress) to report bugs and find community-contributed solutions.\n This template provides an overview of WordPress’s functionalities and practical applications, emphasizing its role as a leading CMS for website creation and management. For more detailed information, visit the official [WordPress website.](https://wordpress.org/)​ ",
    "nixName": "wordpress",
    "specs": {
      "ram": 0,
      "storage": 0
    },
    "tags": [],
    "website": "https://wordpress.org",
    "implemented": false,
    "logo": "https://s.w.org/style/images/about/WordPress-logotype-wmark.png",
    "options": [
      {
        "name": "sites",
        "desc": "Specification of one or more WordPress sites to serve",
        "nixName": "sites",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "sites.<name>.database.createLocally",
        "desc": "Create the database and database user locally.",
        "nixName": "sites.<name>.database.createLocally",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "sites.<name>.database.host",
        "desc": "Database host address.",
        "nixName": "sites.<name>.database.host",
        "type": "string",
        "value": "localhost"
      },
      {
        "name": "sites.<name>.database.name",
        "desc": "Database name.",
        "nixName": "sites.<name>.database.name",
        "type": "string",
        "value": "wordpress"
      },
      {
        "name": "sites.<name>.database.passwordFile",
        "desc": "A file containing the password corresponding to database.user.",
        "nixName": "sites.<name>.database.passwordFile",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "sites.<name>.database.port",
        "desc": "Database host port.",
        "nixName": "sites.<name>.database.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": "3306"
      },
      {
        "name": "sites.<name>.database.socket",
        "desc": "Path to the unix socket file to use for authentication.",
        "nixName": "sites.<name>.database.socket",
        "type": "null or path",
        "value": "/run/mysqld/mysqld.sock"
      },
      {
        "name": "sites.<name>.database.tablePrefix",
        "desc": "The $table_prefix is the value placed in the front of your database tables. Change the value if you want to use something other than wp_ for your database prefix. Typically this is changed if you are installing multiple WordPress blogs in the same database. See https://codex.wordpress.org/Editing_wp-config.php#table_prefix.",
        "nixName": "sites.<name>.database.tablePrefix",
        "type": "string",
        "value": "wp_"
      },
      {
        "name": "sites.<name>.database.user",
        "desc": "Database user.",
        "nixName": "sites.<name>.database.user",
        "type": "string",
        "value": "wordpress"
      },
      {
        "name": "sites.<name>.extraConfig",
        "desc": "Any additional text to be appended to the wp-config.php configuration file. This is a PHP script. For configuration settings, see https://codex.wordpress.org/Editing_wp-config.php. Note: Please pass structured settings via services.wordpress.sites.‹name›.settings instead.",
        "nixName": "sites.<name>.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "sites.<name>.fontsDir",
        "desc": "This directory is used to download fonts from a remote location, e.g. to host google fonts locally.",
        "nixName": "sites.<name>.fontsDir",
        "type": "path",
        "value": "\"/var/lib/wordpress/‹name›/fonts\""
      },
      {
        "name": "sites.<name>.languages",
        "desc": "List of path(s) to respective language(s) which are copied from the ‘languages’ directory.",
        "nixName": "sites.<name>.languages",
        "type": "list of path",
        "value": "[ ]"
      },
      {
        "name": "sites.<name>.mergedConfig",
        "desc": "Read only representation of the final configuration.",
        "nixName": "sites.<name>.mergedConfig",
        "type": "unspecified value",
        "value": "{\n  DISALLOW_FILE_EDIT = true;\n  AUTOMATIC_UPDATER_DISABLED = true;\n}\n"
      },
      {
        "name": "sites.<name>.package",
        "desc": "The wordpress package to use.",
        "nixName": "sites.<name>.package",
        "type": "package",
        "value": "pkgs.wordpress"
      },
      {
        "name": "sites.<name>.plugins",
        "desc": "Path(s) to respective plugin(s) which are copied from the ‘plugins’ directory.  These plugins need to be packaged before use, see example.",
        "nixName": "sites.<name>.plugins",
        "type": "(attribute set of path) or (list of path) convertible to it",
        "value": "{ }"
      },
      {
        "name": "sites.<name>.poolConfig",
        "desc": "Options for the WordPress PHP pool. See the documentation on php-fpm.conf for details on configuration directives.",
        "nixName": "sites.<name>.poolConfig",
        "type": "attribute set of (string or signed integer or boolean)",
        "value": "{\n  pm = \"dynamic\";\n  \"pm.max_children\" = 32;\n  \"pm.max_requests\" = 500;\n  \"pm.max_spare_servers\" = 4;\n  \"pm.min_spare_servers\" = 2;\n  \"pm.start_servers\" = 2;\n}"
      },
      {
        "name": "sites.<name>.settings",
        "desc": "Structural Wordpress configuration. Refer to https://developer.wordpress.org/apis/wp-config-php for details and supported values.",
        "nixName": "sites.<name>.settings",
        "type": "attribute set of anything",
        "value": "{ }"
      },
      {
        "name": "sites.<name>.themes",
        "desc": "Path(s) to respective theme(s) which are copied from the ‘theme’ directory.  These themes need to be packaged before use, see example.",
        "nixName": "sites.<name>.themes",
        "type": "(attribute set of path) or (list of path) convertible to it",
        "value": "{ inherit (pkgs.wordpressPackages.themes) twentytwentythree; }"
      },
      {
        "name": "sites.<name>.uploadsDir",
        "desc": "This directory is used for uploads of pictures. The directory passed here is automatically created and permissions adjusted as required.",
        "nixName": "sites.<name>.uploadsDir",
        "type": "path",
        "value": "\"/var/lib/wordpress/‹name›/uploads\""
      },
      {
        "name": "sites.<name>.virtualHost",
        "desc": "Apache configuration can be done by adapting services.httpd.virtualHosts.",
        "nixName": "sites.<name>.virtualHost",
        "type": "submodule",
        "value": ""
      },
      {
        "name": "sites.<name>.virtualHost.acmeRoot",
        "desc": "Directory for the acme challenge which is PUBLIC, don’t put certs or keys in here. Set to null to inherit from config.security.acme.",
        "nixName": "sites.<name>.virtualHost.acmeRoot",
        "type": "null or string",
        "value": "\"/var/lib/acme/acme-challenge\""
      },
      {
        "name": "sites.<name>.virtualHost.addSSL",
        "desc": "Whether to enable HTTPS in addition to plain HTTP. This will set defaults for listen to listen on all interfaces on the respective default ports (80, 443).",
        "nixName": "sites.<name>.virtualHost.addSSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.adminAddr",
        "desc": "E-mail address of the server administrator.",
        "nixName": "sites.<name>.virtualHost.adminAddr",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.documentRoot",
        "desc": "The path of Apache’s document root directory. If left undefined, an empty directory in the Nix store will be used as root.",
        "nixName": "sites.<name>.virtualHost.documentRoot",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.enableACME",
        "desc": "Whether to ask Let’s Encrypt to sign a certificate for this vhost. Alternately, you can use an existing certificate through useACMEHost.",
        "nixName": "sites.<name>.virtualHost.enableACME",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.enableUserDir",
        "desc": "Whether to enable serving ~/public_html as /~«username».",
        "nixName": "sites.<name>.virtualHost.enableUserDir",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.extraConfig",
        "desc": "These lines go to httpd.conf verbatim. They will go after directories and directory aliases defined by default.",
        "nixName": "sites.<name>.virtualHost.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "sites.<name>.virtualHost.forceSSL",
        "desc": "Whether to add a separate nginx server block that permanently redirects (301) all plain HTTP traffic to HTTPS. This will set defaults for listen to listen on all interfaces on the respective default ports (80, 443), where the non-SSL listens are used for the redirect vhosts.",
        "nixName": "sites.<name>.virtualHost.forceSSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.globalRedirect",
        "desc": "If set, all requests for this host are redirected permanently to the given URL.",
        "nixName": "sites.<name>.virtualHost.globalRedirect",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.hostName",
        "desc": "Canonical hostname for the server.",
        "nixName": "sites.<name>.virtualHost.hostName",
        "type": "string",
        "value": "‹name›"
      },
      {
        "name": "sites.<name>.virtualHost.http2",
        "desc": "Whether to enable HTTP 2. HTTP/2 is supported in all multi-processing modules that come with httpd. However, if you use the prefork mpm, there will be severe restrictions. Refer to https://httpd.apache.org/docs/2.4/howto/http2.html#mpm-config for details.",
        "nixName": "sites.<name>.virtualHost.http2",
        "type": "boolean",
        "value": "true"
      },
      {
        "name": "sites.<name>.virtualHost.listen",
        "desc": "Listen addresses and ports for this virtual host.  This option overrides addSSL, forceSSL and onlySSL. If you only want to set the addresses manually and not the ports, take a look at listenAddresses.",
        "nixName": "sites.<name>.virtualHost.listen",
        "type": "list of (submodule)",
        "value": "[ ]"
      },
      {
        "name": "sites.<name>.virtualHost.listen.*.ip",
        "desc": "IP to listen on. 0.0.0.0 for IPv4 only, * for all.",
        "nixName": "sites.<name>.virtualHost.listen.*.ip",
        "type": "string",
        "value": "*"
      },
      {
        "name": "sites.<name>.virtualHost.listen.*.port",
        "desc": "Port to listen on",
        "nixName": "sites.<name>.virtualHost.listen.*.port",
        "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
        "value": ""
      },
      {
        "name": "sites.<name>.virtualHost.listen.*.ssl",
        "desc": "Whether to enable SSL (https) support.",
        "nixName": "sites.<name>.virtualHost.listen.*.ssl",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.listenAddresses",
        "desc": "Listen addresses for this virtual host. Compared to listen this only sets the addresses and the ports are chosen automatically.",
        "nixName": "sites.<name>.virtualHost.listenAddresses",
        "type": "non-empty (list of string)",
        "value": "[\n  \"*\"\n]"
      },
      {
        "name": "sites.<name>.virtualHost.locations",
        "desc": "Declarative location config. See https://httpd.apache.org/docs/2.4/mod/core.html#location for details.",
        "nixName": "sites.<name>.virtualHost.locations",
        "type": "attribute set of (submodule)",
        "value": "{ }"
      },
      {
        "name": "sites.<name>.virtualHost.locations.<name>.alias",
        "desc": "Alias directory for requests. See https://httpd.apache.org/docs/2.4/mod/mod_alias.html#alias.",
        "nixName": "sites.<name>.virtualHost.locations.<name>.alias",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.locations.<name>.extraConfig",
        "desc": "These lines go to the end of the location verbatim.",
        "nixName": "sites.<name>.virtualHost.locations.<name>.extraConfig",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "sites.<name>.virtualHost.locations.<name>.index",
        "desc": "Adds DirectoryIndex directive. See https://httpd.apache.org/docs/2.4/mod/mod_dir.html#directoryindex.",
        "nixName": "sites.<name>.virtualHost.locations.<name>.index",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.locations.<name>.priority",
        "desc": "Order of this location block in relation to the others in the vhost. The semantics are the same as with lib.mkOrder. Smaller values have a greater priority.",
        "nixName": "sites.<name>.virtualHost.locations.<name>.priority",
        "type": "signed integer",
        "value": "1000"
      },
      {
        "name": "sites.<name>.virtualHost.locations.<name>.proxyPass",
        "desc": "Sets up a simple reverse proxy as described by https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html#simple.",
        "nixName": "sites.<name>.virtualHost.locations.<name>.proxyPass",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.logFormat",
        "desc": "Log format for Apache’s log files. Possible values are: combined, common, referer, agent.",
        "nixName": "sites.<name>.virtualHost.logFormat",
        "type": "string",
        "value": "common"
      },
      {
        "name": "sites.<name>.virtualHost.onlySSL",
        "desc": "Whether to enable HTTPS and reject plain HTTP connections. This will set defaults for listen to listen on all interfaces on port 443.",
        "nixName": "sites.<name>.virtualHost.onlySSL",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "sites.<name>.virtualHost.robotsEntries",
        "desc": "Specification of pages to be ignored by web crawlers. See http://www.robotstxt.org/ for details.",
        "nixName": "sites.<name>.virtualHost.robotsEntries",
        "type": "strings concatenated with \"\\n\"",
        "value": "\"\""
      },
      {
        "name": "sites.<name>.virtualHost.servedDirs",
        "desc": "This option provides a simple way to serve static directories.",
        "nixName": "sites.<name>.virtualHost.servedDirs",
        "type": "list of (attribute set)",
        "value": "[ ]"
      },
      {
        "name": "sites.<name>.virtualHost.servedFiles",
        "desc": "This option provides a simple way to serve individual, static files.  This option has been deprecated and will be removed in a future version of NixOS. You can achieve the same result by making use of the locations.<name>.alias option.",
        "nixName": "sites.<name>.virtualHost.servedFiles",
        "type": "list of (attribute set)",
        "value": "[ ]"
      },
      {
        "name": "sites.<name>.virtualHost.serverAliases",
        "desc": "Additional names of virtual hosts served by this virtual host configuration.",
        "nixName": "sites.<name>.virtualHost.serverAliases",
        "type": "list of string",
        "value": "[ ]"
      },
      {
        "name": "sites.<name>.virtualHost.sslServerCert",
        "desc": "Path to server SSL certificate.",
        "nixName": "sites.<name>.virtualHost.sslServerCert",
        "type": "path",
        "value": ""
      },
      {
        "name": "sites.<name>.virtualHost.sslServerChain",
        "desc": "Path to server SSL chain file.",
        "nixName": "sites.<name>.virtualHost.sslServerChain",
        "type": "null or path",
        "value": "null"
      },
      {
        "name": "sites.<name>.virtualHost.sslServerKey",
        "desc": "Path to server SSL certificate key.",
        "nixName": "sites.<name>.virtualHost.sslServerKey",
        "type": "path",
        "value": ""
      },
      {
        "name": "sites.<name>.virtualHost.useACMEHost",
        "desc": "A host of an existing Let’s Encrypt certificate to use. This is useful if you have many subdomains and want to avoid hitting the rate limit. Alternately, you can generate a certificate through enableACME. Note that this option does not create any certificates, nor it does add subdomains to existing ones – you will need to create them manually using security.acme.certs.",
        "nixName": "sites.<name>.virtualHost.useACMEHost",
        "type": "null or string",
        "value": "null"
      },
      {
        "name": "webserver",
        "desc": "Whether to use apache2 or nginx for virtual host management. Further nginx configuration can be done by adapting services.nginx.virtualHosts.<name>. See services.nginx.virtualHosts for further information. Further apache2 configuration can be done by adapting services.httpd.virtualHosts.<name>. See services.httpd.virtualHosts for further information.",
        "nixName": "webserver",
        "type": "one of \"httpd\", \"nginx\", \"caddy\"",
        "value": "\"httpd\""
      }
    ]
  }
]